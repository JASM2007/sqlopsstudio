// Generated by typings
// Source: node_modules/ag-grid-angular/dist/interfaces.d.ts
declare module '~ag-grid-angular/dist/interfaces' {
import { IAfterGuiAttachedParams, ICellEditor, ICellEditorParams, ICellRenderer, ICellRendererParams, IDate, IDateParams, IFilter, IFilterParams, IFloatingFilter, IFloatingFilterParams, IHeader, IHeaderGroup, IHeaderGroupParams, IHeaderParams, ILoadingOverlayParams, INoRowsOverlayParams } from 'ag-grid/main';
export interface AgFrameworkComponent<T> {
    agInit(params: T): void;
    afterGuiAttached?(params?: IAfterGuiAttachedParams): void;
}
export interface IHeaderGroupAngularComp extends IHeaderGroup, AgFrameworkComponent<IHeaderGroupParams> {
}
export interface IHeaderAngularComp extends IHeader, AgFrameworkComponent<IHeaderParams> {
}
export interface IFloatingFilterComp extends IFloatingFilter<any, any, any>, AgFrameworkComponent<IFloatingFilterParams<any, any>> {
}
export interface IDateAngularComp extends IDate, AgFrameworkComponent<IDateParams> {
}
export interface IFilterAngularComp extends IFilter, AgFrameworkComponent<IFilterParams> {
}
export interface ICellRendererAngularComp extends ICellRenderer, AgFrameworkComponent<ICellRendererParams> {
}
export interface ICellEditorAngularComp extends ICellEditor, AgFrameworkComponent<ICellEditorParams> {
}
export interface AgRendererComponent extends ICellRendererAngularComp {
}
export interface AgEditorComponent extends ICellEditorAngularComp {
}
export interface AgFilterComponent extends IFilterAngularComp {
}
export interface ILoadingOverlayAngularComp extends AgFrameworkComponent<ILoadingOverlayParams> {
}
export interface INoRowsOverlayAngularComp extends AgFrameworkComponent<INoRowsOverlayParams> {
}
}
declare module 'ag-grid-angular/dist/interfaces' {
export * from '~ag-grid-angular/dist/interfaces';
}

// Generated by typings
// Source: node_modules/ag-grid-angular/dist/aggrid.module.d.ts
declare module '~ag-grid-angular/dist/aggrid.module' {
import { ModuleWithProviders } from '@angular/core';
export class AgGridModule {
    static withComponents(components: any): ModuleWithProviders;
    static forRoot(): ModuleWithProviders;
}
}
declare module 'ag-grid-angular/dist/aggrid.module' {
export * from '~ag-grid-angular/dist/aggrid.module';
}

// Generated by typings
// Source: node_modules/ag-grid-angular/dist/agGridColumn.d.ts
declare module '~ag-grid-angular/dist/agGridColumn' {
import { QueryList } from '@angular/core';
import { ColDef } from 'ag-grid/main';
export class AgGridColumn {
    childColumns: QueryList<AgGridColumn>;
    hasChildColumns(): boolean;
    toColDef(): ColDef;
    private getChildColDefs(childColumns);
    private createColDefFromGridColumn(from);
    children: any;
    sortingOrder: any;
    allowedAggFuncs: any;
    menuTabs: any;
    cellClassRules: any;
    icons: any;
    headerGroupComponent: any;
    headerGroupComponentFramework: any;
    headerGroupComponentParams: any;
    cellStyle: any;
    cellRendererParams: any;
    cellEditorFramework: any;
    cellEditorParams: any;
    pinnedRowCellRendererFramework: any;
    pinnedRowCellRendererParams: any;
    filterFramework: any;
    filterParams: any;
    headerComponent: any;
    headerComponentFramework: any;
    headerComponentParams: any;
    floatingFilterComponent: any;
    floatingFilterComponentParams: any;
    floatingFilterComponentFramework: any;
    refData: any;
    headerName: any;
    columnGroupShow: any;
    headerClass: any;
    toolPanelClass: any;
    headerValueGetter: any;
    groupId: any;
    colId: any;
    sort: any;
    field: any;
    type: any;
    tooltipField: any;
    headerTooltip: any;
    cellClass: any;
    showRowGroup: any;
    filter: any;
    aggFunc: any;
    cellRenderer: any;
    cellEditor: any;
    pinned: any;
    sortedAt: any;
    width: any;
    minWidth: any;
    maxWidth: any;
    rowGroupIndex: any;
    pivotIndex: any;
    valueGetter: any;
    valueSetter: any;
    filterValueGetter: any;
    keyCreator: any;
    cellRendererFramework: any;
    pinnedRowCellRenderer: any;
    valueFormatter: any;
    pinnedRowValueFormatter: any;
    valueParser: any;
    comparator: any;
    equals: any;
    pivotComparator: any;
    suppressKeyboardEvent: any;
    colSpan: any;
    getQuickFilterText: any;
    newValueHandler: any;
    onCellValueChanged: any;
    onCellClicked: any;
    onCellDoubleClicked: any;
    onCellContextMenu: any;
    tooltip: any;
    cellRendererSelector: any;
    cellEditorSelector: any;
    suppressCellFlash: any;
    suppressToolPanel: any;
    openByDefault: any;
    marryChildren: any;
    hide: any;
    rowGroup: any;
    pivot: any;
    checkboxSelection: any;
    headerCheckboxSelection: any;
    headerCheckboxSelectionFilteredOnly: any;
    suppressMenu: any;
    suppressSorting: any;
    suppressMovable: any;
    suppressFilter: any;
    lockPosition: any;
    lockVisible: any;
    lockPinned: any;
    unSortIcon: any;
    suppressSizeToFit: any;
    suppressResize: any;
    suppressAutoSize: any;
    enableRowGroup: any;
    enablePivot: any;
    enableValue: any;
    editable: any;
    suppressPaste: any;
    suppressNavigable: any;
    enableCellChangeFlash: any;
    rowDrag: any;
    autoHeight: any;
}
}
declare module 'ag-grid-angular/dist/agGridColumn' {
export * from '~ag-grid-angular/dist/agGridColumn';
}

// Generated by typings
// Source: node_modules/ag-grid-angular/dist/agGridNg2.d.ts
declare module '~ag-grid-angular/dist/agGridNg2' {
import { AfterViewInit, ComponentFactoryResolver, ElementRef, EventEmitter, QueryList, ViewContainerRef } from '@angular/core';
import { ColumnApi, GridApi, GridOptions } from 'ag-grid/main';
import { Ng2FrameworkFactory } from '~ag-grid-angular/dist/ng2FrameworkFactory';
import { AgGridColumn } from '~ag-grid-angular/dist/agGridColumn';
import { Ng2FrameworkComponentWrapper } from '~ag-grid-angular/dist/ng2FrameworkComponentWrapper';
export class AgGridNg2 implements AfterViewInit {
    private viewContainerRef;
    private ng2FrameworkFactory;
    private frameworkComponentWrapper;
    private _componentFactoryResolver;
    private _nativeElement;
    private _initialised;
    private _destroyed;
    private gridParams;
    private _fullyReady;
    api: GridApi;
    columnApi: ColumnApi;
    columns: QueryList<AgGridColumn>;
    constructor(elementDef: ElementRef, viewContainerRef: ViewContainerRef, ng2FrameworkFactory: Ng2FrameworkFactory, frameworkComponentWrapper: Ng2FrameworkComponentWrapper, _componentFactoryResolver: ComponentFactoryResolver);
    private createComponentEvents();
    ngAfterViewInit(): void;
    ngOnChanges(changes: any): void;
    ngOnDestroy(): void;
    private globalEventListener(eventType, event);
    gridOptions: GridOptions;
    slaveGrids: any;
    alignedGrids: any;
    rowData: any;
    columnDefs: any;
    excelStyles: any;
    pinnedTopRowData: any;
    pinnedBottomRowData: any;
    components: any;
    frameworkComponents: any;
    rowStyle: any;
    context: any;
    autoGroupColumnDef: any;
    groupColumnDef: any;
    localeText: any;
    icons: any;
    datasource: any;
    enterpriseDatasource: any;
    viewportDatasource: any;
    groupRowRendererParams: any;
    aggFuncs: any;
    fullWidthCellRendererParams: any;
    defaultColGroupDef: any;
    defaultColDef: any;
    defaultExportParams: any;
    columnTypes: any;
    rowClassRules: any;
    detailGridOptions: any;
    detailCellRendererParams: any;
    loadingOverlayComponentParams: any;
    noRowsOverlayComponentParams: any;
    popupParent: any;
    sortingOrder: any;
    rowClass: any;
    rowSelection: any;
    overlayLoadingTemplate: any;
    overlayNoRowsTemplate: any;
    quickFilterText: any;
    rowModelType: any;
    editType: any;
    domLayout: any;
    clipboardDeliminator: any;
    rowGroupPanelShow: any;
    multiSortKey: any;
    rowHeight: any;
    detailRowHeight: any;
    rowBuffer: any;
    colWidth: any;
    headerHeight: any;
    groupHeaderHeight: any;
    floatingFiltersHeight: any;
    pivotHeaderHeight: any;
    pivotGroupHeaderHeight: any;
    groupDefaultExpanded: any;
    minColWidth: any;
    maxColWidth: any;
    viewportRowModelPageSize: any;
    viewportRowModelBufferSize: any;
    layoutInterval: any;
    autoSizePadding: any;
    maxBlocksInCache: any;
    maxConcurrentDatasourceRequests: any;
    cacheOverflowSize: any;
    paginationPageSize: any;
    cacheBlockSize: any;
    infiniteInitialRowCount: any;
    scrollbarWidth: any;
    paginationStartPage: any;
    infiniteBlockSize: any;
    batchUpdateWaitMillis: any;
    localeTextFunc: any;
    groupRowInnerRenderer: any;
    groupRowInnerRendererFramework: any;
    dateComponent: any;
    dateComponentFramework: any;
    groupRowRenderer: any;
    groupRowRendererFramework: any;
    isExternalFilterPresent: any;
    getRowHeight: any;
    doesExternalFilterPass: any;
    getRowClass: any;
    getRowStyle: any;
    getRowClassRules: any;
    traverseNode: any;
    getContextMenuItems: any;
    getMainMenuItems: any;
    processRowPostCreate: any;
    processCellForClipboard: any;
    getNodeChildDetails: any;
    groupRowAggNodes: any;
    getRowNodeId: any;
    isFullWidthCell: any;
    fullWidthCellRenderer: any;
    fullWidthCellRendererFramework: any;
    doesDataFlower: any;
    processSecondaryColDef: any;
    processSecondaryColGroupDef: any;
    getBusinessKeyForNode: any;
    sendToClipboard: any;
    navigateToNextCell: any;
    tabToNextCell: any;
    getDetailRowData: any;
    processCellFromClipboard: any;
    getDocument: any;
    postProcessPopup: any;
    getChildCount: any;
    getDataPath: any;
    loadingOverlayComponent: any;
    loadingOverlayComponentFramework: any;
    noRowsOverlayComponent: any;
    noRowsOverlayComponentFramework: any;
    detailCellRenderer: any;
    detailCellRendererFramework: any;
    onGridReady: any;
    defaultGroupSortComparator: any;
    isRowMaster: any;
    isRowSelectable: any;
    postSort: any;
    processHeaderForClipboard: any;
    paginationNumberFormatter: any;
    toolPanelSuppressRowGroups: any;
    toolPanelSuppressValues: any;
    toolPanelSuppressPivots: any;
    toolPanelSuppressPivotMode: any;
    toolPanelSuppressSideButtons: any;
    toolPanelSuppressColumnFilter: any;
    toolPanelSuppressColumnSelectAll: any;
    toolPanelSuppressColumnExpandAll: any;
    suppressMakeColumnVisibleAfterUnGroup: any;
    suppressRowClickSelection: any;
    suppressCellSelection: any;
    suppressHorizontalScroll: any;
    debug: any;
    enableColResize: any;
    enableCellExpressions: any;
    enableSorting: any;
    enableServerSideSorting: any;
    enableFilter: any;
    enableServerSideFilter: any;
    angularCompileRows: any;
    angularCompileFilters: any;
    angularCompileHeaders: any;
    groupSuppressAutoColumn: any;
    groupSelectsChildren: any;
    groupIncludeFooter: any;
    groupUseEntireRow: any;
    groupSuppressRow: any;
    groupSuppressBlankHeader: any;
    forPrint: any;
    suppressMenuHide: any;
    rowDeselection: any;
    unSortIcon: any;
    suppressMultiSort: any;
    singleClickEdit: any;
    suppressLoadingOverlay: any;
    suppressNoRowsOverlay: any;
    suppressAutoSize: any;
    suppressParentsInRowNodes: any;
    showToolPanel: any;
    suppressColumnMoveAnimation: any;
    suppressMovableColumns: any;
    suppressFieldDotNotation: any;
    enableRangeSelection: any;
    pivotPanelShow: any;
    suppressTouch: any;
    suppressAsyncEvents: any;
    allowContextMenuWithControlKey: any;
    suppressContextMenu: any;
    suppressMenuFilterPanel: any;
    suppressMenuMainPanel: any;
    suppressMenuColumnPanel: any;
    enableStatusBar: any;
    alwaysShowStatusBar: any;
    rememberGroupStateWhenNewData: any;
    enableCellChangeFlash: any;
    suppressDragLeaveHidesColumns: any;
    suppressMiddleClickScrolls: any;
    suppressPreventDefaultOnMouseWheel: any;
    suppressUseColIdForGroups: any;
    suppressCopyRowsToClipboard: any;
    pivotMode: any;
    suppressAggFuncInHeader: any;
    suppressColumnVirtualisation: any;
    suppressAggAtRootLevel: any;
    suppressFocusAfterRefresh: any;
    functionsPassive: any;
    functionsReadOnly: any;
    animateRows: any;
    groupSelectsFiltered: any;
    groupRemoveSingleChildren: any;
    groupRemoveLowestSingleChildren: any;
    enableRtl: any;
    suppressClickEdit: any;
    rowDragManaged: any;
    suppressRowDrag: any;
    enableGroupEdit: any;
    embedFullWidthRows: any;
    suppressTabbing: any;
    suppressPaginationPanel: any;
    floatingFilter: any;
    groupHideOpenParents: any;
    groupMultiAutoColumn: any;
    pagination: any;
    stopEditingWhenGridLosesFocus: any;
    paginationAutoPageSize: any;
    suppressScrollOnNewData: any;
    purgeClosedRowNodes: any;
    cacheQuickFilter: any;
    deltaRowDataMode: any;
    ensureDomOrder: any;
    accentedSort: any;
    pivotTotals: any;
    suppressChangeDetection: any;
    valueCache: any;
    valueCacheNeverExpires: any;
    aggregateOnlyChangedColumns: any;
    suppressAnimationFrame: any;
    suppressExcelExport: any;
    suppressCsvExport: any;
    treeData: any;
    masterDetail: any;
    suppressMultiRangeSelection: any;
    enterMovesDownAfterEdit: any;
    enterMovesDown: any;
    suppressPropertyNamesCheck: any;
    rowMultiSelectWithClick: any;
    contractColumnSelection: any;
    suppressEnterpriseResetOnNewColumns: any;
    enableOldSetFilterModel: any;
    columnEverythingChanged: EventEmitter<any>;
    newColumnsLoaded: EventEmitter<any>;
    columnPivotModeChanged: EventEmitter<any>;
    columnRowGroupChanged: EventEmitter<any>;
    columnPivotChanged: EventEmitter<any>;
    gridColumnsChanged: EventEmitter<any>;
    columnValueChanged: EventEmitter<any>;
    columnMoved: EventEmitter<any>;
    columnVisible: EventEmitter<any>;
    columnPinned: EventEmitter<any>;
    columnGroupOpened: EventEmitter<any>;
    columnResized: EventEmitter<any>;
    displayedColumnsChanged: EventEmitter<any>;
    virtualColumnsChanged: EventEmitter<any>;
    rowGroupOpened: EventEmitter<any>;
    rowDataChanged: EventEmitter<any>;
    rowDataUpdated: EventEmitter<any>;
    pinnedRowDataChanged: EventEmitter<any>;
    rangeSelectionChanged: EventEmitter<any>;
    toolPanelVisibleChanged: EventEmitter<any>;
    modelUpdated: EventEmitter<any>;
    cellClicked: EventEmitter<any>;
    cellDoubleClicked: EventEmitter<any>;
    cellMouseDown: EventEmitter<any>;
    cellContextMenu: EventEmitter<any>;
    cellValueChanged: EventEmitter<any>;
    rowValueChanged: EventEmitter<any>;
    cellFocused: EventEmitter<any>;
    rowSelected: EventEmitter<any>;
    selectionChanged: EventEmitter<any>;
    cellMouseOver: EventEmitter<any>;
    cellMouseOut: EventEmitter<any>;
    filterChanged: EventEmitter<any>;
    filterModified: EventEmitter<any>;
    sortChanged: EventEmitter<any>;
    virtualRowRemoved: EventEmitter<any>;
    rowClicked: EventEmitter<any>;
    rowDoubleClicked: EventEmitter<any>;
    gridReady: EventEmitter<any>;
    gridSizeChanged: EventEmitter<any>;
    viewportChanged: EventEmitter<any>;
    dragStarted: EventEmitter<any>;
    dragStopped: EventEmitter<any>;
    rowEditingStarted: EventEmitter<any>;
    rowEditingStopped: EventEmitter<any>;
    cellEditingStarted: EventEmitter<any>;
    cellEditingStopped: EventEmitter<any>;
    bodyScroll: EventEmitter<any>;
    heightScaleChanged: EventEmitter<any>;
    paginationChanged: EventEmitter<any>;
    componentStateChanged: EventEmitter<any>;
    bodyHeightChanged: EventEmitter<any>;
    displayedColumnsWidthChanged: EventEmitter<any>;
    scrollVisibilityChanged: EventEmitter<any>;
    columnHoverChanged: EventEmitter<any>;
    flashCells: EventEmitter<any>;
    rowDragEnter: EventEmitter<any>;
    rowDragMove: EventEmitter<any>;
    rowDragLeave: EventEmitter<any>;
    rowDragEnd: EventEmitter<any>;
    columnRowGroupChangeRequest: EventEmitter<any>;
    columnPivotChangeRequest: EventEmitter<any>;
    columnValueChangeRequest: EventEmitter<any>;
    columnAggFuncChangeRequest: EventEmitter<any>;
}
}
declare module 'ag-grid-angular/dist/agGridNg2' {
export * from '~ag-grid-angular/dist/agGridNg2';
}

// Generated by typings
// Source: node_modules/ag-grid-angular/dist/baseComponentFactory.d.ts
declare module '~ag-grid-angular/dist/baseComponentFactory' {
import { ViewContainerRef } from '@angular/core';
import { IFilterComp } from 'ag-grid/main';
import { IFilterAngularComp } from '~ag-grid-angular/dist/interfaces';
export class BaseComponentFactory {
    createFilterFromComponent(componentType: {
        new (...args: any[]): IFilterAngularComp;
    }, viewContainerRef: ViewContainerRef): {
        new (): IFilterComp;
    };
}
}
declare module 'ag-grid-angular/dist/baseComponentFactory' {
export * from '~ag-grid-angular/dist/baseComponentFactory';
}

// Generated by typings
// Source: node_modules/ag-grid-angular/dist/ng2ComponentFactory.d.ts
declare module '~ag-grid-angular/dist/ng2ComponentFactory' {
import { ViewContainerRef, ComponentRef, ComponentFactoryResolver } from '@angular/core';
import { IFilterComp } from 'ag-grid/main';
import { BaseComponentFactory } from '~ag-grid-angular/dist/baseComponentFactory';
import { IFilterAngularComp } from '~ag-grid-angular/dist/interfaces';
export class Ng2ComponentFactory extends BaseComponentFactory {
    private _componentFactoryResolver;
    constructor(_componentFactoryResolver: ComponentFactoryResolver);
    createFilterFromComponent(componentType: {
        new (...args: any[]): IFilterAngularComp;
    }, viewContainerRef: ViewContainerRef): new () => IFilterComp;
    private adaptComponentToFilter(componentType, viewContainerRef);
    createComponent<T>(componentType: {
        new (...args: any[]): T;
    }, viewContainerRef: ViewContainerRef): ComponentRef<T>;
}
}
declare module 'ag-grid-angular/dist/ng2ComponentFactory' {
export * from '~ag-grid-angular/dist/ng2ComponentFactory';
}

// Generated by typings
// Source: node_modules/ag-grid-angular/dist/ng2FrameworkFactory.d.ts
declare module '~ag-grid-angular/dist/ng2FrameworkFactory' {
import { NgZone, ViewContainerRef } from '@angular/core';
import { IFrameworkFactory } from 'ag-grid/main';
import { BaseComponentFactory } from '~ag-grid-angular/dist/baseComponentFactory';
export class Ng2FrameworkFactory implements IFrameworkFactory {
    private _componentFactory;
    private _ngZone;
    private _viewContainerRef;
    private _baseFrameworkFactory;
    constructor(_componentFactory: BaseComponentFactory, _ngZone: NgZone);
    setViewContainerRef(viewContainerRef: ViewContainerRef): void;
    setTimeout(action: any, timeout?: any): void;
}
}
declare module 'ag-grid-angular/dist/ng2FrameworkFactory' {
export * from '~ag-grid-angular/dist/ng2FrameworkFactory';
}

// Generated by typings
// Source: node_modules/ag-grid-angular/dist/ng2FrameworkComponentWrapper.d.ts
declare module '~ag-grid-angular/dist/ng2FrameworkComponentWrapper' {
import { ComponentFactoryResolver, ComponentRef, ViewContainerRef } from '@angular/core';
import { BaseComponentWrapper, FrameworkComponentWrapper, WrapableInterface } from 'ag-grid';
export class Ng2FrameworkComponentWrapper extends BaseComponentWrapper<WrapableInterface> implements FrameworkComponentWrapper {
    private viewContainerRef;
    private componentFactoryResolver;
    setViewContainerRef(viewContainerRef: ViewContainerRef): void;
    setComponentFactoryResolver(componentFactoryResolver: ComponentFactoryResolver): void;
    createWrapper(OriginalConstructor: {
        new (): any;
    }): WrapableInterface;
    createComponent<T>(componentType: {
        new (...args: any[]): T;
    }): ComponentRef<T>;
}
}
declare module 'ag-grid-angular/dist/ng2FrameworkComponentWrapper' {
export * from '~ag-grid-angular/dist/ng2FrameworkComponentWrapper';
}

// Generated by typings
// Source: node_modules/ag-grid-angular/main.d.ts
declare module '~ag-grid-angular/main' {
export * from '~ag-grid-angular/dist/interfaces';
export * from '~ag-grid-angular/dist/aggrid.module';
export * from '~ag-grid-angular/dist/agGridColumn';
export * from '~ag-grid-angular/dist/agGridNg2';
export * from '~ag-grid-angular/dist/baseComponentFactory';
export * from '~ag-grid-angular/dist/ng2ComponentFactory';
export * from '~ag-grid-angular/dist/ng2FrameworkFactory';
export * from '~ag-grid-angular/dist/ng2FrameworkComponentWrapper';
}
declare module 'ag-grid-angular/main' {
export * from '~ag-grid-angular/main';
}
declare module 'ag-grid-angular' {
export * from '~ag-grid-angular/main';
}
