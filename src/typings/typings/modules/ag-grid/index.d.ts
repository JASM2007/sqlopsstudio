// Generated by typings
// Source: node_modules/ag-grid/dist/lib/columnController/balancedColumnTreeBuilder.d.ts
declare module '~ag-grid/dist/lib/columnController/balancedColumnTreeBuilder' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ColDef, ColGroupDef } from '~ag-grid/dist/lib/entities/colDef';
import { OriginalColumnGroupChild } from '~ag-grid/dist/lib/entities/originalColumnGroupChild';
import { Column } from '~ag-grid/dist/lib/entities/column';
export class BalancedColumnTreeBuilder {
    private gridOptionsWrapper;
    private columnUtils;
    private context;
    private logger;
    private setBeans(loggerFactory);
    createForAutoGroups(autoGroupCols: Column[], gridBalancedTree: OriginalColumnGroupChild[]): OriginalColumnGroupChild[];
    private createAutoGroupTreeItem(balancedColumnTree, column);
    private findDept(balancedColumnTree);
    createBalancedColumnGroups(abstractColDefs: (ColDef | ColGroupDef)[], primaryColumns: boolean): any;
    private balanceColumnTree(unbalancedTree, currentDept, columnDept, columnKeyCreator);
    private findMaxDept(treeChildren, dept);
    private recursivelyCreateColumns(abstractColDefs, level, columnKeyCreator, primaryColumns);
    private createColumnGroup(columnKeyCreator, primaryColumns, colGroupDef, level);
    private createMergedColGroupDef(colGroupDef);
    private createColumn(columnKeyCreator, primaryColumns, colDef);
    mergeColDefs(colDef: ColDef): ColDef;
    private assignColumnTypes(colDef, colDefMerged);
    private checkForDeprecatedItems(colDef);
    private isColumnGroup(abstractColDef);
}
}
declare module 'ag-grid/dist/lib/columnController/balancedColumnTreeBuilder' {
export * from '~ag-grid/dist/lib/columnController/balancedColumnTreeBuilder';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/columnController/columnController.d.ts
declare module '~ag-grid/dist/lib/columnController/columnController' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ColumnGroup } from '~ag-grid/dist/lib/entities/columnGroup';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { ColDef, ColGroupDef } from '~ag-grid/dist/lib/entities/colDef';
import { ColumnGroupChild } from '~ag-grid/dist/lib/entities/columnGroupChild';
import { OriginalColumnGroupChild } from '~ag-grid/dist/lib/entities/originalColumnGroupChild';
import { ColumnEventType } from '~ag-grid/dist/lib/events';
import { OriginalColumnGroup } from '~ag-grid/dist/lib/entities/originalColumnGroup';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export interface ColumnResizeSet {
    columns: Column[];
    ratios: number[];
    width: number;
}
export class ColumnController {
    private gridOptionsWrapper;
    private expressionService;
    private balancedColumnTreeBuilder;
    private displayedGroupCreator;
    private autoWidthCalculator;
    private eventService;
    private columnUtils;
    private gridPanel;
    private context;
    private columnAnimationService;
    private autoGroupColService;
    private aggFuncService;
    private valueCache;
    private columnApi;
    private gridApi;
    private primaryBalancedTree;
    private primaryHeaderRowCount;
    private primaryColumns;
    private secondaryBalancedTree;
    private secondaryColumns;
    private secondaryHeaderRowCount;
    private secondaryColumnsPresent;
    private columnsForQuickFilter;
    private gridBalancedTree;
    private gridColumns;
    private gridHeaderRowCount;
    private lastPrimaryOrder;
    private gridColsArePrimary;
    private displayedLeftColumnTree;
    private displayedRightColumnTree;
    private displayedCentreColumnTree;
    private displayedLeftHeaderRows;
    private displayedRightHeaderRows;
    private displayedCentreHeaderRows;
    private displayedLeftColumns;
    private displayedRightColumns;
    private displayedCenterColumns;
    private allDisplayedColumns;
    private allDisplayedVirtualColumns;
    private allDisplayedCenterVirtualColumns;
    private colSpanActive;
    private autoRowHeightColumns;
    private rowGroupColumns;
    private valueColumns;
    private pivotColumns;
    private groupAutoColumns;
    private groupDisplayColumns;
    private ready;
    private logger;
    private autoGroupsNeedBuilding;
    private pivotMode;
    private usingTreeData;
    private scrollWidth;
    private scrollPosition;
    private bodyWidth;
    private leftWidth;
    private rightWidth;
    private bodyWidthDirty;
    private viewportLeft;
    private viewportRight;
    init(): void;
    isAutoRowHeightActive(): boolean;
    getAllAutoRowHeightCols(): Column[];
    private setVirtualViewportLeftAndRight();
    getDisplayedColumnsStartingAt(column: Column): Column[];
    private checkDisplayedVirtualColumns();
    setVirtualViewportPosition(scrollWidth: number, scrollPosition: number): void;
    isPivotMode(): boolean;
    private isPivotSettingAllowed(pivot);
    setPivotMode(pivotMode: boolean, source?: ColumnEventType): void;
    getSecondaryPivotColumn(pivotKeys: string[], valueColKey: Column | string): Column;
    private setBeans(loggerFactory);
    private setFirstRightAndLastLeftPinned(source);
    autoSizeColumns(keys: (string | Column)[], source?: ColumnEventType): void;
    autoSizeColumn(key: string | Column, source?: ColumnEventType): void;
    autoSizeAllColumns(source?: ColumnEventType): void;
    private getColumnsFromTree(rootColumns);
    getAllDisplayedColumnGroups(): ColumnGroupChild[];
    getPrimaryColumnTree(): OriginalColumnGroupChild[];
    getHeaderRowCount(): number;
    getLeftDisplayedColumnGroups(): ColumnGroupChild[];
    getRightDisplayedColumnGroups(): ColumnGroupChild[];
    getCenterDisplayedColumnGroups(): ColumnGroupChild[];
    getDisplayedColumnGroups(type: string): ColumnGroupChild[];
    isColumnDisplayed(column: Column): boolean;
    getAllDisplayedColumns(): Column[];
    getAllDisplayedVirtualColumns(): Column[];
    getDisplayedLeftColumnsForRow(rowNode: RowNode): Column[];
    getDisplayedRightColumnsForRow(rowNode: RowNode): Column[];
    private getDisplayedColumnsForRow(rowNode, displayedColumns, filterCallback?, emptySpaceBeforeColumn?);
    getAllDisplayedCenterVirtualColumnsForRow(rowNode: RowNode): Column[];
    private isColumnInViewport(col);
    getPinnedLeftContainerWidth(): number;
    getPinnedRightContainerWidth(): number;
    updatePrimaryColumnList(keys: (string | Column)[], masterList: Column[], actionIsAdd: boolean, columnCallback: (column: Column) => void, eventType: string, source?: ColumnEventType): void;
    setRowGroupColumns(colKeys: (string | Column)[], source?: ColumnEventType): void;
    private setRowGroupActive(active, column, source);
    addRowGroupColumn(key: string | Column, source?: ColumnEventType): void;
    addRowGroupColumns(keys: (string | Column)[], source?: ColumnEventType): void;
    removeRowGroupColumns(keys: (string | Column)[], source?: ColumnEventType): void;
    removeRowGroupColumn(key: string | Column, source?: ColumnEventType): void;
    addPivotColumns(keys: (string | Column)[], source?: ColumnEventType): void;
    setPivotColumns(colKeys: (string | Column)[], source?: ColumnEventType): void;
    addPivotColumn(key: string | Column, source?: ColumnEventType): void;
    removePivotColumns(keys: (string | Column)[], source?: ColumnEventType): void;
    removePivotColumn(key: string | Column, source?: ColumnEventType): void;
    private setPrimaryColumnList(colKeys, masterList, eventName, columnCallback, source);
    setValueColumns(colKeys: (string | Column)[], source?: ColumnEventType): void;
    private setValueActive(active, column, source);
    addValueColumns(keys: (string | Column)[], source?: ColumnEventType): void;
    addValueColumn(colKey: (string | Column), source?: ColumnEventType): void;
    removeValueColumn(colKey: (string | Column), source?: ColumnEventType): void;
    removeValueColumns(keys: (string | Column)[], source?: ColumnEventType): void;
    private normaliseColumnWidth(column, newWidth);
    private getPrimaryOrGridColumn(key);
    setColumnWidth(key: string | Column, newWidth: number, takeFromAdjacent: boolean, finished: boolean, source?: ColumnEventType): void;
    private checkMinAndMaxWidthsForSet(columnResizeSet);
    resizeColumnSets(resizeSets: ColumnResizeSet[], finished: boolean, source: ColumnEventType): void;
    setColumnAggFunc(column: Column, aggFunc: string, source?: ColumnEventType): void;
    moveRowGroupColumn(fromIndex: number, toIndex: number, source?: ColumnEventType): void;
    moveColumns(columnsToMoveKeys: (string | Column)[], toIndex: number, source?: ColumnEventType): void;
    doesMovePassRules(columnsToMove: Column[], toIndex: number): boolean;
    doesMovePassLockedPositions(proposedColumnOrder: Column[]): boolean;
    doesMovePassMarryChildren(allColumnsCopy: Column[]): boolean;
    moveColumn(key: string | Column, toIndex: number, source?: ColumnEventType): void;
    moveColumnByIndex(fromIndex: number, toIndex: number, source?: ColumnEventType): void;
    getBodyContainerWidth(): number;
    getContainerWidth(pinned: string): number;
    private updateBodyWidths();
    getValueColumns(): Column[];
    getPivotColumns(): Column[];
    isPivotActive(): boolean;
    getRowGroupColumns(): Column[];
    getDisplayedCenterColumns(): Column[];
    getDisplayedLeftColumns(): Column[];
    getDisplayedRightColumns(): Column[];
    getDisplayedColumns(type: string): Column[];
    getAllPrimaryColumns(): Column[];
    getAllColumnsForQuickFilter(): Column[];
    getAllGridColumns(): Column[];
    isEmpty(): boolean;
    isRowGroupEmpty(): boolean;
    setColumnVisible(key: string | Column, visible: boolean, source?: ColumnEventType): void;
    setColumnsVisible(keys: (string | Column)[], visible: boolean, source?: ColumnEventType): void;
    setColumnPinned(key: string | Column, pinned: string | boolean, source?: ColumnEventType): void;
    setColumnsPinned(keys: (string | Column)[], pinned: string | boolean, source?: ColumnEventType): void;
    private actionOnGridColumns(keys, action, source, createEvent?);
    getDisplayedColBefore(col: Column): Column;
    getDisplayedColAfter(col: Column): Column;
    getDisplayedGroupAfter(columnGroup: ColumnGroup): ColumnGroup;
    isPinningLeft(): boolean;
    isPinningRight(): boolean;
    getPrimaryAndSecondaryAndAutoColumns(): Column[];
    private createStateItemFromColumn(column);
    getColumnState(): any[];
    private orderColumnStateList(columnStateList);
    resetColumnState(source?: ColumnEventType): void;
    setColumnState(columnState: any[], source?: ColumnEventType): boolean;
    private sortColumnListUsingIndexes(indexes, colA, colB);
    private syncColumnWithNoState(column, source);
    private syncColumnWithStateItem(column, stateItem, rowGroupIndexes, pivotIndexes, source);
    getGridColumns(keys: (string | Column)[]): Column[];
    private getColumns(keys, columnLookupCallback);
    getColumnWithValidation(key: string | Column): Column;
    getPrimaryColumn(key: string | Column): Column;
    getGridColumn(key: string | Column): Column;
    private getColumn(key, columnList);
    private getAutoColumn(key);
    private columnsMatch(column, key);
    getDisplayNameForColumn(column: Column, location: string, includeAggFunc?: boolean): string;
    getDisplayNameForColumnGroup(columnGroup: ColumnGroup, location: string): string;
    private getHeaderName(colDef, column, columnGroup, location);
    private wrapHeaderNameWithAggFunc(column, headerName);
    getColumnGroup(colId: string | ColumnGroup, instanceId?: number): ColumnGroup;
    setColumnDefs(columnDefs: (ColDef | ColGroupDef)[], source?: ColumnEventType): void;
    isReady(): boolean;
    private extractRowGroupColumns(source);
    private extractPivotColumns(source);
    resetColumnGroupState(source?: ColumnEventType): void;
    getColumnGroupState(): {
        groupId: string;
        open: boolean;
    }[];
    setColumnGroupState(stateItems: {
        groupId: string;
        open: boolean;
    }[], source?: ColumnEventType): void;
    setColumnGroupOpened(key: OriginalColumnGroup | string, newValue: boolean, source?: ColumnEventType): void;
    getOriginalColumnGroup(key: OriginalColumnGroup | string): OriginalColumnGroup;
    private calculateColumnsForDisplay();
    private checkColSpanActiveInCols(columns);
    private calculateColumnsForGroupDisplay();
    getGroupDisplayColumns(): Column[];
    private updateDisplayedColumns(source);
    isSecondaryColumnsPresent(): boolean;
    setSecondaryColumns(colDefs: (ColDef | ColGroupDef)[], source?: ColumnEventType): void;
    private processSecondaryColumnDefinitions(colDefs);
    private updateGridColumns();
    private orderGridColsLikeLastPrimary();
    isPrimaryColumnGroupsPresent(): boolean;
    private setupQuickFilterColumns();
    private putFixedColumnsFirst();
    private addAutoGroupToGridColumns();
    private clearDisplayedColumns();
    private updateGroupsAndDisplayedColumns(source);
    private updateDisplayedColumnsFromTrees(source);
    private setupAllDisplayedColumns();
    private setLeftValues(source);
    private setLeftValuesOfColumns(source);
    private setLeftValuesOfGroups();
    private addToDisplayedColumns(displayedColumnTree, displayedColumns);
    private updateDisplayedCenterVirtualColumns();
    getVirtualHeaderGroupRow(type: string, dept: number): ColumnGroupChild[];
    private updateDisplayedVirtualGroups(virtualColIds);
    private updateVirtualSets();
    private filterOutColumnsWithinViewport();
    sizeColumnsToFit(gridWidth: any, source?: ColumnEventType): void;
    private buildDisplayedTrees(visibleColumns);
    private updateOpenClosedVisibilityInColumnGroups();
    getGroupAutoColumns(): Column[];
    private createGroupAutoColumnsIfNeeded();
    private createValueColumns(source);
    private getWidthOfColsInList(columnList);
    getGridBalancedTree(): OriginalColumnGroupChild[];
}
}
declare module 'ag-grid/dist/lib/columnController/columnController' {
export * from '~ag-grid/dist/lib/columnController/columnController';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/columnController/columnKeyCreator.d.ts
declare module '~ag-grid/dist/lib/columnController/columnKeyCreator' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class ColumnKeyCreator {
    private existingKeys;
    getUniqueKey(colId: string, colField: string): string;
}
}
declare module 'ag-grid/dist/lib/columnController/columnKeyCreator' {
export * from '~ag-grid/dist/lib/columnController/columnKeyCreator';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/entities/columnGroupChild.d.ts
declare module '~ag-grid/dist/lib/entities/columnGroupChild' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { AbstractColDef } from '~ag-grid/dist/lib/entities/colDef';
import { IEventEmitter } from '~ag-grid/dist/lib/interfaces/iEventEmitter';
import { ColumnGroup } from '~ag-grid/dist/lib/entities/columnGroup';
export interface ColumnGroupChild extends IEventEmitter {
    getUniqueId(): string;
    getActualWidth(): number;
    getMinWidth(): number;
    getLeft(): number;
    getOldLeft(): number;
    getDefinition(): AbstractColDef;
    getColumnGroupShow(): string;
    getParent(): ColumnGroupChild;
    isResizable(): boolean;
    setParent(parent: ColumnGroup): void;
    isEmptyGroup(): boolean;
    isMoving(): boolean;
}
}
declare module 'ag-grid/dist/lib/entities/columnGroupChild' {
export * from '~ag-grid/dist/lib/entities/columnGroupChild';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/columnController/columnUtils.d.ts
declare module '~ag-grid/dist/lib/columnController/columnUtils' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ColumnGroupChild } from '~ag-grid/dist/lib/entities/columnGroupChild';
import { OriginalColumnGroupChild } from '~ag-grid/dist/lib/entities/originalColumnGroupChild';
import { OriginalColumnGroup } from '~ag-grid/dist/lib/entities/originalColumnGroup';
import { Column } from '~ag-grid/dist/lib/entities/column';
export class ColumnUtils {
    private gridOptionsWrapper;
    calculateColInitialWidth(colDef: any): number;
    getOriginalPathForColumn(column: Column, originalBalancedTree: OriginalColumnGroupChild[]): OriginalColumnGroup[];
    depthFirstOriginalTreeSearch(tree: OriginalColumnGroupChild[], callback: (treeNode: OriginalColumnGroupChild) => void): void;
    depthFirstAllColumnTreeSearch(tree: ColumnGroupChild[], callback: (treeNode: ColumnGroupChild) => void): void;
    depthFirstDisplayedColumnTreeSearch(tree: ColumnGroupChild[], callback: (treeNode: ColumnGroupChild) => void): void;
}
}
declare module 'ag-grid/dist/lib/columnController/columnUtils' {
export * from '~ag-grid/dist/lib/columnController/columnUtils';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/columnController/displayedGroupCreator.d.ts
declare module '~ag-grid/dist/lib/columnController/displayedGroupCreator' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { OriginalColumnGroupChild } from '~ag-grid/dist/lib/entities/originalColumnGroupChild';
import { GroupInstanceIdCreator } from '~ag-grid/dist/lib/columnController/groupInstanceIdCreator';
import { ColumnGroupChild } from '~ag-grid/dist/lib/entities/columnGroupChild';
export class DisplayedGroupCreator {
    private columnUtils;
    private context;
    createDisplayedGroups(sortedVisibleColumns: Column[], balancedColumnTree: OriginalColumnGroupChild[], groupInstanceIdCreator: GroupInstanceIdCreator, oldDisplayedGroups?: ColumnGroupChild[]): ColumnGroupChild[];
    private createColumnGroup(originalGroup, groupInstanceIdCreator, oldColumnsMapped);
    private mapOldGroupsById(displayedGroups);
    private setupParentsIntoColumns(columnsOrGroups, parent);
    private getOriginalPathForColumn(balancedColumnTree, column);
}
}
declare module 'ag-grid/dist/lib/columnController/displayedGroupCreator' {
export * from '~ag-grid/dist/lib/columnController/displayedGroupCreator';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/columnController/groupInstanceIdCreator.d.ts
declare module '~ag-grid/dist/lib/columnController/groupInstanceIdCreator' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class GroupInstanceIdCreator {
    private existingIds;
    getInstanceIdForKey(key: string): number;
}
}
declare module 'ag-grid/dist/lib/columnController/groupInstanceIdCreator' {
export * from '~ag-grid/dist/lib/columnController/groupInstanceIdCreator';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/components/componentUtil.d.ts
declare module '~ag-grid/dist/lib/components/componentUtil' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { GridOptions } from '~ag-grid/dist/lib/entities/gridOptions';
import { GridApi } from '~ag-grid/dist/lib/gridApi';
import { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
export class ComponentUtil {
    static EVENTS: string[];
    private static EVENT_CALLBACKS;
    static STRING_PROPERTIES: string[];
    static OBJECT_PROPERTIES: string[];
    static ARRAY_PROPERTIES: string[];
    static NUMBER_PROPERTIES: string[];
    static BOOLEAN_PROPERTIES: string[];
    static FUNCTION_PROPERTIES: string[];
    static ALL_PROPERTIES: string[];
    static getEventCallbacks(): string[];
    static copyAttributesToGridOptions(gridOptions: GridOptions, component: any): GridOptions;
    static getCallbackForEvent(eventName: string): string;
    static processOnChange(changes: any, gridOptions: GridOptions, api: GridApi, columnApi: ColumnApi): void;
    static toBoolean(value: any): boolean;
    static toNumber(value: any): number;
}
}
declare module 'ag-grid/dist/lib/components/componentUtil' {
export * from '~ag-grid/dist/lib/components/componentUtil';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/components/colDefUtil.d.ts
declare module '~ag-grid/dist/lib/components/colDefUtil' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class ColDefUtil {
    static STRING_PROPERTIES: string[];
    static OBJECT_PROPERTIES: string[];
    static ARRAY_PROPERTIES: string[];
    static NUMBER_PROPERTIES: string[];
    static BOOLEAN_PROPERTIES: string[];
    static FUNCTION_PROPERTIES: string[];
    static ALL_PROPERTIES: string[];
}
}
declare module 'ag-grid/dist/lib/components/colDefUtil' {
export * from '~ag-grid/dist/lib/components/colDefUtil';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/components/framework/componentResolver.d.ts
declare module '~ag-grid/dist/lib/components/framework/componentResolver' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { GridOptions } from '~ag-grid/dist/lib/entities/gridOptions';
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
import { ColDef, ColGroupDef } from '~ag-grid/dist/lib/entities/colDef';
import { Promise } from '~ag-grid/dist/lib/utils';
import { AgGridRegisteredComponentInput } from '~ag-grid/dist/lib/components/framework/componentProvider';
import { ISetFilterParams } from '~ag-grid/dist/lib/interfaces/iSetFilterParams';
import { IRichCellEditorParams } from '~ag-grid/dist/lib/interfaces/iRichCellEditorParams';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { GridApi } from '~ag-grid/dist/lib/gridApi';
import { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
export type ComponentHolder = GridOptions | ColDef | ColGroupDef | ISetFilterParams | IRichCellEditorParams;
export type AgComponentPropertyInput<A extends IComponent<any>> = AgGridRegisteredComponentInput<A> | string;
export enum ComponentType {
    AG_GRID = 0,
    FRAMEWORK = 1,
}
export enum ComponentSource {
    DEFAULT = 0,
    REGISTERED_BY_NAME = 1,
    HARDCODED = 2,
}
export interface DynamicComponentParams {
    data?: any;
    node?: RowNode;
    colDef?: ColDef;
    column?: Column;
    $scope?: any;
    rowIndex?: number;
    api: GridApi;
    columnApi: ColumnApi;
}
export interface DynamicComponentDef {
    component?: string;
    params?: any;
}
/**
 * B the business interface (ie IHeader)
 * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
 */
export interface ResolvedComponent<A extends IComponent<any> & B, B> {
    component: {
        new (): A;
    } | {
        new (): B;
    };
    type: ComponentType;
    source: ComponentSource;
    dynamicParams: any;
}
export class ComponentResolver {
    private gridOptions;
    private gridOptionsWrapper;
    private context;
    private agComponentUtils;
    private componentMetadataProvider;
    private componentProvider;
    private frameworkComponentWrapper;
    /**
     * This method returns the underlying representation of the component to be created. ie for Javascript the
     * underlying function where we should be calling new into. In case of the frameworks, the framework class
     * object that represents the component to be created.
     *
     * This method is handy for different reasons, for example if you want to check if a component has a particular
     * method implemented without having to create the component, just by inspecting the source component
     *
     * It takes
     *  @param holder: This is the context for which this component needs to be created, it can be gridOptions
     *      (global) or columnDef mostly.
     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
     *  @param dynamicComponentParams: Params to be passed to the dynamic component function in case it needs to be
     *      invoked
     *  @param defaultComponentName: The name of the component to load if there is no component specified
     */
    getComponentToUse<A extends IComponent<any> & B, B>(holder: ComponentHolder, propertyName: string, dynamicComponentParams: DynamicComponentParams, defaultComponentName?: string): ResolvedComponent<A, B>;
    private resolveByName<A, B>(propertyName, componentNameOpt?);
    /**
     * Useful to check what would be the resultant params for a given object
     *  @param holder: This is the context for which this component needs to be created, it can be gridOptions
     *      (global) or columnDef mostly.
     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
     *  @param agGridParams: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
     *      specified by the user in the configuration
     * @returns {any} It merges the user agGridParams with the actual params specified by the user.
     */
    mergeParams(holder: ComponentHolder, propertyName: string, agGridParams: any, dynamicCustomParams: any, dynamicParams?: any): any;
    /**
     * This method creates a component given everything needed to guess what sort of component needs to be instantiated
     * It takes
     *  @param holderOpt: This is the context for which this component needs to be created, it can be gridOptions
     *      (global) or columnDef mostly.
     *  @param agGridParams: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
     *      specified by the user in the configuration
     *  @param propertyName: The name of the property used in ag-grid as a convention to refer to the component, it can be:
     *      'floatingFilter', 'cellRenderer', is used to find if the user is specifying a custom component
     *  @param dynamicComponentParams: Params to be passed to the dynamic component function in case it needs to be
     *      invoked
     *  @param defaultComponentName: The actual name of the component to instantiate, this is usually the same as propertyName, but in
     *      some cases is not, like floatingFilter, if it is the same is not necessary to specify
     *  @param mandatory: Handy method to tell if this should return a component ALWAYS. if that is the case, but there is no
     *      component found, it throws an error, by default all components are MANDATORY
     *  @param customInitParamsCb: A chance to customise the params passed to the init method. It receives what the current
     *  params are and the component that init is about to get called for
     */
    createAgGridComponent<A extends IComponent<any>>(holderOpt: ComponentHolder, agGridParams: any, propertyName: string, dynamicComponentParams: DynamicComponentParams, defaultComponentName?: string, mandatory?: boolean, customInitParamsCb?: (params: any, component: A) => any): Promise<A>;
    /**
     * This method creates a component given everything needed to guess what sort of component needs to be instantiated
     * It takes
     *  @param clazz: The class to instantiate,
     *  @param agGridParams: Params to be passed to the component and passed by ag-Grid. This will get merged with any params
     *      specified by the user in the configuration
     *  @param customInitParamsCb: A chance to customise the params passed to the init method. It receives what the current
     *  params are and the component that init is about to get called for
     */
    createInternalAgGridComponent<A extends IComponent<any>>(clazz: {
        new (): A;
    }, agGridParams: any, customInitParamsCb?: (params: any, component: A) => any): A;
    private newAgGridComponent<A, B>(holder, propertyName, dynamicComponentParams, defaultComponentName?, mandatory?);
    private initialiseComponent<A>(component, agGridParams, customInitParamsCb?);
}
}
declare module 'ag-grid/dist/lib/components/framework/componentResolver' {
export * from '~ag-grid/dist/lib/components/framework/componentResolver';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/components/framework/componentProvider.d.ts
declare module '~ag-grid/dist/lib/components/framework/componentProvider' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
import { ComponentType } from '~ag-grid/dist/lib/components/framework/componentResolver';
export enum RegisteredComponentSource {
    DEFAULT = 0,
    REGISTERED = 1,
}
/**
 * B the business interface (ie IHeader)
 * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
 */
export interface RegisteredComponent<A extends IComponent<any> & B, B> {
    component: RegisteredComponentInput<A, B>;
    type: ComponentType;
    source: RegisteredComponentSource;
}
export type RegisteredComponentInput<A extends IComponent<any> & B, B> = AgGridRegisteredComponentInput<A> | {
    new (): B;
};
export type AgGridRegisteredComponentInput<A extends IComponent<any>> = AgGridComponentFunctionInput | {
    new (): A;
};
export type AgGridComponentFunctionInput = (params: any) => string | HTMLElement;
export interface DeprecatedComponentName {
    propertyHolder: string;
    newComponentName: string;
}
export class ComponentProvider {
    private gridOptions;
    private agGridDefaults;
    private agDeprecatedNames;
    private jsComponents;
    private frameworkComponents;
    private init();
    registerDefaultComponent<A extends IComponent<any>>(rawName: string, component: AgGridRegisteredComponentInput<A>, overridable?: boolean): void;
    registerComponent<A extends IComponent<any>>(rawName: string, component: AgGridRegisteredComponentInput<A>): void;
    /**
     * B the business interface (ie IHeader)
     * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
     */
    registerFwComponent<A extends IComponent<any> & B, B>(rawName: string, component: {
        new (): IComponent<B>;
    }): void;
    /**
     * B the business interface (ie IHeader)
     * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
     */
    retrieve<A extends IComponent<any> & B, B>(rawName: string): RegisteredComponent<A, B>;
    private translateIfDeprecated(raw);
}
}
declare module 'ag-grid/dist/lib/components/framework/componentProvider' {
export * from '~ag-grid/dist/lib/components/framework/componentProvider';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/components/agGridNg1.d.ts
declare module '~ag-grid/dist/lib/components/agGridNg1' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export function initialiseAgGridWithAngular1(angular: any): void;
}
declare module 'ag-grid/dist/lib/components/agGridNg1' {
export * from '~ag-grid/dist/lib/components/agGridNg1';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/components/agGridWebComponent.d.ts
declare module '~ag-grid/dist/lib/components/agGridWebComponent' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export function initialiseAgGridWithWebComponents(): void;
}
declare module 'ag-grid/dist/lib/components/agGridWebComponent' {
export * from '~ag-grid/dist/lib/components/agGridWebComponent';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iEventEmitter.d.ts
declare module '~ag-grid/dist/lib/interfaces/iEventEmitter' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export interface IEventEmitter {
    addEventListener(eventType: string, listener: Function, async?: boolean): void;
    removeEventListener(eventType: string, listener: Function, async?: boolean): void;
}
}
declare module 'ag-grid/dist/lib/interfaces/iEventEmitter' {
export * from '~ag-grid/dist/lib/interfaces/iEventEmitter';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/context/beanStub.d.ts
declare module '~ag-grid/dist/lib/context/beanStub' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IEventEmitter } from '~ag-grid/dist/lib/interfaces/iEventEmitter';
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
import { AgEvent } from '~ag-grid/dist/lib/events';
export class BeanStub implements IEventEmitter {
    static EVENT_DESTROYED: string;
    private localEventService;
    private destroyFunctions;
    private destroyed;
    destroy(): void;
    addEventListener(eventType: string, listener: Function): void;
    removeEventListener(eventType: string, listener: Function): void;
    dispatchEventAsync(event: AgEvent): void;
    dispatchEvent<T extends AgEvent>(event: T): void;
    addDestroyableEventListener(eElement: HTMLElement | IEventEmitter | GridOptionsWrapper, event: string, listener: (event?: any) => void): void;
    isAlive(): boolean;
    addDestroyFunc(func: () => void): void;
}
}
declare module 'ag-grid/dist/lib/context/beanStub' {
export * from '~ag-grid/dist/lib/context/beanStub';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/iLogger.d.ts
declare module '~ag-grid/dist/lib/iLogger' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export interface ILogger {
    log(message: string): void;
}
}
declare module 'ag-grid/dist/lib/iLogger' {
export * from '~ag-grid/dist/lib/iLogger';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/context/context.d.ts
declare module '~ag-grid/dist/lib/context/context' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ILogger } from '~ag-grid/dist/lib/iLogger';
import { Component } from '~ag-grid/dist/lib/widgets/component';
export interface ContextParams {
    seed: any;
    beans: any[];
    components: ComponentMeta[];
    overrideBeans: any[];
    debug: boolean;
}
export interface ComponentMeta {
    theClass: new () => Object;
    componentName: string;
}
export class Context {
    private beans;
    private contextParams;
    private logger;
    private componentsMappedByName;
    private destroyed;
    constructor(params: ContextParams, logger: ILogger);
    private setupComponents();
    private addComponent(componentMeta);
    createComponent(element: Element, afterPreCreateCallback?: (comp: Component) => void): Component;
    wireBean(bean: any, afterPreCreateCallback?: (comp: Component) => void): void;
    private wireBeans(beans, afterPreCreateCallback?);
    private createBeans();
    private createBeanEntry(Bean);
    private autoWireBeans(beans);
    private methodWireBeans(beans);
    private autoWireBean(bean);
    private getBeanName(constructor);
    private methodWireBean(bean);
    private getBeansForParameters(parameters, beanName);
    private lookupBeanInstance(wiringBean, beanName, optional?);
    private postConstruct(beans);
    private preConstruct(beans);
    getBean(name: string): any;
    destroy(): void;
}
export function PreConstruct(target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): void;
export function PostConstruct(target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): void;
export function PreDestroy(target: Object, methodName: string, descriptor: TypedPropertyDescriptor<any>): void;
export function Bean(beanName: string): Function;
export function Autowired(name?: string): Function;
export function Optional(name?: string): Function;
export function Qualifier(name: string): Function;
}
declare module 'ag-grid/dist/lib/context/context' {
export * from '~ag-grid/dist/lib/context/context';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/widgets/componentAnnotations.d.ts
declare module '~ag-grid/dist/lib/widgets/componentAnnotations' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export function QuerySelector(selector?: string): Function;
export function RefSelector(ref?: string): Function;
export function Listener(eventName?: string): Function;
export function Method(eventName?: string): Function;
}
declare module 'ag-grid/dist/lib/widgets/componentAnnotations' {
export * from '~ag-grid/dist/lib/widgets/componentAnnotations';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iExcelCreator.d.ts
declare module '~ag-grid/dist/lib/interfaces/iExcelCreator' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ExportParams } from '~ag-grid/dist/lib/exportParams';
export interface ExcelWorksheet {
    name: string;
    table: ExcelTable;
}
export interface ExcelTable {
    columns: ExcelColumn[];
    rows: ExcelRow[];
}
export interface ExcelColumn {
    width: number;
}
export interface ExcelRow {
    cells: ExcelCell[];
}
export interface ExcelCell {
    styleId: string;
    data: ExcelData;
    mergeAcross?: number;
}
export interface ExcelData {
    type: ExcelDataType;
    value: string;
}
export type ExcelDataType = "String" | "Number" | "Boolean" | "DateTime" | "Error";
export interface ExcelStyle {
    id?: string;
    name?: string;
    alignment?: ExcelAlignment;
    borders?: ExcelBorders;
    font?: ExcelFont;
    interior?: ExcelInterior;
    numberFormat?: ExcelNumberFormat;
    protection?: ExcelProtection;
    dataType?: string;
}
export interface ExcelProtection {
    protected: boolean;
    hideFormula: boolean;
}
export interface ExcelNumberFormat {
    format: string;
}
export interface ExcelAlignment {
    vertical: string;
    indent: number;
    horizontal: string;
    readingOrder: string;
    rotate: number;
    shrinkToFit: boolean;
    verticalText: boolean;
    wrapText: boolean;
}
export interface ExcelBorders {
    borderBottom: ExcelBorder;
    borderLeft: ExcelBorder;
    borderTop: ExcelBorder;
    borderRight: ExcelBorder;
}
export interface ExcelBorder {
    lineStyle: string;
    weight: number;
    color: string;
}
export interface ExcelFont {
    bold: boolean;
    color: string;
    fontName: string;
    italic: boolean;
    outline: boolean;
    shadow: boolean;
    size: number;
    strikeThrough: boolean;
    underline: string;
    verticalAlign: string;
    charSet: number;
    family: string;
}
export interface ExcelInterior {
    color: string;
    pattern: string;
    patternColor: string;
}
export interface ExcelExportParams extends ExportParams<ExcelCell[][]> {
    sheetName?: string;
    suppressTextAsCDATA?: boolean;
}
export interface IExcelCreator {
    exportDataAsExcel(params?: ExcelExportParams): void;
    getDataAsExcelXml(params?: ExcelExportParams): string;
}
}
declare module 'ag-grid/dist/lib/interfaces/iExcelCreator' {
export * from '~ag-grid/dist/lib/interfaces/iExcelCreator';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/dragAndDrop/dragAndDropService.d.ts
declare module '~ag-grid/dist/lib/dragAndDrop/dragAndDropService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export enum DragSourceType {
    ToolPanel = 0,
    HeaderCell = 1,
    RowDrag = 2,
}
export interface DragItem {
    rowNode?: RowNode;
    columns?: Column[];
    visibleState?: {
        [key: string]: boolean;
    };
}
export interface DragSource {
    /** So the drop target knows what type of event it is, useful for columns,
     * we we re-ordering or moving dropping from toolPanel */
    type: DragSourceType;
    /** Element which, when dragged, will kick off the DnD process */
    eElement: HTMLElement;
    /** If eElement is dragged, then the dragItem is the object that gets passed around. */
    dragItemCallback: () => DragItem;
    /** This name appears in the ghost icon when dragging */
    dragItemName: string;
    /** The drop target associated with this dragSource. So when dragging starts, this target does not get
     * onDragEnter event. */
    dragSourceDropTarget?: DropTarget;
    /** After how many pixels of dragging should the drag operation start. Default is 4px. */
    dragStartPixels?: number;
    /** Callback for drag started */
    dragStarted?: () => void;
    /** Callback for drag stopped */
    dragStopped?: () => void;
}
export interface DropTarget {
    /** The main container that will get the drop. */
    getContainer(): HTMLElement;
    /** If any secondary containers. For example when moving columns in ag-Grid, we listen for drops
     * in the header as well as the body (main rows and pinned rows) of the grid. */
    getSecondaryContainers?(): HTMLElement[];
    /** Icon to show when drag is over*/
    getIconName?(): string;
    isInterestedIn(type: DragSourceType): boolean;
    /** Callback for when drag enters */
    onDragEnter?(params: DraggingEvent): void;
    /** Callback for when drag leaves */
    onDragLeave?(params: DraggingEvent): void;
    /** Callback for when dragging */
    onDragging?(params: DraggingEvent): void;
    /** Callback for when drag stops */
    onDragStop?(params: DraggingEvent): void;
}
export enum VDirection {
    Up = 0,
    Down = 1,
}
export enum HDirection {
    Left = 0,
    Right = 1,
}
export interface DraggingEvent {
    event: MouseEvent;
    x: number;
    y: number;
    vDirection: VDirection;
    hDirection: HDirection;
    dragSource: DragSource;
    dragItem: DragItem;
    fromNudge: boolean;
}
export class DragAndDropService {
    private gridOptionsWrapper;
    private dragService;
    private environment;
    private columnController;
    static ICON_PINNED: string;
    static ICON_ADD: string;
    static ICON_MOVE: string;
    static ICON_LEFT: string;
    static ICON_RIGHT: string;
    static ICON_GROUP: string;
    static ICON_AGGREGATE: string;
    static ICON_PIVOT: string;
    static ICON_NOT_ALLOWED: string;
    static GHOST_TEMPLATE: string;
    private logger;
    private dragSourceAndParamsList;
    private dragItem;
    private eventLastTime;
    private dragSource;
    private dragging;
    private eGhost;
    private eGhostParent;
    private eGhostIcon;
    private dropTargets;
    private lastDropTarget;
    private ePinnedIcon;
    private ePlusIcon;
    private eHiddenIcon;
    private eMoveIcon;
    private eLeftIcon;
    private eRightIcon;
    private eGroupIcon;
    private eAggregateIcon;
    private ePivotIcon;
    private eDropNotAllowedIcon;
    private init();
    private setBeans(loggerFactory);
    private getStringType(type);
    addDragSource(dragSource: DragSource, allowTouch?: boolean): void;
    removeDragSource(dragSource: DragSource): void;
    private destroy();
    nudge(): void;
    private onDragStart(dragSource, mouseEvent);
    private onDragStop(mouseEvent);
    private onDragging(mouseEvent, fromNudge);
    private enterDragTargetIfExists(dropTarget, mouseEvent, hDirection, vDirection, fromNudge);
    private leaveLastTargetIfExists(mouseEvent, hDirection, vDirection, fromNudge);
    private getAllContainersFromDropTarget(dropTarget);
    private isMouseOnDropTarget(mouseEvent, dropTarget);
    addDropTarget(dropTarget: DropTarget): void;
    workOutHDirection(event: MouseEvent): HDirection;
    workOutVDirection(event: MouseEvent): VDirection;
    createDropTargetEvent(dropTarget: DropTarget, event: MouseEvent, hDirection: HDirection, vDirection: VDirection, fromNudge: boolean): DraggingEvent;
    private positionGhost(event);
    private removeGhost();
    private createGhost();
    setGhostIcon(iconName: string, shake?: boolean): void;
}
}
declare module 'ag-grid/dist/lib/dragAndDrop/dragAndDropService' {
export * from '~ag-grid/dist/lib/dragAndDrop/dragAndDropService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/dragAndDrop/dragService.d.ts
declare module '~ag-grid/dist/lib/dragAndDrop/dragService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
/** Adds drag listening onto an element. In ag-Grid this is used twice, first is resizing columns,
 * second is moving the columns and column groups around (ie the 'drag' part of Drag and Drop. */
export class DragService {
    private loggerFactory;
    private eventService;
    private gridOptionsWrapper;
    private columnApi;
    private gridApi;
    private currentDragParams;
    private dragging;
    private mouseEventLastTime;
    private mouseStartEvent;
    private touchLastTime;
    private touchStart;
    private onMouseUpListener;
    private onMouseMoveListener;
    private onTouchEndListener;
    private onTouchMoveListener;
    private logger;
    private dragEndFunctions;
    private dragSources;
    private init();
    private destroy();
    private removeListener(dragSourceAndListener);
    removeDragSource(params: DragListenerParams): void;
    private setNoSelectToBody(noSelect);
    addDragSource(params: DragListenerParams, includeTouch?: boolean): void;
    private onTouchStart(params, touchEvent);
    private onMouseDown(params, mouseEvent);
    private isEventNearStartEvent(currentEvent, startEvent);
    private getFirstActiveTouch(touchList);
    private onCommonMove(currentEvent, startEvent);
    private onTouchMove(touchEvent);
    private onMouseMove(mouseEvent);
    onTouchUp(touchEvent: TouchEvent): void;
    onMouseUp(mouseEvent: MouseEvent): void;
    onUpCommon(eventOrTouch: MouseEvent | Touch): void;
}
export interface DragListenerParams {
    /** After how many pixels of dragging should the drag operation start. Default is 4px. */
    dragStartPixels?: number;
    /** Dom element to add the drag handling to */
    eElement: HTMLElement;
    /** Some places may wish to ignore certain events, eg range selection ignores shift clicks */
    skipMouseEvent?: (mouseEvent: MouseEvent) => boolean;
    /** Callback for drag starting */
    onDragStart: (mouseEvent: MouseEvent | Touch) => void;
    /** Callback for drag stopping */
    onDragStop: (mouseEvent: MouseEvent | Touch) => void;
    /** Callback for mouse move while dragging */
    onDragging: (mouseEvent: MouseEvent | Touch) => void;
}
}
declare module 'ag-grid/dist/lib/dragAndDrop/dragService' {
export * from '~ag-grid/dist/lib/dragAndDrop/dragService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/entities/column.d.ts
declare module '~ag-grid/dist/lib/entities/column' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ColumnGroupChild } from '~ag-grid/dist/lib/entities/columnGroupChild';
import { OriginalColumnGroupChild } from '~ag-grid/dist/lib/entities/originalColumnGroupChild';
import { AbstractColDef, ColDef, IAggFunc } from '~ag-grid/dist/lib/entities/colDef';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { IEventEmitter } from '~ag-grid/dist/lib/interfaces/iEventEmitter';
import { ColumnEventType } from '~ag-grid/dist/lib/events';
import { ColumnGroup } from '~ag-grid/dist/lib/entities/columnGroup';
export class Column implements ColumnGroupChild, OriginalColumnGroupChild, IEventEmitter {
    static EVENT_MOVING_CHANGED: string;
    static EVENT_LEFT_CHANGED: string;
    static EVENT_WIDTH_CHANGED: string;
    static EVENT_LAST_LEFT_PINNED_CHANGED: string;
    static EVENT_FIRST_RIGHT_PINNED_CHANGED: string;
    static EVENT_VISIBLE_CHANGED: string;
    static EVENT_FILTER_CHANGED: string;
    static EVENT_FILTER_ACTIVE_CHANGED: string;
    static EVENT_SORT_CHANGED: string;
    static EVENT_MENU_VISIBLE_CHANGED: string;
    static EVENT_ROW_GROUP_CHANGED: string;
    static EVENT_PIVOT_CHANGED: string;
    static EVENT_VALUE_CHANGED: string;
    static PINNED_RIGHT: string;
    static PINNED_LEFT: string;
    static SORT_ASC: string;
    static SORT_DESC: string;
    private gridOptionsWrapper;
    private columnUtils;
    private frameworkFactory;
    private columnApi;
    private gridApi;
    private colDef;
    private colId;
    private actualWidth;
    private visible;
    private pinned;
    private left;
    private oldLeft;
    private aggFunc;
    private sort;
    private sortedAt;
    private moving;
    private menuVisible;
    private lockPosition;
    private lockPinned;
    private lockVisible;
    private lastLeftPinned;
    private firstRightPinned;
    private minWidth;
    private maxWidth;
    private filterActive;
    private eventService;
    private fieldContainsDots;
    private tooltipFieldContainsDots;
    private rowGroupActive;
    private pivotActive;
    private aggregationActive;
    private primary;
    private parent;
    constructor(colDef: ColDef, colId: String, primary: boolean);
    isLockPosition(): boolean;
    isLockVisible(): boolean;
    isLockPinned(): boolean;
    setParent(parent: ColumnGroup): void;
    getParent(): ColumnGroup;
    initialise(): void;
    isEmptyGroup(): boolean;
    isRowGroupDisplayed(colId: string): boolean;
    getUniqueId(): string;
    isPrimary(): boolean;
    isFilterAllowed(): boolean;
    isFieldContainsDots(): boolean;
    isTooltipFieldContainsDots(): boolean;
    private validate();
    addEventListener(eventType: string, listener: Function): void;
    removeEventListener(eventType: string, listener: Function): void;
    private createIsColumnFuncParams(rowNode);
    isSuppressNavigable(rowNode: RowNode): boolean;
    isCellEditable(rowNode: RowNode): boolean;
    isRowDrag(rowNode: RowNode): boolean;
    isCellCheckboxSelection(rowNode: RowNode): boolean;
    isSuppressPaste(rowNode: RowNode): boolean;
    isResizable(): boolean;
    private isColumnFunc(rowNode, value);
    setMoving(moving: boolean, source?: ColumnEventType): void;
    private createColumnEvent(type, source);
    isMoving(): boolean;
    getSort(): string;
    setSort(sort: string, source?: ColumnEventType): void;
    setMenuVisible(visible: boolean, source?: ColumnEventType): void;
    isMenuVisible(): boolean;
    isSortAscending(): boolean;
    isSortDescending(): boolean;
    isSortNone(): boolean;
    isSorting(): boolean;
    getSortedAt(): number;
    setSortedAt(sortedAt: number): void;
    setAggFunc(aggFunc: string | IAggFunc): void;
    getAggFunc(): string | IAggFunc;
    getLeft(): number;
    getOldLeft(): number;
    getRight(): number;
    setLeft(left: number, source?: ColumnEventType): void;
    isFilterActive(): boolean;
    setFilterActive(active: boolean, source?: ColumnEventType): void;
    setPinned(pinned: string | boolean): void;
    setFirstRightPinned(firstRightPinned: boolean, source?: ColumnEventType): void;
    setLastLeftPinned(lastLeftPinned: boolean, source?: ColumnEventType): void;
    isFirstRightPinned(): boolean;
    isLastLeftPinned(): boolean;
    isPinned(): boolean;
    isPinnedLeft(): boolean;
    isPinnedRight(): boolean;
    getPinned(): string;
    setVisible(visible: boolean, source?: ColumnEventType): void;
    isVisible(): boolean;
    getColDef(): ColDef;
    getColumnGroupShow(): string;
    getColId(): string;
    getId(): string;
    getDefinition(): AbstractColDef;
    getActualWidth(): number;
    getColSpan(rowNode: RowNode): number;
    setActualWidth(actualWidth: number, source?: ColumnEventType): void;
    isGreaterThanMax(width: number): boolean;
    getMinWidth(): number;
    getMaxWidth(): number;
    setMinimum(source?: ColumnEventType): void;
    setRowGroupActive(rowGroup: boolean, source?: ColumnEventType): void;
    isRowGroupActive(): boolean;
    setPivotActive(pivot: boolean, source?: ColumnEventType): void;
    isPivotActive(): boolean;
    isAnyFunctionActive(): boolean;
    isAnyFunctionAllowed(): boolean;
    setValueActive(value: boolean, source?: ColumnEventType): void;
    isValueActive(): boolean;
    isAllowPivot(): boolean;
    isAllowValue(): boolean;
    isAllowRowGroup(): boolean;
    getMenuTabs(defaultValues: string[]): string[];
}
}
declare module 'ag-grid/dist/lib/entities/column' {
export * from '~ag-grid/dist/lib/entities/column';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/entities/columnGroup.d.ts
declare module '~ag-grid/dist/lib/entities/columnGroup' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ColumnGroupChild } from '~ag-grid/dist/lib/entities/columnGroupChild';
import { ColGroupDef } from '~ag-grid/dist/lib/entities/colDef';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { AbstractColDef } from '~ag-grid/dist/lib/entities/colDef';
import { OriginalColumnGroup } from '~ag-grid/dist/lib/entities/originalColumnGroup';
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
export class ColumnGroup implements ColumnGroupChild {
    static HEADER_GROUP_SHOW_OPEN: string;
    static HEADER_GROUP_SHOW_CLOSED: string;
    static EVENT_LEFT_CHANGED: string;
    static EVENT_DISPLAYED_CHILDREN_CHANGED: string;
    static createUniqueId(groupId: string, instanceId: number): string;
    gridOptionsWrapper: GridOptionsWrapper;
    private columnApi;
    private gridApi;
    private children;
    private displayedChildren;
    private groupId;
    private instanceId;
    private originalColumnGroup;
    private left;
    private oldLeft;
    private localEventService;
    private parent;
    constructor(originalColumnGroup: OriginalColumnGroup, groupId: string, instanceId: number);
    reset(): void;
    getParent(): ColumnGroup;
    setParent(parent: ColumnGroup): void;
    getUniqueId(): string;
    isEmptyGroup(): boolean;
    isMoving(): boolean;
    checkLeft(): void;
    getLeft(): number;
    getOldLeft(): number;
    setLeft(left: number): void;
    private createAgEvent(type);
    addEventListener(eventType: string, listener: Function): void;
    removeEventListener(eventType: string, listener: Function): void;
    getGroupId(): string;
    getInstanceId(): number;
    isChildInThisGroupDeepSearch(wantedChild: ColumnGroupChild): boolean;
    getActualWidth(): number;
    isResizable(): boolean;
    getMinWidth(): number;
    addChild(child: ColumnGroupChild): void;
    getDisplayedChildren(): ColumnGroupChild[];
    getLeafColumns(): Column[];
    getDisplayedLeafColumns(): Column[];
    getDefinition(): AbstractColDef;
    getColGroupDef(): ColGroupDef;
    isPadding(): boolean;
    isExpandable(): boolean;
    isExpanded(): boolean;
    setExpanded(expanded: boolean): void;
    private addDisplayedLeafColumns(leafColumns);
    private addLeafColumns(leafColumns);
    getChildren(): ColumnGroupChild[];
    getColumnGroupShow(): string;
    getOriginalColumnGroup(): OriginalColumnGroup;
    calculateDisplayedColumns(): void;
}
}
declare module 'ag-grid/dist/lib/entities/columnGroup' {
export * from '~ag-grid/dist/lib/entities/columnGroup';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/entities/gridCell.d.ts
declare module '~ag-grid/dist/lib/entities/gridCell' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { GridRow } from '~ag-grid/dist/lib/entities/gridRow';
export interface GridCellDef {
    floating: string;
    rowIndex: number;
    column: Column;
}
export class GridCell {
    floating: string;
    rowIndex: number;
    column: Column;
    constructor(gridCellDef: GridCellDef);
    getGridCellDef(): GridCellDef;
    getGridRow(): GridRow;
    toString(): string;
    createId(): string;
    equals(other: GridCell): boolean;
}
}
declare module 'ag-grid/dist/lib/entities/gridCell' {
export * from '~ag-grid/dist/lib/entities/gridCell';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/entities/gridRow.d.ts
declare module '~ag-grid/dist/lib/entities/gridRow' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { GridCell } from '~ag-grid/dist/lib/entities/gridCell';
import { Column } from '~ag-grid/dist/lib/entities/column';
export class GridRow {
    floating: string;
    rowIndex: number;
    constructor(rowIndex: number, floating: string);
    isFloatingTop(): boolean;
    isFloatingBottom(): boolean;
    isNotFloating(): boolean;
    equals(otherSelection: GridRow): boolean;
    toString(): string;
    getGridCell(column: Column): GridCell;
    before(otherSelection: GridRow): boolean;
}
}
declare module 'ag-grid/dist/lib/entities/gridRow' {
export * from '~ag-grid/dist/lib/entities/gridRow';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/entities/originalColumnGroup.d.ts
declare module '~ag-grid/dist/lib/entities/originalColumnGroup' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { OriginalColumnGroupChild } from '~ag-grid/dist/lib/entities/originalColumnGroupChild';
import { ColGroupDef } from '~ag-grid/dist/lib/entities/colDef';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { IEventEmitter } from '~ag-grid/dist/lib/interfaces/iEventEmitter';
export class OriginalColumnGroup implements OriginalColumnGroupChild, IEventEmitter {
    static EVENT_EXPANDED_CHANGED: string;
    static EVENT_EXPANDABLE_CHANGED: string;
    private columnApi;
    private gridApi;
    private localEventService;
    private colGroupDef;
    private children;
    private groupId;
    private expandable;
    private expanded;
    private padding;
    private level;
    constructor(colGroupDef: ColGroupDef, groupId: string, padding: boolean, level: number);
    getLevel(): number;
    isVisible(): boolean;
    isPadding(): boolean;
    setExpanded(expanded: boolean): void;
    isExpandable(): boolean;
    isExpanded(): boolean;
    getGroupId(): string;
    getId(): string;
    setChildren(children: OriginalColumnGroupChild[]): void;
    getChildren(): OriginalColumnGroupChild[];
    getColGroupDef(): ColGroupDef;
    getLeafColumns(): Column[];
    private addLeafColumns(leafColumns);
    getColumnGroupShow(): string;
    setupExpandable(): void;
    setExpandable(): void;
    private onColumnVisibilityChanged();
    addEventListener(eventType: string, listener: Function): void;
    removeEventListener(eventType: string, listener: Function): void;
}
}
declare module 'ag-grid/dist/lib/entities/originalColumnGroup' {
export * from '~ag-grid/dist/lib/entities/originalColumnGroup';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/entities/rowNode.d.ts
declare module '~ag-grid/dist/lib/entities/rowNode' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { AgEvent } from '~ag-grid/dist/lib/events';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { RowNodeCache, RowNodeCacheParams } from '~ag-grid/dist/lib/rowModels/cache/rowNodeCache';
import { RowNodeBlock } from '~ag-grid/dist/lib/rowModels/cache/rowNodeBlock';
import { IEventEmitter } from '~ag-grid/dist/lib/interfaces/iEventEmitter';
import { DetailGridInfo } from '~ag-grid/dist/lib/gridApi';
export interface SetSelectedParams {
    newValue: boolean;
    clearSelection?: boolean;
    tailingNodeInSequence?: boolean;
    rangeSelect?: boolean;
    groupSelectsFiltered?: boolean;
}
export interface RowNodeEvent extends AgEvent {
    node: RowNode;
}
export interface DataChangedEvent extends RowNodeEvent {
    oldData: any;
    newData: any;
    update: boolean;
}
export interface CellChangedEvent extends RowNodeEvent {
    column: Column;
    newValue: any;
}
export class RowNode implements IEventEmitter {
    static EVENT_ROW_SELECTED: string;
    static EVENT_DATA_CHANGED: string;
    static EVENT_CELL_CHANGED: string;
    static EVENT_ALL_CHILDREN_COUNT_CHANGED: string;
    static EVENT_MOUSE_ENTER: string;
    static EVENT_MOUSE_LEAVE: string;
    static EVENT_HEIGHT_CHANGED: string;
    static EVENT_TOP_CHANGED: string;
    static EVENT_FIRST_CHILD_CHANGED: string;
    static EVENT_LAST_CHILD_CHANGED: string;
    static EVENT_CHILD_INDEX_CHANGED: string;
    static EVENT_ROW_INDEX_CHANGED: string;
    static EVENT_EXPANDED_CHANGED: string;
    static EVENT_SELECTABLE_CHANGED: string;
    static EVENT_UI_LEVEL_CHANGED: string;
    static EVENT_DRAGGING_CHANGED: string;
    private mainEventService;
    private gridOptionsWrapper;
    private selectionController;
    private columnController;
    private valueService;
    private rowModel;
    private context;
    private valueCache;
    private columnApi;
    private gridApi;
    /** Unique ID for the node. Either provided by the grid, or user can set to match the primary
     * key in the database (or whatever data source is used). */
    id: string;
    /** The group data */
    groupData: any;
    /** The aggregated data */
    aggData: any;
    /** The user provided data */
    data: any;
    /** The parent node to this node, or empty if top level */
    parent: RowNode;
    /** How many levels this node is from the top */
    level: number;
    /** How many levels this node is from the top in the UI (different to the level when removing parents)*/
    uiLevel: number;
    /** If doing in memory grouping, this is the index of the group column this cell is for.
     * This will always be the same as the level, unless we are collapsing groups ie groupRemoveSingleChildren = true */
    rowGroupIndex: number;
    /** True if this node is a group node (ie has children) */
    group: boolean;
    /** True if this row is getting dragged */
    dragging: boolean;
    /** True if this row is a master row, part of master / detail (ie row can be expanded to show detail) */
    master: boolean;
    /** True if this row is a detail row, part of master / detail (ie child row of an expanded master row)*/
    detail: boolean;
    /** If this row is a master row that was expanded, this points to the associated detail row. */
    detailNode: RowNode;
    /** If master detail, this contains details about the detail grid */
    detailGridInfo: DetailGridInfo;
    /** Same as master, kept for legacy reasons */
    canFlower: boolean;
    /** Same as detail, kept for legacy reasons */
    flower: boolean;
    /** Same as detailNode, kept for legacy reasons */
    childFlower: RowNode;
    /** True if this node is a group and the group is the bottom level in the tree */
    leafGroup: boolean;
    /** True if this is the first child in this group */
    firstChild: boolean;
    /** True if this is the last child in this group */
    lastChild: boolean;
    /** The index of this node in the group */
    childIndex: number;
    /** The index of this node in the grid, only valid if node is displayed in the grid, otherwise it should be ignored as old index may be present */
    rowIndex: number;
    /** Either 'top' or 'bottom' if row pinned, otherwise undefined or null */
    rowPinned: string;
    /** If using quick filter, stores a string representation of the row for searching against */
    quickFilterAggregateText: string;
    /** Groups only - True if row is a footer. Footers  have group = true and footer = true */
    footer: boolean;
    /** Groups only - The field we are grouping on eg Country*/
    field: string;
    /** Groups only - the row group column for this group */
    rowGroupColumn: Column;
    /** Groups only - The key for the group eg Ireland, UK, USA */
    key: any;
    /** Used by enterprise row model, true if this row node is a stub */
    stub: boolean;
    /** All user provided nodes */
    allLeafChildren: RowNode[];
    /** Groups only - Children of this group */
    childrenAfterGroup: RowNode[];
    /** Groups only - Filtered children of this group */
    childrenAfterFilter: RowNode[];
    /** Groups only - Sorted children of this group */
    childrenAfterSort: RowNode[];
    /** Groups only - Number of children and grand children */
    allChildrenCount: number;
    /** Children mapped by the pivot columns */
    childrenMapped: {
        [key: string]: any;
    };
    /** Enterprise Row Model Only - the children are in an infinite cache */
    childrenCache: RowNodeCache<RowNodeBlock, RowNodeCacheParams>;
    /** Groups only - True if group is expanded, otherwise false */
    expanded: boolean;
    /** Groups only - If doing footers, reference to the footer node for this group */
    sibling: RowNode;
    /** The height, in pixels, of this row */
    rowHeight: number;
    /** The top pixel for this row */
    rowTop: number;
    /** The top pixel for this row last time, makes sense if data set was ordered or filtered,
     * it is used so new rows can animate in from their old position. */
    oldRowTop: number;
    /** True if this node is a daemon. This means row is not part of the model. Can happen when then
     * the row is selected and then the user sets a different ID onto the node. The nodes is then
     * representing a different entity, so the selection controller, if the node is selected, takes
     * a copy where daemon=true. */
    daemon: boolean;
    /** True by default - can be overridden via gridOptions.isRowSelectable(rowNode) */
    selectable: boolean;
    /** Used by the value service, stores values for a particular change detection turn. */
    __cacheData: {
        [colId: string]: any;
    };
    __cacheVersion: number;
    private selected;
    private eventService;
    setData(data: any): void;
    private createDataChangedEvent(newData, oldData, update);
    private createLocalRowEvent(type);
    updateData(data: any): void;
    getRowIndexString(): string;
    private createDaemonNode();
    setDataAndId(data: any, id: string): void;
    private checkRowSelectable();
    setRowSelectable(newVal: boolean): void;
    setId(id: string): void;
    isPixelInRange(pixel: number): boolean;
    clearRowTop(): void;
    setFirstChild(firstChild: boolean): void;
    setLastChild(lastChild: boolean): void;
    setChildIndex(childIndex: number): void;
    setRowTop(rowTop: number): void;
    setDragging(dragging: boolean): void;
    setAllChildrenCount(allChildrenCount: number): void;
    setRowHeight(rowHeight: number): void;
    setRowIndex(rowIndex: number): void;
    setUiLevel(uiLevel: number): void;
    setExpanded(expanded: boolean): void;
    private createGlobalRowEvent(type);
    private dispatchLocalEvent(event);
    setDataValue(colKey: string | Column, newValue: any): void;
    setGroupValue(colKey: string | Column, newValue: any): void;
    setAggData(newAggData: any): void;
    hasChildren(): boolean;
    isEmptyFillerNode(): boolean;
    private dispatchCellChangedEvent(column, newValue);
    resetQuickFilterAggregateText(): void;
    isExpandable(): boolean;
    isSelected(): boolean;
    depthFirstSearch(callback: (rowNode: RowNode) => void): void;
    calculateSelectedFromChildren(): void;
    private calculateSelectedFromChildrenBubbleUp();
    setSelectedInitialValue(selected: boolean): void;
    setSelected(newValue: boolean, clearSelection?: boolean, tailingNodeInSequence?: boolean): void;
    isRowPinned(): boolean;
    setSelectedParams(params: SetSelectedParams): number;
    private doRowRangeSelection();
    isParentOfNode(potentialParent: RowNode): boolean;
    private calculatedSelectedForAllGroupNodes();
    selectThisNode(newValue: boolean): boolean;
    private selectChildNodes(newValue, groupSelectsFiltered);
    addEventListener(eventType: string, listener: Function): void;
    removeEventListener(eventType: string, listener: Function): void;
    onMouseEnter(): void;
    onMouseLeave(): void;
    getFirstChildOfFirstChild(rowGroupColumn: Column): RowNode;
}
}
declare module 'ag-grid/dist/lib/entities/rowNode' {
export * from '~ag-grid/dist/lib/entities/rowNode';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/filter/baseFilter.d.ts
declare module '~ag-grid/dist/lib/filter/baseFilter' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { IFilterComp, IDoesFilterPassParams, IFilterParams } from '~ag-grid/dist/lib/interfaces/iFilter';
import { Context } from '~ag-grid/dist/lib/context/context';
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
import { FloatingFilterChange } from '~ag-grid/dist/lib/filter/floatingFilter';
import { INumberFilterParams, ITextFilterParams } from '~ag-grid/dist/lib/filter/textFilter';
export interface Comparator<T> {
    (left: T, right: T): number;
}
/**
 * T(ype) The type of this filter. ie in DateFilter T=Date
 * P(arams) The params that this filter can take
 * M(model getModel/setModel) The object that this filter serializes to
 * F Floating filter params
 *
 * Contains common logic to ALL filters.. Translation, apply and clear button
 * get/setModel context wiring....
 */
export abstract class BaseFilter<T, P extends IFilterParams, M> extends Component implements IFilterComp {
    static EQUALS: string;
    static NOT_EQUAL: string;
    static LESS_THAN: string;
    static LESS_THAN_OR_EQUAL: string;
    static GREATER_THAN: string;
    static GREATER_THAN_OR_EQUAL: string;
    static IN_RANGE: string;
    static CONTAINS: string;
    static NOT_CONTAINS: string;
    static STARTS_WITH: string;
    static ENDS_WITH: string;
    private newRowsActionKeep;
    filterParams: P;
    clearActive: boolean;
    applyActive: boolean;
    defaultFilter: string;
    filter: string;
    private eButtonsPanel;
    private eApplyButton;
    private eClearButton;
    context: Context;
    gridOptionsWrapper: GridOptionsWrapper;
    init(params: P): void;
    onClearButton(): void;
    abstract customInit(): void;
    abstract isFilterActive(): boolean;
    abstract modelFromFloatingFilter(from: string): M;
    abstract doesFilterPass(params: IDoesFilterPassParams): boolean;
    abstract bodyTemplate(): string;
    abstract resetState(): void;
    abstract serialize(): M;
    abstract parse(toParse: M): void;
    abstract refreshFilterBodyUi(): void;
    abstract initialiseFilterBodyUi(): void;
    floatingFilter(from: string): void;
    onNewRowsLoaded(): void;
    getModel(): M;
    getNullableModel(): M;
    setModel(model: M): void;
    private doOnFilterChanged(applyNow?);
    onFilterChanged(applyNow?: boolean): void;
    onFloatingFilterChanged(change: FloatingFilterChange): boolean;
    generateFilterHeader(): string;
    private generateTemplate();
    translate(toTranslate: string): string;
    getDebounceMs(filterParams: ITextFilterParams | INumberFilterParams): number;
}
/**
 * Every filter with a dropdown where the user can specify a comparing type against the filter values
 */
export abstract class ComparableBaseFilter<T, P extends IFilterParams, M> extends BaseFilter<T, P, M> {
    private eTypeSelector;
    abstract getApplicableFilterTypes(): string[];
    abstract filterValues(): T | T[];
    init(params: P): void;
    customInit(): void;
    generateFilterHeader(): string;
    initialiseFilterBodyUi(): void;
    abstract getDefaultType(): string;
    private onFilterTypeChanged();
    isFilterActive(): boolean;
    setFilterType(filterType: string): void;
}
export interface NullComparator {
    equals?: boolean;
    lessThan?: boolean;
    greaterThan?: boolean;
}
export interface IScalarFilterParams extends IFilterParams {
    inRangeInclusive?: boolean;
    nullComparator?: NullComparator;
}
/**
 * Comparable filter with scalar underlying values (ie numbers and dates. Strings are not scalar so have to extend
 * ComparableBaseFilter)
 */
export abstract class ScalarBaseFilter<T, P extends IScalarFilterParams, M> extends ComparableBaseFilter<T, P, M> {
    static readonly DEFAULT_NULL_COMPARATOR: NullComparator;
    abstract comparator(): Comparator<T>;
    private nullComparator(type);
    getDefaultType(): string;
    private translateNull(type);
    doesFilterPass(params: IDoesFilterPassParams): boolean;
}
}
declare module 'ag-grid/dist/lib/filter/baseFilter' {
export * from '~ag-grid/dist/lib/filter/baseFilter';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/filter/dateFilter.d.ts
declare module '~ag-grid/dist/lib/filter/dateFilter' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IFilterParams, SerializedFilter } from '~ag-grid/dist/lib/interfaces/iFilter';
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { IDateParams, IDateComp } from '~ag-grid/dist/lib/rendering/dateComponent';
import { Comparator, ScalarBaseFilter } from '~ag-grid/dist/lib/filter/baseFilter';
export interface IDateFilterParams extends IFilterParams {
    comparator?: IDateComparatorFunc;
    browserDatePicker?: boolean;
}
export interface IDateComparatorFunc {
    (filterLocalDateAtMidnight: Date, cellValue: any): number;
}
export interface SerializedDateFilter extends SerializedFilter {
    dateFrom: string;
    dateTo: string;
    type: string;
}
export class DateFilter extends ScalarBaseFilter<Date, IDateFilterParams, SerializedDateFilter> {
    private dateToComponent;
    private dateFromComponent;
    private componentRecipes;
    private eDateFromPanel;
    private eDateToPanel;
    private dateFrom;
    private dateTo;
    modelFromFloatingFilter(from: string): SerializedDateFilter;
    getApplicableFilterTypes(): string[];
    bodyTemplate(): string;
    initialiseFilterBodyUi(): void;
    private onDateChanged();
    refreshFilterBodyUi(): void;
    comparator(): Comparator<Date>;
    private defaultComparator(filterDate, cellValue);
    serialize(): SerializedDateFilter;
    filterValues(): Date | Date[];
    getDateFrom(): string;
    getDateTo(): string;
    getFilterType(): string;
    setDateFrom(date: string): void;
    setDateTo(date: string): void;
    resetState(): void;
    parse(model: SerializedDateFilter): void;
    setType(filterType: string): void;
    static removeTimezone(from: Date): Date;
}
export class DefaultDateComponent extends Component implements IDateComp {
    private eDateInput;
    private listener;
    constructor();
    init(params: IDateParams): void;
    getDate(): Date;
    setDate(date: Date): void;
}
}
declare module 'ag-grid/dist/lib/filter/dateFilter' {
export * from '~ag-grid/dist/lib/filter/dateFilter';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/filter/filterManager.d.ts
declare module '~ag-grid/dist/lib/filter/filterManager' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ExternalPromise, Promise } from '~ag-grid/dist/lib/utils';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { ColumnEventType } from '~ag-grid/dist/lib/events';
import { IFilterComp } from '~ag-grid/dist/lib/interfaces/iFilter';
export class FilterManager {
    private $compile;
    private $scope;
    private gridOptionsWrapper;
    private gridCore;
    private popupService;
    private valueService;
    private columnController;
    private rowModel;
    private eventService;
    private enterprise;
    private context;
    private columnApi;
    private gridApi;
    private componentResolver;
    static QUICK_FILTER_SEPARATOR: string;
    private allFilters;
    private quickFilter;
    private quickFilterParts;
    private advancedFilterPresent;
    private externalFilterPresent;
    init(): void;
    private setQuickFilterParts();
    setFilterModel(model: any): void;
    private setModelOnFilterWrapper(filterPromise, newModel);
    getFilterModel(): any;
    isAdvancedFilterPresent(): boolean;
    private setAdvancedFilterPresent();
    private updateFilterFlagInColumns(source);
    isAnyFilterPresent(): boolean;
    private doesFilterPass(node, filterToSkip?);
    private parseQuickFilter(newFilter);
    setQuickFilter(newFilter: any): void;
    private checkExternalFilter();
    onFilterChanged(): void;
    isQuickFilterPresent(): boolean;
    doesRowPassOtherFilters(filterToSkip: any, node: any): boolean;
    private doesRowPassQuickFilterNoCache(node, filterPart);
    private doesRowPassQuickFilterCache(node, filterPart);
    private doesRowPassQuickFilter(node);
    doesRowPassFilter(node: any, filterToSkip?: any): boolean;
    private getQuickFilterTextForColumn(column, rowNode);
    private aggregateRowForQuickFilter(node);
    private onNewRowsLoaded(source);
    private createValueGetter(column);
    getFilterComponent(column: Column): Promise<IFilterComp>;
    getOrCreateFilterWrapper(column: Column): FilterWrapper;
    cachedFilter(column: Column): FilterWrapper;
    private createFilterInstance(column, $scope);
    private createFilterWrapper(column);
    private putIntoGui(filterWrapper);
    private onNewColumnsLoaded();
    destroyFilter(column: Column, source?: ColumnEventType): void;
    private disposeFilterWrapper(filterWrapper, source);
    destroy(): void;
}
export interface FilterWrapper {
    column: Column;
    filterPromise: Promise<IFilterComp>;
    scope: any;
    guiPromise: ExternalPromise<HTMLElement>;
}
}
declare module 'ag-grid/dist/lib/filter/filterManager' {
export * from '~ag-grid/dist/lib/filter/filterManager';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/filter/numberFilter.d.ts
declare module '~ag-grid/dist/lib/filter/numberFilter' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { SerializedFilter } from '~ag-grid/dist/lib/interfaces/iFilter';
import { Comparator, ScalarBaseFilter } from '~ag-grid/dist/lib/filter/baseFilter';
import { INumberFilterParams } from '~ag-grid/dist/lib/filter/textFilter';
export interface SerializedNumberFilter extends SerializedFilter {
    filter: number;
    filterTo: number;
    type: string;
}
export class NumberFilter extends ScalarBaseFilter<number, INumberFilterParams, SerializedNumberFilter> {
    private eNumberToPanel;
    filterNumber: any;
    filterNumberTo: any;
    private eFilterToTextField;
    private eFilterTextField;
    static LESS_THAN: string;
    modelFromFloatingFilter(from: string): SerializedNumberFilter;
    getApplicableFilterTypes(): string[];
    bodyTemplate(): string;
    initialiseFilterBodyUi(): void;
    afterGuiAttached(): void;
    comparator(): Comparator<number>;
    private onTextFieldsChanged();
    filterValues(): number | number[];
    private asNumber(value);
    private stringToFloat(value);
    setFilter(filter: any): void;
    setFilterTo(filter: any): void;
    getFilter(): any;
    serialize(): SerializedNumberFilter;
    parse(model: SerializedNumberFilter): void;
    refreshFilterBodyUi(): void;
    resetState(): void;
    setType(filterType: string): void;
}
}
declare module 'ag-grid/dist/lib/filter/numberFilter' {
export * from '~ag-grid/dist/lib/filter/numberFilter';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/filter/textFilter.d.ts
declare module '~ag-grid/dist/lib/filter/textFilter' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IFilterParams, IDoesFilterPassParams, SerializedFilter } from '~ag-grid/dist/lib/interfaces/iFilter';
import { ComparableBaseFilter, IScalarFilterParams } from '~ag-grid/dist/lib/filter/baseFilter';
export interface SerializedTextFilter extends SerializedFilter {
    filter: string;
    type: string;
}
export interface TextComparator {
    (filter: string, gridValue: any, filterText: string): boolean;
}
export interface TextFormatter {
    (from: string): string;
}
export interface INumberFilterParams extends IScalarFilterParams {
    debounceMs?: number;
}
export interface ITextFilterParams extends IFilterParams {
    textCustomComparator?: TextComparator;
    debounceMs?: number;
    caseSensitive?: boolean;
}
export class TextFilter extends ComparableBaseFilter<string, ITextFilterParams, SerializedTextFilter> {
    private eFilterTextField;
    private filterText;
    private comparator;
    private formatter;
    static DEFAULT_FORMATTER: TextFormatter;
    static DEFAULT_LOWERCASE_FORMATTER: TextFormatter;
    static DEFAULT_COMPARATOR: TextComparator;
    getDefaultType(): string;
    customInit(): void;
    modelFromFloatingFilter(from: string): SerializedTextFilter;
    getApplicableFilterTypes(): string[];
    bodyTemplate(): string;
    initialiseFilterBodyUi(): void;
    refreshFilterBodyUi(): void;
    afterGuiAttached(): void;
    filterValues(): string;
    doesFilterPass(params: IDoesFilterPassParams): boolean;
    private onFilterTextFieldChanged();
    setFilter(filter: string): void;
    getFilter(): string;
    resetState(): void;
    serialize(): SerializedTextFilter;
    parse(model: SerializedTextFilter): void;
    setType(filterType: string): void;
}
}
declare module 'ag-grid/dist/lib/filter/textFilter' {
export * from '~ag-grid/dist/lib/filter/textFilter';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/filter/floatingFilter.d.ts
declare module '~ag-grid/dist/lib/filter/floatingFilter' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { SerializedTextFilter } from '~ag-grid/dist/lib/filter/textFilter';
import { SerializedDateFilter } from '~ag-grid/dist/lib/filter/dateFilter';
import { SerializedNumberFilter } from '~ag-grid/dist/lib/filter/numberFilter';
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { GridApi } from '~ag-grid/dist/lib/gridApi';
import { SerializedSetFilter } from '~ag-grid/dist/lib/interfaces/iSerializedSetFilter';
export interface FloatingFilterChange {
}
export interface IFloatingFilterParams<M, F extends FloatingFilterChange> {
    column: Column;
    onFloatingFilterChanged: (change: F | M) => boolean;
    currentParentModel: () => M;
    suppressFilterButton: boolean;
    debounceMs?: number;
    api: GridApi;
}
export interface IFloatingFilter<M, F extends FloatingFilterChange, P extends IFloatingFilterParams<M, F>> {
    onParentModelChanged(parentModel: M): void;
}
export interface IFloatingFilterComp<M, F extends FloatingFilterChange, P extends IFloatingFilterParams<M, F>> extends IFloatingFilter<M, F, P>, IComponent<P> {
}
export interface BaseFloatingFilterChange<M> extends FloatingFilterChange {
    model: M;
    apply: boolean;
}
export abstract class InputTextFloatingFilterComp<M, P extends IFloatingFilterParams<M, BaseFloatingFilterChange<M>>> extends Component implements IFloatingFilter<M, BaseFloatingFilterChange<M>, P> {
    eColumnFloatingFilter: HTMLInputElement;
    onFloatingFilterChanged: (change: BaseFloatingFilterChange<M>) => boolean;
    currentParentModel: () => M;
    lastKnownModel: M;
    constructor();
    init(params: P): void;
    abstract asParentModel(): M;
    abstract asFloatingFilterText(parentModel: M): string;
    onParentModelChanged(parentModel: M): void;
    syncUpWithParentFilter(e: KeyboardEvent): void;
    equalModels(left: any, right: any): boolean;
}
export class TextFloatingFilterComp extends InputTextFloatingFilterComp<SerializedTextFilter, IFloatingFilterParams<SerializedTextFilter, BaseFloatingFilterChange<SerializedTextFilter>>> {
    asFloatingFilterText(parentModel: SerializedTextFilter): string;
    asParentModel(): SerializedTextFilter;
}
export class DateFloatingFilterComp extends Component implements IFloatingFilter<SerializedDateFilter, BaseFloatingFilterChange<SerializedDateFilter>, IFloatingFilterParams<SerializedDateFilter, BaseFloatingFilterChange<SerializedDateFilter>>> {
    private componentRecipes;
    private dateComponentPromise;
    onFloatingFilterChanged: (change: BaseFloatingFilterChange<SerializedDateFilter>) => void;
    currentParentModel: () => SerializedDateFilter;
    lastKnownModel: SerializedDateFilter;
    init(params: IFloatingFilterParams<SerializedDateFilter, BaseFloatingFilterChange<SerializedDateFilter>>): void;
    private onDateChanged();
    equalModels(left: SerializedDateFilter, right: SerializedDateFilter): boolean;
    asParentModel(): SerializedDateFilter;
    onParentModelChanged(parentModel: SerializedDateFilter): void;
}
export class NumberFloatingFilterComp extends InputTextFloatingFilterComp<SerializedNumberFilter, IFloatingFilterParams<SerializedNumberFilter, BaseFloatingFilterChange<SerializedNumberFilter>>> {
    asFloatingFilterText(parentModel: SerializedNumberFilter): string;
    asParentModel(): SerializedNumberFilter;
    private asNumber(value);
}
export class SetFloatingFilterComp extends InputTextFloatingFilterComp<SerializedSetFilter, IFloatingFilterParams<SerializedSetFilter, BaseFloatingFilterChange<SerializedSetFilter>>> {
    init(params: IFloatingFilterParams<SerializedSetFilter, BaseFloatingFilterChange<SerializedSetFilter>>): void;
    asFloatingFilterText(parentModel: string[] | SerializedSetFilter): string;
    asParentModel(): SerializedSetFilter;
    equalModels(left: SerializedSetFilter, right: SerializedSetFilter): boolean;
}
export class ReadModelAsStringFloatingFilterComp extends InputTextFloatingFilterComp<string, IFloatingFilterParams<string, BaseFloatingFilterChange<string>>> {
    init(params: IFloatingFilterParams<string, BaseFloatingFilterChange<string>>): void;
    onParentModelChanged(parentModel: any): void;
    asFloatingFilterText(parentModel: string): string;
    asParentModel(): string;
}
}
declare module 'ag-grid/dist/lib/filter/floatingFilter' {
export * from '~ag-grid/dist/lib/filter/floatingFilter';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/rowContainerComponent.d.ts
declare module '~ag-grid/dist/lib/rendering/rowContainerComponent' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
export interface RowContainerComponentParams {
    eContainer: HTMLElement;
    eViewport?: HTMLElement;
    hideWhenNoChildren?: boolean;
}
/**
 * There are many instances of this component covering each of the areas a row can be entered
 * eg body, pinned left, fullWidth. The component differs from others in that it's given the
 * elements, there is no template. All of the elements are part of the GridPanel.
 */
export class RowContainerComponent {
    gridOptionsWrapper: GridOptionsWrapper;
    private eContainer;
    private eViewport;
    private body;
    private hideWhenNoChildren;
    private childCount;
    private visible;
    private rowTemplatesToAdd;
    private afterGuiAttachedCallbacks;
    private domOrder;
    private lastPlacedElement;
    constructor(params: RowContainerComponentParams);
    private postConstruct();
    getRowElement(compId: number): HTMLElement;
    setHeight(height: number): void;
    flushRowTemplates(): void;
    appendRowTemplate(rowTemplate: string, callback: () => void): void;
    ensureDomOrder(eRow: HTMLElement): void;
    removeRowElement(eRow: HTMLElement): void;
    private checkVisibility();
}
}
declare module 'ag-grid/dist/lib/rendering/rowContainerComponent' {
export * from '~ag-grid/dist/lib/rendering/rowContainerComponent';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/gridPanel/gridPanel.d.ts
declare module '~ag-grid/dist/lib/gridPanel/gridPanel' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { BorderLayout } from '~ag-grid/dist/lib/layout/borderLayout';
import { LoggerFactory } from '~ag-grid/dist/lib/logger';
import { BeanStub } from '~ag-grid/dist/lib/context/beanStub';
import { RowContainerComponent } from '~ag-grid/dist/lib/rendering/rowContainerComponent';
export type RowContainerComponentNames = 'fullWidth' | 'body' | 'pinnedLeft' | 'pinnedRight' | 'floatingTop' | 'floatingTopPinnedLeft' | 'floatingTopPinnedRight' | 'floatingTopFullWidth' | 'floatingBottom' | 'floatingBottomPinnedLeft' | 'floatingBottomPinnedRight' | 'floatingBottomFullWith';
export type RowContainerComponents = {
    [K in RowContainerComponentNames]: RowContainerComponent;
};
export class GridPanel extends BeanStub {
    private alignedGridsService;
    private gridOptionsWrapper;
    private columnController;
    private rowRenderer;
    private pinnedRowModel;
    private eventService;
    private context;
    private animationFrameService;
    private navigationService;
    private paginationProxy;
    private columnApi;
    private gridApi;
    private rangeController;
    private dragService;
    private selectionController;
    private clipboardService;
    private csvCreator;
    private mouseEventService;
    private focusedCellController;
    private $scope;
    private scrollVisibleService;
    private contextMenuFactory;
    private frameworkFactory;
    private valueService;
    private componentRecipes;
    private dragAndDropService;
    private heightScaler;
    private layout;
    private logger;
    private eBodyViewport;
    private eRoot;
    private eBody;
    private rowContainerComponents;
    private eBodyContainer;
    private ePinnedLeftColsContainer;
    private ePinnedRightColsContainer;
    private eFullWidthCellViewport;
    private eFullWidthCellContainer;
    private ePinnedLeftColsViewport;
    private ePinnedRightColsViewport;
    private eBodyViewportWrapper;
    private eHeaderContainer;
    private eHeaderOverlay;
    private ePinnedLeftHeader;
    private ePinnedRightHeader;
    private eHeader;
    private eHeaderViewport;
    private eFloatingTop;
    private ePinnedLeftFloatingTop;
    private ePinnedRightFloatingTop;
    private eFloatingTopContainer;
    private eFloatingTopViewport;
    private eFloatingTopFullWidthCellContainer;
    private eFloatingBottom;
    private ePinnedLeftFloatingBottom;
    private ePinnedRightFloatingBottom;
    private eFloatingBottomContainer;
    private eFloatingBottomViewport;
    private eFloatingBottomFullWidthCellContainer;
    private eAllCellContainers;
    private scrollLeft;
    private nextScrollLeft;
    private scrollTop;
    private nextScrollTop;
    private verticalRedrawNeeded;
    private bodyHeight;
    private enableRtl;
    private forPrint;
    private autoHeight;
    private scrollWidth;
    private pinningRight;
    private pinningLeft;
    private useAnimationFrame;
    agWire(loggerFactory: LoggerFactory): void;
    getVScrollPosition(): {
        top: number;
        bottom: number;
    };
    getHScrollPosition(): {
        left: number;
        right: number;
    };
    destroy(): void;
    private onRowDataChanged();
    private showOrHideOverlay();
    private onNewColumnsLoaded();
    getLayout(): BorderLayout;
    private init();
    private addRowDragListener();
    private addStopEditingWhenGridLosesFocus();
    private addAngularApplyCheck();
    private disableBrowserDragging();
    private addEventListeners();
    private addDragListeners();
    private addMouseListeners();
    private addKeyboardEvents();
    private addBodyViewportListener();
    getBodyClientRect(): ClientRect;
    private getRowForEvent(event);
    private processKeyboardEvent(eventName, keyboardEvent);
    scrollToTop(): void;
    private processMouseEvent(eventName, mouseEvent);
    private mockContextMenuForIPad();
    private handleContextMenuMouseEvent(mouseEvent, touchEvent, rowComp, cellComp);
    private onContextMenu(mouseEvent, touchEvent, rowNode, column, value);
    private preventDefaultOnContextMenu(mouseEvent);
    private addShortcutKeyListeners();
    private onCtrlAndA(event);
    private onCtrlAndC(event);
    private onCtrlAndV(event);
    private onCtrlAndD(event);
    ensureIndexVisible(index: any, position?: string): void;
    getPrimaryScrollViewport(): HTMLElement;
    getCenterWidth(): number;
    isHorizontalScrollShowing(): boolean;
    private isVerticalScrollShowing();
    private isBodyVerticalScrollShowing();
    periodicallyCheck(): void;
    private setScrollShowing();
    private setBottomPaddingOnPinnedRight();
    private setMarginOnFullWidthCellContainer();
    ensureColumnVisible(key: any): void;
    showLoadingOverlay(): void;
    showNoRowsOverlay(): void;
    hideOverlay(): void;
    private getWidthForSizeColsToFit();
    sizeColumnsToFit(nextTimeout?: number): void;
    getBodyContainer(): HTMLElement;
    getDropTargetBodyContainers(): HTMLElement[];
    getBodyViewport(): HTMLElement;
    getDropTargetLeftContainers(): HTMLElement[];
    getDropTargetPinnedRightContainers(): HTMLElement[];
    getHeaderContainer(): HTMLElement;
    getHeaderOverlay(): HTMLElement;
    getRoot(): HTMLElement;
    getPinnedLeftHeader(): HTMLElement;
    getPinnedRightHeader(): HTMLElement;
    private queryHtmlElement(selector);
    private loadTemplate();
    private findElements();
    private setupRowAnimationCssClass();
    private suppressScrollOnFloatingRow();
    getRowContainers(): RowContainerComponents;
    private addMouseWheelEventListeners();
    getHeaderViewport(): HTMLElement;
    private centerMouseWheelListener(event);
    genericMouseWheelListener(event: any): boolean;
    private generalMouseWheelListener(event, targetPanel);
    onDisplayedColumnsChanged(): void;
    private onDisplayedColumnsWidthChanged();
    private onScrollVisibilityChanged();
    private setWidthsOfContainers();
    private setPinnedLeftWidth();
    private setPinnedRightWidth();
    private setPinnedContainersVisible();
    private setPinnedContainersVisibleOld();
    private setPinnedContainersVisibleNew();
    setBodyAndHeaderHeights(): void;
    getBodyHeight(): number;
    setHorizontalScrollPosition(hScrollPosition: number): void;
    setVerticalScrollPosition(vScrollPosition: number): void;
    scrollHorizontally(pixels: number): number;
    scrollVertically(pixels: number): number;
    private addPreventHeaderScroll();
    private addScrollListener();
    private doScrollingOldWay();
    private doScrollingNativeWay();
    private lastVScrollElement;
    private lastVScrollTime;
    private onAnyBodyScroll(source);
    private onBodyScroll();
    private onBodyHorizontalScroll();
    private doHorizontalScroll();
    private onBodyVerticalScroll();
    private onVerticalScroll(sourceElement);
    executeFrame(): boolean;
    private redrawRowsAfterScroll();
    private isBodyVerticalScrollActive();
    private addIEPinFix(onPinnedRightScroll, onPinnedLeftScroll);
    setLeftAndRightBounds(): void;
    getBodyViewportScrollLeft(): number;
    setBodyViewportScrollLeft(value: number): void;
    horizontallyScrollHeaderCenterAndFloatingCenter(): void;
    private fakeVerticalScroll(position);
    private setFakeScroll(eContainer, pixels);
    addScrollEventListener(listener: () => void): void;
    removeScrollEventListener(listener: () => void): void;
}
}
declare module 'ag-grid/dist/lib/gridPanel/gridPanel' {
export * from '~ag-grid/dist/lib/gridPanel/gridPanel';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/gridPanel/scrollVisibleService.d.ts
declare module '~ag-grid/dist/lib/gridPanel/scrollVisibleService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export interface SetScrollsVisibleParams {
    vBody: boolean;
    hBody: boolean;
    vPinnedLeft: boolean;
    vPinnedRight: boolean;
}
export class ScrollVisibleService {
    private eventService;
    private columnController;
    private columnApi;
    private gridApi;
    private vBody;
    private hBody;
    private vPinnedLeft;
    private vPinnedRight;
    setScrollsVisible(params: SetScrollsVisibleParams): void;
    isVBodyShowing(): boolean;
    isHBodyShowing(): boolean;
    isVPinnedLeftShowing(): boolean;
    isVPinnedRightShowing(): boolean;
    getPinnedLeftWidth(): number;
    getPinnedLeftWithScrollWidth(): number;
    getPinnedRightWidth(): number;
    getPinnedRightWithScrollWidth(): number;
}
}
declare module 'ag-grid/dist/lib/gridPanel/scrollVisibleService' {
export * from '~ag-grid/dist/lib/gridPanel/scrollVisibleService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/gridPanel/mouseEventService.d.ts
declare module '~ag-grid/dist/lib/gridPanel/mouseEventService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { GridCell } from '~ag-grid/dist/lib/entities/gridCell';
import { CellComp } from '~ag-grid/dist/lib/rendering/cellComp';
export class MouseEventService {
    private gridOptionsWrapper;
    private eGridDiv;
    private static gridInstanceSequence;
    private static GRID_DOM_KEY;
    private gridInstanceId;
    private init();
    private stampDomElementWithGridInstance();
    getRenderedCellForEvent(event: Event): CellComp;
    isEventFromThisGrid(event: MouseEvent | KeyboardEvent): boolean;
    getGridCellForEvent(event: MouseEvent | KeyboardEvent): GridCell;
}
}
declare module 'ag-grid/dist/lib/gridPanel/mouseEventService' {
export * from '~ag-grid/dist/lib/gridPanel/mouseEventService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/headerRendering/bodyDropPivotTarget.d.ts
declare module '~ag-grid/dist/lib/headerRendering/bodyDropPivotTarget' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { DraggingEvent } from '~ag-grid/dist/lib/dragAndDrop/dragAndDropService';
import { DropListener } from '~ag-grid/dist/lib/headerRendering/bodyDropTarget';
export class BodyDropPivotTarget implements DropListener {
    private columnController;
    private gridOptionsWrapper;
    private columnsToAggregate;
    private columnsToGroup;
    private columnsToPivot;
    private pinned;
    constructor(pinned: string);
    /** Callback for when drag enters */
    onDragEnter(draggingEvent: DraggingEvent): void;
    getIconName(): string;
    /** Callback for when drag leaves */
    onDragLeave(draggingEvent: DraggingEvent): void;
    private clearColumnsList();
    /** Callback for when dragging */
    onDragging(draggingEvent: DraggingEvent): void;
    /** Callback for when drag stops */
    onDragStop(draggingEvent: DraggingEvent): void;
}
}
declare module 'ag-grid/dist/lib/headerRendering/bodyDropPivotTarget' {
export * from '~ag-grid/dist/lib/headerRendering/bodyDropPivotTarget';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/headerRendering/bodyDropTarget.d.ts
declare module '~ag-grid/dist/lib/headerRendering/bodyDropTarget' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { DraggingEvent, DragSourceType, DropTarget } from '~ag-grid/dist/lib/dragAndDrop/dragAndDropService';
export interface DropListener {
    getIconName(): string;
    onDragEnter(params: DraggingEvent): void;
    onDragLeave(params: DraggingEvent): void;
    onDragging(params: DraggingEvent): void;
    onDragStop(params: DraggingEvent): void;
}
export class BodyDropTarget implements DropTarget {
    private context;
    private gridPanel;
    private dragAndDropService;
    private columnController;
    private pinned;
    private eContainer;
    private eSecondaryContainers;
    private dropListeners;
    private currentDropListener;
    constructor(pinned: string, eContainer: HTMLElement);
    isInterestedIn(type: DragSourceType): boolean;
    getSecondaryContainers(): HTMLElement[];
    getContainer(): HTMLElement;
    private init();
    getIconName(): string;
    private getDropType(draggingEvent);
    onDragEnter(draggingEvent: DraggingEvent): void;
    onDragLeave(params: DraggingEvent): void;
    onDragging(params: DraggingEvent): void;
    onDragStop(params: DraggingEvent): void;
}
}
declare module 'ag-grid/dist/lib/headerRendering/bodyDropTarget' {
export * from '~ag-grid/dist/lib/headerRendering/bodyDropTarget';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/headerRendering/cssClassApplier.d.ts
declare module '~ag-grid/dist/lib/headerRendering/cssClassApplier' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { AbstractColDef } from '~ag-grid/dist/lib/entities/colDef';
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
import { ColumnGroup } from '~ag-grid/dist/lib/entities/columnGroup';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { OriginalColumnGroup } from '~ag-grid/dist/lib/entities/originalColumnGroup';
export class CssClassApplier {
    static addHeaderClassesFromColDef(abstractColDef: AbstractColDef, eHeaderCell: HTMLElement, gridOptionsWrapper: GridOptionsWrapper, column: Column, columnGroup: ColumnGroup): void;
    static addToolPanelClassesFromColDef(abstractColDef: AbstractColDef, eHeaderCell: HTMLElement, gridOptionsWrapper: GridOptionsWrapper, column: Column, columnGroup: OriginalColumnGroup): void;
    static addColumnClassesFromCollDef(classesOrFunc: string | string[] | ((params: any) => string | string[]), abstractColDef: AbstractColDef, eHeaderCell: HTMLElement, gridOptionsWrapper: GridOptionsWrapper, column: Column, columnGroup: ColumnGroup | OriginalColumnGroup): void;
}
}
declare module 'ag-grid/dist/lib/headerRendering/cssClassApplier' {
export * from '~ag-grid/dist/lib/headerRendering/cssClassApplier';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/headerRendering/headerContainer.d.ts
declare module '~ag-grid/dist/lib/headerRendering/headerContainer' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Component } from '~ag-grid/dist/lib/widgets/component';
export class HeaderContainer {
    private gridOptionsWrapper;
    private context;
    private $scope;
    private dragAndDropService;
    private columnController;
    private gridPanel;
    private eventService;
    private scrollVisibleService;
    private eContainer;
    private eViewport;
    private headerRowComps;
    private pinned;
    private dropTarget;
    constructor(eContainer: HTMLElement, eViewport: HTMLElement, pinned: string);
    forEachHeaderElement(callback: (renderedHeaderElement: Component) => void): void;
    private init();
    private onColumnRowGroupChanged();
    private onColumnValueChanged();
    private onColumnResized();
    private onDisplayedColumnsChanged();
    private onScrollVisibilityChanged();
    private setWidthIfPinnedContainer();
    destroy(): void;
    private onGridColumnsChanged();
    refresh(): void;
    private setupDragAndDrop();
    private removeHeaderRowComps();
    private createHeaderRowComps();
}
}
declare module 'ag-grid/dist/lib/headerRendering/headerContainer' {
export * from '~ag-grid/dist/lib/headerRendering/headerContainer';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/headerRendering/headerRenderer.d.ts
declare module '~ag-grid/dist/lib/headerRendering/headerRenderer' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Component } from '~ag-grid/dist/lib/widgets/component';
export class HeaderRenderer {
    private gridOptionsWrapper;
    private columnController;
    private gridPanel;
    private context;
    private eventService;
    private scrollVisibleService;
    private pinnedLeftContainer;
    private pinnedRightContainer;
    private centerContainer;
    private childContainers;
    private eHeaderViewport;
    private eHeaderOverlay;
    private init();
    private onScrollVisibilityChanged();
    forEachHeaderElement(callback: (renderedHeaderElement: Component) => void): void;
    private destroy();
    private onGridColumnsChanged();
    refreshHeader(): void;
    private setHeight();
    setPinnedColContainerWidth(): void;
}
}
declare module 'ag-grid/dist/lib/headerRendering/headerRenderer' {
export * from '~ag-grid/dist/lib/headerRendering/headerRenderer';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/headerRendering/headerRowComp.d.ts
declare module '~ag-grid/dist/lib/headerRendering/headerRowComp' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { DropTarget } from '~ag-grid/dist/lib/dragAndDrop/dragAndDropService';
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
export enum HeaderRowType {
    COLUMN_GROUP = 0,
    COLUMN = 1,
    FLOATING_FILTER = 2,
}
export class HeaderRowComp extends Component {
    private gridOptionsWrapper;
    private gridApi;
    private columnController;
    private context;
    private eventService;
    private filterManager;
    private componentRecipes;
    private dept;
    private pinned;
    private headerComps;
    private dropTarget;
    private type;
    constructor(dept: number, type: HeaderRowType, pinned: string, dropTarget: DropTarget);
    forEachHeaderElement(callback: (comp: IComponent<any>) => void): void;
    destroy(): void;
    private removeAndDestroyChildComponents(idsToDestroy);
    private onRowHeightChanged();
    private init();
    private onColumnResized();
    private setWidth();
    private onGridColumnsChanged();
    private removeAndDestroyAllChildComponents();
    private onDisplayedColumnsChanged();
    private onVirtualColumnsChanged();
    private createHeaderComp(columnGroupChild);
    private createFloatingFilterWrapper(column);
    private createFloatingFilterParams<M, F>(column);
}
}
declare module 'ag-grid/dist/lib/headerRendering/headerRowComp' {
export * from '~ag-grid/dist/lib/headerRendering/headerRowComp';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/headerRendering/horizontalResizeService.d.ts
declare module '~ag-grid/dist/lib/headerRendering/horizontalResizeService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export interface HorizontalResizeParams {
    eResizeBar: HTMLElement;
    onResizeStart: (shiftKey: boolean) => void;
    onResizing: (delta: number) => void;
    onResizeEnd: (delta: number) => void;
}
export class HorizontalResizeService {
    private gridOptionsWrapper;
    private dragService;
    private eGridDiv;
    private draggingStarted;
    private dragStartX;
    private resizeAmount;
    private oldBodyCursor;
    private oldMsUserSelect;
    private oldWebkitUserSelect;
    addResizeBar(params: HorizontalResizeParams): () => void;
    private onDragStart(params, mouseEvent);
    private setResizeIcons();
    private onDragStop(params, mouseEvent);
    private resetIcons();
    private onDragging(params, mouseEvent);
}
}
declare module 'ag-grid/dist/lib/headerRendering/horizontalResizeService' {
export * from '~ag-grid/dist/lib/headerRendering/horizontalResizeService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/headerRendering/moveColumnController.d.ts
declare module '~ag-grid/dist/lib/headerRendering/moveColumnController' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { DraggingEvent } from '~ag-grid/dist/lib/dragAndDrop/dragAndDropService';
import { DropListener } from '~ag-grid/dist/lib/headerRendering/bodyDropTarget';
import { ColumnEventType } from '~ag-grid/dist/lib/events';
export class MoveColumnController implements DropListener {
    private loggerFactory;
    private columnController;
    private gridPanel;
    private dragAndDropService;
    private gridOptionsWrapper;
    private needToMoveLeft;
    private needToMoveRight;
    private movingIntervalId;
    private intervalCount;
    private logger;
    private pinned;
    private centerContainer;
    private lastDraggingEvent;
    private failedMoveAttempts;
    private eContainer;
    constructor(pinned: string, eContainer: HTMLElement);
    init(): void;
    getIconName(): string;
    onDragEnter(draggingEvent: DraggingEvent): void;
    onDragLeave(draggingEvent: DraggingEvent): void;
    setColumnsVisible(columns: Column[], visible: boolean, source?: ColumnEventType): void;
    setColumnsPinned(columns: Column[], pinned: string, source?: ColumnEventType): void;
    onDragStop(): void;
    private normaliseX(x);
    private checkCenterForScrolling(xAdjustedForScroll);
    onDragging(draggingEvent: DraggingEvent, fromEnter?: boolean): void;
    private normaliseDirection(hDirection);
    private calculateOldIndex(movingCols);
    private attemptMoveColumns(dragSourceType, allMovingColumns, hDirection, xAdjusted, fromEnter);
    private calculateValidMoves(movingCols, draggingRight, x);
    private isColumnHidden(displayedColumns, col);
    private ensureIntervalStarted();
    private ensureIntervalCleared();
    private moveInterval();
}
}
declare module 'ag-grid/dist/lib/headerRendering/moveColumnController' {
export * from '~ag-grid/dist/lib/headerRendering/moveColumnController';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/headerRendering/standardMenu.d.ts
declare module '~ag-grid/dist/lib/headerRendering/standardMenu' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IMenuFactory } from '~ag-grid/dist/lib/interfaces/iMenuFactory';
import { Column } from '~ag-grid/dist/lib/entities/column';
export class StandardMenuFactory implements IMenuFactory {
    private eventService;
    private filterManager;
    private popupService;
    private gridOptionsWrapper;
    private hidePopup;
    hideActiveMenu(): void;
    showMenuAfterMouseEvent(column: Column, mouseEvent: MouseEvent | Touch): void;
    showMenuAfterButtonClick(column: Column, eventSource: HTMLElement): void;
    showPopup(column: Column, positionCallback: (eMenu: HTMLElement) => void): void;
    isMenuEnabled(column: Column): boolean;
}
}
declare module 'ag-grid/dist/lib/headerRendering/standardMenu' {
export * from '~ag-grid/dist/lib/headerRendering/standardMenu';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/layout/borderLayout.d.ts
declare module '~ag-grid/dist/lib/layout/borderLayout' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class BorderLayout {
    private static TEMPLATE_FULL_HEIGHT;
    private static TEMPLATE_NORMAL;
    private static TEMPLATE_DONT_FILL;
    private eNorthWrapper;
    private eSouthWrapper;
    private eEastWrapper;
    private eWestWrapper;
    private eCenterWrapper;
    private eOverlayWrapper;
    private eCenterRow;
    private eNorthChildLayout;
    private eSouthChildLayout;
    private eEastChildLayout;
    private eWestChildLayout;
    private eCenterChildLayout;
    private isLayoutPanel;
    private noNorthOrSouth;
    private horizontalLayoutActive;
    private verticalLayoutActive;
    private eGui;
    private id;
    private childPanels;
    private centerHeightLastTime;
    private centerWidthLastTime;
    private centerLeftMarginLastTime;
    private visibleLastTime;
    private sizeChangeListeners;
    private overlayWrapper;
    constructor(params: any);
    addSizeChangeListener(listener: Function): void;
    fireSizeChanged(): void;
    private getRefElement(refName);
    private setupPanels(params);
    private setupPanel(content, ePanel);
    getGui(): HTMLElement;
    doLayout(): boolean;
    private layoutChild(childPanel);
    private layoutHeight();
    private layoutHeightFullHeight();
    private layoutHeightNormal();
    private layoutEastWestHeight();
    getCentreHeight(): number;
    private layoutWidth();
    setEastVisible(visible: any): void;
    showLoadingOverlay(): void;
    showNoRowsOverlay(): void;
    hideOverlay(): void;
}
}
declare module 'ag-grid/dist/lib/layout/borderLayout' {
export * from '~ag-grid/dist/lib/layout/borderLayout';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/layout/tabbedLayout.d.ts
declare module '~ag-grid/dist/lib/layout/tabbedLayout' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Promise } from '~ag-grid/dist/lib/utils';
export class TabbedLayout {
    private eGui;
    private eHeader;
    private eBody;
    private params;
    private afterAttachedParams;
    private static TEMPLATE;
    private items;
    private activeItem;
    constructor(params: TabbedLayoutParams);
    setAfterAttachedParams(params: any): void;
    getMinWidth(): number;
    showFirstItem(): void;
    private addItem(item);
    showItem(tabbedItem: TabbedItem): void;
    private showItemWrapper(wrapper);
    getGui(): HTMLElement;
}
export interface TabbedLayoutParams {
    items: TabbedItem[];
    cssClass?: string;
    onItemClicked?: Function;
    onActiveItemClicked?: Function;
}
export interface TabbedItem {
    title: Element;
    bodyPromise: Promise<HTMLElement>;
    name: string;
    afterAttachedCallback?: Function;
}
}
declare module 'ag-grid/dist/lib/layout/tabbedLayout' {
export * from '~ag-grid/dist/lib/layout/tabbedLayout';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/layout/verticalStack.d.ts
declare module '~ag-grid/dist/lib/layout/verticalStack' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class VerticalStack {
    isLayoutPanel: any;
    childPanels: any;
    eGui: any;
    constructor();
    addPanel(panel: any, height: any): void;
    getGui(): any;
    doLayout(): void;
}
}
declare module 'ag-grid/dist/lib/layout/verticalStack' {
export * from '~ag-grid/dist/lib/layout/verticalStack';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/misc/simpleHttpRequest.d.ts
declare module '~ag-grid/dist/lib/misc/simpleHttpRequest' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Promise } from '~ag-grid/dist/lib/utils';
export interface SimpleHttpRequestParams {
    url: string;
}
export function simpleHttpRequest(params: SimpleHttpRequestParams): Promise<any>;
}
declare module 'ag-grid/dist/lib/misc/simpleHttpRequest' {
export * from '~ag-grid/dist/lib/misc/simpleHttpRequest';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellEditors/iCellEditor.d.ts
declare module '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { GridApi } from '~ag-grid/dist/lib/gridApi';
import { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
export interface ICellEditor {
    /** Return the final value - called by the grid once after editing is complete */
    getValue(): any;
    /** Gets called once after initialised. If you return true, the editor will appear in a popup, so is not constrained
     *  to the boundaries of the cell. This is great if you want to, for example, provide you own custom dropdown list
     *  for selection. Default is false (ie if you don't provide the method). */
    isPopup?(): boolean;
    /** Gets called once after initialised. If you return true, the editor will not be used and the grid will continue
     *  editing. Use this to make a decision on editing inside the init() function, eg maybe you want to only start
     *  editing if the user hits a numeric key, but not a letter, if the editor is for numbers.
     * */
    isCancelBeforeStart?(): boolean;
    /** Gets called once after editing is complete. If your return true, then the new value will not be used. The
     *  editing will have no impact on the record. Use this if you do not want a new value from your gui, i.e. you
     *  want to cancel the editing. */
    isCancelAfterEnd?(): boolean;
    /** If doing full line edit, then gets called when focus should be put into the editor */
    focusIn?(): void;
    /** If doing full line edit, then gets called when focus is leaving the editor */
    focusOut?(): void;
}
export interface ICellEditorComp extends ICellEditor, IComponent<ICellEditorParams> {
}
/** Gets called once after editor is created. Params contains teh following:
 value: current value of the cell
 keyPress: key code of key that started the edit, eg 'Enter' or 'Delete' - non-printable characters appear here
 charPress: the string that started the edit, eg 'a' if letter a was pressed, or 'A' if shift + letter a
 - only printable characters appear here
 column: grid column
 node: grid row node
 api: grid api
 columnApi: grid column api
 context: grid context
 onKeyDown: callback to tell grid a key was pressed - useful to pass control key events (tab, arrows etc) back to grid - however you do
 not need to call this as the grid is already listening for the events as they propagate. this is only required if
 you are preventing event propagation
 stopRowOrCellEdit: call this if you want to stop editing the cell (eg if you are doing your own edit and are happy with the selection)
 */
export interface ICellEditorParams {
    value: any;
    keyPress: number;
    charPress: string;
    column: Column;
    node: RowNode;
    rowIndex: number;
    api: GridApi;
    columnApi: ColumnApi;
    cellStartedEdit: boolean;
    context: any;
    $scope: any;
    onKeyDown: (event: KeyboardEvent) => void;
    stopEditing: () => void;
    eGridCell: HTMLElement;
    parseValue: (value: any) => any;
    formatValue: (value: any) => any;
}
}
declare module 'ag-grid/dist/lib/rendering/cellEditors/iCellEditor' {
export * from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellEditors/largeTextCellEditor.d.ts
declare module '~ag-grid/dist/lib/rendering/cellEditors/largeTextCellEditor' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ICellEditorComp } from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
import { ICellEditorParams } from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
import { Component } from '~ag-grid/dist/lib/widgets/component';
export interface ILargeTextEditorParams extends ICellEditorParams {
    maxLength: number;
    rows: number;
    cols: number;
}
export class LargeTextCellEditor extends Component implements ICellEditorComp {
    private static TEMPLATE;
    private params;
    private textarea;
    private focusAfterAttached;
    constructor();
    init(params: ILargeTextEditorParams): void;
    private onKeyDown(event);
    afterGuiAttached(): void;
    getValue(): any;
    isPopup(): boolean;
}
}
declare module 'ag-grid/dist/lib/rendering/cellEditors/largeTextCellEditor' {
export * from '~ag-grid/dist/lib/rendering/cellEditors/largeTextCellEditor';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellEditors/popupEditorWrapper.d.ts
declare module '~ag-grid/dist/lib/rendering/cellEditors/popupEditorWrapper' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { ICellEditorComp, ICellEditorParams } from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
export class PopupEditorWrapper extends Component implements ICellEditorComp {
    private cellEditor;
    private params;
    private getGuiCalledOnChild;
    static DOM_KEY_POPUP_EDITOR_WRAPPER: string;
    gridOptionsWrapper: GridOptionsWrapper;
    constructor(cellEditor: ICellEditorComp);
    private onKeyDown(event);
    getGui(): HTMLElement;
    init(params: ICellEditorParams): void;
    afterGuiAttached(): void;
    getValue(): any;
    isPopup(): boolean;
    isCancelBeforeStart(): boolean;
    isCancelAfterEnd(): boolean;
    focusIn(): void;
    focusOut(): void;
}
}
declare module 'ag-grid/dist/lib/rendering/cellEditors/popupEditorWrapper' {
export * from '~ag-grid/dist/lib/rendering/cellEditors/popupEditorWrapper';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellEditors/popupSelectCellEditor.d.ts
declare module '~ag-grid/dist/lib/rendering/cellEditors/popupSelectCellEditor' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { SelectCellEditor } from '~ag-grid/dist/lib/rendering/cellEditors/selectCellEditor';
export class PopupSelectCellEditor extends SelectCellEditor {
    isPopup(): boolean;
}
}
declare module 'ag-grid/dist/lib/rendering/cellEditors/popupSelectCellEditor' {
export * from '~ag-grid/dist/lib/rendering/cellEditors/popupSelectCellEditor';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellEditors/popupTextCellEditor.d.ts
declare module '~ag-grid/dist/lib/rendering/cellEditors/popupTextCellEditor' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { TextCellEditor } from '~ag-grid/dist/lib/rendering/cellEditors/textCellEditor';
export class PopupTextCellEditor extends TextCellEditor {
    isPopup(): boolean;
}
}
declare module 'ag-grid/dist/lib/rendering/cellEditors/popupTextCellEditor' {
export * from '~ag-grid/dist/lib/rendering/cellEditors/popupTextCellEditor';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellEditors/selectCellEditor.d.ts
declare module '~ag-grid/dist/lib/rendering/cellEditors/selectCellEditor' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { ICellEditorComp, ICellEditorParams } from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
export interface ISelectCellEditorParams extends ICellEditorParams {
    values: any[];
}
export class SelectCellEditor extends Component implements ICellEditorComp {
    private focusAfterAttached;
    private eSelect;
    private gridOptionsWrapper;
    private valueFormatterService;
    constructor();
    init(params: ISelectCellEditorParams): void;
    afterGuiAttached(): void;
    focusIn(): void;
    getValue(): any;
}
}
declare module 'ag-grid/dist/lib/rendering/cellEditors/selectCellEditor' {
export * from '~ag-grid/dist/lib/rendering/cellEditors/selectCellEditor';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellEditors/textCellEditor.d.ts
declare module '~ag-grid/dist/lib/rendering/cellEditors/textCellEditor' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { ICellEditorComp, ICellEditorParams } from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
/**
 * useFormatter: used when the cell value needs formatting prior to editing, such as when using reference data and you
 *               want to display text rather than code.
*/
export interface ITextCellEditorParams extends ICellEditorParams {
    useFormatter: boolean;
}
export class TextCellEditor extends Component implements ICellEditorComp {
    private static TEMPLATE;
    private highlightAllOnFocus;
    private focusAfterAttached;
    private params;
    constructor();
    init(params: ITextCellEditorParams): void;
    afterGuiAttached(): void;
    focusIn(): void;
    getValue(): any;
    private getStartValue(params);
}
}
declare module 'ag-grid/dist/lib/rendering/cellEditors/textCellEditor' {
export * from '~ag-grid/dist/lib/rendering/cellEditors/textCellEditor';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer.d.ts
declare module '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { ColDef } from '~ag-grid/dist/lib/entities/colDef';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { GridApi } from '~ag-grid/dist/lib/gridApi';
import { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
export interface ICellRendererParams {
    value: any;
    valueFormatted: any;
    getValue: () => any;
    setValue: (value: any) => void;
    formatValue: (value: any) => any;
    data: any;
    node: RowNode;
    colDef: ColDef;
    column: Column;
    $scope: any;
    rowIndex: number;
    api: GridApi;
    columnApi: ColumnApi;
    context: any;
    refreshCell: () => void;
    eGridCell: HTMLElement;
    eParentOfValue: HTMLElement;
    addRenderedRowListener: (eventType: string, listener: Function) => void;
}
export interface ICellRenderer {
    /** Get the cell to refresh. Return true if successful. Return false if not (or you don't have refresh logic),
     * then the grid will refresh the cell for you. */
    refresh(params: any): boolean;
}
export interface ICellRendererComp extends ICellRenderer, IComponent<ICellRendererParams> {
}
export interface ICellRendererFunc {
    (params: any): HTMLElement | string;
}
}
declare module 'ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer' {
export * from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellRenderers/animateShowChangeCellRenderer.d.ts
declare module '~ag-grid/dist/lib/rendering/cellRenderers/animateShowChangeCellRenderer' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ICellRenderer } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
import { Component } from '~ag-grid/dist/lib/widgets/component';
export class AnimateShowChangeCellRenderer extends Component implements ICellRenderer {
    private static TEMPLATE;
    private lastValue;
    private eValue;
    private eDelta;
    private refreshCount;
    constructor();
    init(params: any): void;
    private showDelta(params, delta);
    private setTimerToRemoveDelta();
    private hideDeltaValue();
    refresh(params: any): boolean;
}
}
declare module 'ag-grid/dist/lib/rendering/cellRenderers/animateShowChangeCellRenderer' {
export * from '~ag-grid/dist/lib/rendering/cellRenderers/animateShowChangeCellRenderer';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellRenderers/animateSlideCellRenderer.d.ts
declare module '~ag-grid/dist/lib/rendering/cellRenderers/animateSlideCellRenderer' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ICellRenderer } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
import { Component } from '~ag-grid/dist/lib/widgets/component';
export class AnimateSlideCellRenderer extends Component implements ICellRenderer {
    private static TEMPLATE;
    private params;
    private eCurrent;
    private ePrevious;
    private lastValue;
    private refreshCount;
    constructor();
    init(params: any): void;
    addSlideAnimation(): void;
    refresh(params: any): boolean;
}
}
declare module 'ag-grid/dist/lib/rendering/cellRenderers/animateSlideCellRenderer' {
export * from '~ag-grid/dist/lib/rendering/cellRenderers/animateSlideCellRenderer';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellRenderers/groupCellRenderer.d.ts
declare module '~ag-grid/dist/lib/rendering/cellRenderers/groupCellRenderer' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { ICellRenderer, ICellRendererParams } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
export interface GroupCellRendererParams extends ICellRendererParams {
    pinned: string;
    padding: number;
    suppressPadding: boolean;
    suppressDoubleClickExpand: boolean;
    footerValueGetter: any;
    suppressCount: boolean;
    fullWidth: boolean;
    checkbox: any;
    scope: any;
    actualValue: string;
}
export class GroupCellRenderer extends Component implements ICellRenderer {
    private static TEMPLATE;
    private gridOptionsWrapper;
    private expressionService;
    private eventService;
    private cellRendererService;
    private valueFormatterService;
    private context;
    private columnController;
    private mouseEventService;
    private eExpanded;
    private eContracted;
    private eCheckbox;
    private eValue;
    private eChildCount;
    private params;
    private draggedFromHideOpenParents;
    private displayedGroup;
    private cellIsBlank;
    private indentClass;
    private innerCellRenderer;
    constructor();
    init(params: GroupCellRendererParams): void;
    private isEmbeddedRowMismatch();
    private setIndent();
    private setPaddingDeprecatedWay(paddingCount, padding);
    private setupIndent();
    private addValueElement();
    private createFooterCell();
    private createGroupCell();
    private addChildCount();
    private updateChildCount();
    private createLeafCell();
    private isUserWantsSelected();
    private addCheckboxIfNeeded();
    private addExpandAndContract();
    private onAllChildrenCountChanged();
    private onKeyDown(event);
    private setupDragOpenParents();
    onExpandClicked(mouseEvent: MouseEvent): void;
    onCellDblClicked(mouseEvent: MouseEvent): void;
    onExpandOrContract(): void;
    private isExpandable();
    private showExpandAndContractIcons();
    destroy(): void;
    refresh(): boolean;
}
}
declare module 'ag-grid/dist/lib/rendering/cellRenderers/groupCellRenderer' {
export * from '~ag-grid/dist/lib/rendering/cellRenderers/groupCellRenderer';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/overlays/loadingOverlayComponent.d.ts
declare module '~ag-grid/dist/lib/rendering/overlays/loadingOverlayComponent' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
export interface ILoadingOverlayParams {
}
export interface ILoadingOverlayComp extends IComponent<ILoadingOverlayParams> {
}
export class LoadingOverlayComponent extends Component implements ILoadingOverlayComp {
    private static DEFAULT_LOADING_OVERLAY_TEMPLATE;
    gridOptionsWrapper: GridOptionsWrapper;
    constructor();
    init(params: ILoadingOverlayParams): void;
}
}
declare module 'ag-grid/dist/lib/rendering/overlays/loadingOverlayComponent' {
export * from '~ag-grid/dist/lib/rendering/overlays/loadingOverlayComponent';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/overlays/noRowsOverlayComponent.d.ts
declare module '~ag-grid/dist/lib/rendering/overlays/noRowsOverlayComponent' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
export interface INoRowsOverlayParams {
}
export interface INoRowsOverlayComp extends IComponent<INoRowsOverlayParams> {
}
export class NoRowsOverlayComponent extends Component implements INoRowsOverlayComp {
    private static DEFAULT_NO_ROWS_TEMPLATE;
    gridOptionsWrapper: GridOptionsWrapper;
    constructor();
    init(params: INoRowsOverlayParams): void;
}
}
declare module 'ag-grid/dist/lib/rendering/overlays/noRowsOverlayComponent' {
export * from '~ag-grid/dist/lib/rendering/overlays/noRowsOverlayComponent';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/columnAnimationService.d.ts
declare module '~ag-grid/dist/lib/rendering/columnAnimationService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
import { GridPanel } from '~ag-grid/dist/lib/gridPanel/gridPanel';
export class ColumnAnimationService {
    gridOptionsWrapper: GridOptionsWrapper;
    gridPanel: GridPanel;
    private executeNextFuncs;
    private executeLaterFuncs;
    private active;
    private animationThreadCount;
    isActive(): boolean;
    start(): void;
    finish(): void;
    executeNextVMTurn(func: Function): void;
    executeLaterVMTurn(func: Function): void;
    private ensureAnimationCssClassPresent();
    flush(): void;
}
}
declare module 'ag-grid/dist/lib/rendering/columnAnimationService' {
export * from '~ag-grid/dist/lib/rendering/columnAnimationService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/columnHoverService.d.ts
declare module '~ag-grid/dist/lib/rendering/columnHoverService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { BeanStub } from '~ag-grid/dist/lib/context/beanStub';
export class ColumnHoverService extends BeanStub {
    private eventService;
    private columnApi;
    private gridApi;
    private selectedColumns;
    setMouseOver(columns: Column[]): void;
    clearMouseOver(): void;
    isHovered(column: Column): boolean;
}
}
declare module 'ag-grid/dist/lib/rendering/columnHoverService' {
export * from '~ag-grid/dist/lib/rendering/columnHoverService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/paginationProxy.d.ts
declare module '~ag-grid/dist/lib/rowModels/paginationProxy' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { BeanStub } from '~ag-grid/dist/lib/context/beanStub';
import { IRowModel } from '~ag-grid/dist/lib/interfaces/iRowModel';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export class PaginationAutoPageSizeService extends BeanStub {
    private gridPanel;
    private eventService;
    private gridOptionsWrapper;
    private scrollVisibleService;
    private notActive();
    private postConstruct();
    private onScrollVisibilityChanged();
    private onBodyHeightChanged();
    private checkPageSize();
}
export class PaginationProxy extends BeanStub implements IRowModel {
    private rowModel;
    private gridPanel;
    private eventService;
    private gridOptionsWrapper;
    private selectionController;
    private columnApi;
    private gridApi;
    private active;
    private pageSize;
    private totalPages;
    private currentPage;
    private topRowIndex;
    private bottomRowIndex;
    private pixelOffset;
    private topRowBounds;
    private bottomRowBounds;
    private postConstruct();
    isLastRowFound(): boolean;
    private onModelUpdated(modelUpdatedEvent?);
    goToPage(page: number): void;
    getPixelOffset(): number;
    getRow(index: number): RowNode;
    getRowIndexAtPixel(pixel: number): number;
    getCurrentPageHeight(): number;
    isRowPresent(rowNode: RowNode): boolean;
    isEmpty(): boolean;
    isRowsToRender(): boolean;
    getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[];
    forEachNode(callback: (rowNode: RowNode) => void): void;
    getType(): string;
    getRowBounds(index: number): {
        rowTop: number;
        rowHeight: number;
    };
    getPageFirstRow(): number;
    getPageLastRow(): number;
    getRowCount(): number;
    goToPageWithIndex(index: any): void;
    getTotalRowCount(): number;
    isLastPageFound(): boolean;
    getCurrentPage(): number;
    goToNextPage(): void;
    goToPreviousPage(): void;
    goToFirstPage(): void;
    goToLastPage(): void;
    getPageSize(): number;
    getTotalPages(): number;
    private setPageSize();
    private setIndexesAndBounds();
}
}
declare module 'ag-grid/dist/lib/rowModels/paginationProxy' {
export * from '~ag-grid/dist/lib/rowModels/paginationProxy';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/misc/animationFrameService.d.ts
declare module '~ag-grid/dist/lib/misc/animationFrameService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class AnimationFrameService {
    private gridPanel;
    private gridOptionsWrapper;
    private p1Tasks;
    private p2Tasks;
    private ticking;
    private useAnimationFrame;
    private init();
    private verifyAnimationFrameOn(methodName);
    addP1Task(task: () => void): void;
    addP2Task(task: () => void): void;
    private executeFrame(millis);
    flushAllFrames(): void;
    schedule(): void;
    private requestFrame();
}
}
declare module 'ag-grid/dist/lib/misc/animationFrameService' {
export * from '~ag-grid/dist/lib/misc/animationFrameService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/heightScaler.d.ts
declare module '~ag-grid/dist/lib/rendering/heightScaler' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { BeanStub } from '~ag-grid/dist/lib/context/beanStub';
/**
 * This class solves the 'max height' problem, where the user might want to show more data than
 * the max div height actually allows.
 */
export class HeightScaler extends BeanStub {
    private eventService;
    private gridPanel;
    private maxDivHeight;
    private scaling;
    private modelHeight;
    private uiContainerHeight;
    private pixelsToShave;
    private offset;
    private scrollY;
    private uiBodyHeight;
    private maxScrollY;
    private scrollBarWidth;
    private postConstruct();
    isScaling(): boolean;
    getOffset(): number;
    update(): void;
    private calculateOffset();
    private clearOffset();
    private setOffset(newOffset);
    setModelHeight(modelHeight: number): void;
    getUiContainerHeight(): number;
    getRealPixelPosition(modelPixel: number): number;
    private getUiBodyHeight();
    getScrollPositionForPixel(rowTop: number): number;
}
}
declare module 'ag-grid/dist/lib/rendering/heightScaler' {
export * from '~ag-grid/dist/lib/rendering/heightScaler';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/beans.d.ts
declare module '~ag-grid/dist/lib/rendering/beans' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Context } from '~ag-grid/dist/lib/context/context';
import { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
import { ColumnController } from '~ag-grid/dist/lib/columnController/columnController';
import { GridApi } from '~ag-grid/dist/lib/gridApi';
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
import { ExpressionService } from '~ag-grid/dist/lib/valueService/expressionService';
import { RowRenderer } from '~ag-grid/dist/lib/rendering/rowRenderer';
import { TemplateService } from '~ag-grid/dist/lib/templateService';
import { ValueService } from '~ag-grid/dist/lib/valueService/valueService';
import { EventService } from '~ag-grid/dist/lib/eventService';
import { ColumnAnimationService } from '~ag-grid/dist/lib/rendering/columnAnimationService';
import { IRangeController } from '~ag-grid/dist/lib/interfaces/iRangeController';
import { FocusedCellController } from '~ag-grid/dist/lib/focusedCellController';
import { IContextMenuFactory } from '~ag-grid/dist/lib/interfaces/iContextMenuFactory';
import { CellEditorFactory } from '~ag-grid/dist/lib/rendering/cellEditorFactory';
import { CellRendererFactory } from '~ag-grid/dist/lib/rendering/cellRendererFactory';
import { PopupService } from '~ag-grid/dist/lib/widgets/popupService';
import { CellRendererService } from '~ag-grid/dist/lib/rendering/cellRendererService';
import { ValueFormatterService } from '~ag-grid/dist/lib/rendering/valueFormatterService';
import { StylingService } from '~ag-grid/dist/lib/styling/stylingService';
import { ColumnHoverService } from '~ag-grid/dist/lib/rendering/columnHoverService';
import { GridPanel } from '~ag-grid/dist/lib/gridPanel/gridPanel';
import { PaginationProxy } from '~ag-grid/dist/lib/rowModels/paginationProxy';
import { AnimationFrameService } from '~ag-grid/dist/lib/misc/animationFrameService';
import { ComponentResolver } from '~ag-grid/dist/lib/components/framework/componentResolver';
import { DragAndDropService } from '~ag-grid/dist/lib/dragAndDrop/dragAndDropService';
import { SortController } from '~ag-grid/dist/lib/sortController';
import { FilterManager } from '~ag-grid/dist/lib/filter/filterManager';
import { HeightScaler } from '~ag-grid/dist/lib/rendering/heightScaler';
/** Using the IoC has a slight performance consideration, which is no problem most of the
 * time, unless we are trashing objects - which is the case when scrolling and rowComp
 * and cellComp. So for performance reasons, RowComp and CellComp do not get autowired
 * with the IoC. Instead they get passed this object which is all the beans the RowComp
 * and CellComp need. Not autowiring all the cells gives performance improvement. */
export class Beans {
    paginationProxy: PaginationProxy;
    gridPanel: GridPanel;
    context: Context;
    columnApi: ColumnApi;
    gridApi: GridApi;
    gridOptionsWrapper: GridOptionsWrapper;
    expressionService: ExpressionService;
    rowRenderer: RowRenderer;
    $compile: any;
    templateService: TemplateService;
    valueService: ValueService;
    eventService: EventService;
    columnController: ColumnController;
    columnAnimationService: ColumnAnimationService;
    rangeController: IRangeController;
    focusedCellController: FocusedCellController;
    contextMenuFactory: IContextMenuFactory;
    cellEditorFactory: CellEditorFactory;
    cellRendererFactory: CellRendererFactory;
    popupService: PopupService;
    cellRendererService: CellRendererService;
    valueFormatterService: ValueFormatterService;
    stylingService: StylingService;
    columnHoverService: ColumnHoverService;
    enterprise: boolean;
    componentResolver: ComponentResolver;
    taskQueue: AnimationFrameService;
    dragAndDropService: DragAndDropService;
    sortController: SortController;
    filterManager: FilterManager;
    heightScaler: HeightScaler;
    forPrint: boolean;
    doingMasterDetail: boolean;
    private postConstruct();
}
}
declare module 'ag-grid/dist/lib/rendering/beans' {
export * from '~ag-grid/dist/lib/rendering/beans';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/features/setLeftFeature.d.ts
declare module '~ag-grid/dist/lib/rendering/features/setLeftFeature' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ColumnGroupChild } from '~ag-grid/dist/lib/entities/columnGroupChild';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { BeanStub } from '~ag-grid/dist/lib/context/beanStub';
import { Beans } from '~ag-grid/dist/lib/rendering/beans';
export class SetLeftFeature extends BeanStub {
    private columnOrGroup;
    private eCell;
    private actualLeft;
    private colsSpanning;
    private beans;
    constructor(columnOrGroup: ColumnGroupChild, eCell: HTMLElement, beans: Beans, colsSpanning?: Column[]);
    setColsSpanning(colsSpanning: Column[]): void;
    getColumnOrGroup(): ColumnGroupChild;
    init(): void;
    private setLeftFirstTime();
    private animateInLeft();
    private onLeftChanged();
    private setLeft(value);
}
}
declare module 'ag-grid/dist/lib/rendering/features/setLeftFeature' {
export * from '~ag-grid/dist/lib/rendering/features/setLeftFeature';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/autoWidthCalculator.d.ts
declare module '~ag-grid/dist/lib/rendering/autoWidthCalculator' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
export class AutoWidthCalculator {
    private rowRenderer;
    private headerRenderer;
    private gridPanel;
    private gridOptionsWrapper;
    getPreferredWidthForColumn(column: Column): number;
    private getHeaderCellForColumn(column);
    private putRowCellsIntoDummyContainer(column, eDummyContainer);
    private cloneItemIntoDummy(eCell, eDummyContainer);
}
}
declare module 'ag-grid/dist/lib/rendering/autoWidthCalculator' {
export * from '~ag-grid/dist/lib/rendering/autoWidthCalculator';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellEditorFactory.d.ts
declare module '~ag-grid/dist/lib/rendering/cellEditorFactory' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ICellEditorComp, ICellEditorParams } from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
import { ColDef } from '~ag-grid/dist/lib/entities/colDef';
import { Promise } from '~ag-grid/dist/lib/utils';
export class CellEditorFactory {
    private context;
    private componentResolver;
    private gridOptionsWrapper;
    private init();
    addCellEditor(key: string, cellEditor: {
        new (): ICellEditorComp;
    }): void;
    createCellEditor(column: ColDef, params: ICellEditorParams): Promise<ICellEditorComp>;
}
}
declare module 'ag-grid/dist/lib/rendering/cellEditorFactory' {
export * from '~ag-grid/dist/lib/rendering/cellEditorFactory';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellRendererFactory.d.ts
declare module '~ag-grid/dist/lib/rendering/cellRendererFactory' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ICellRenderer, ICellRendererFunc } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
export class CellRendererFactory {
    static ANIMATE_SLIDE: string;
    static ANIMATE_SHOW_CHANGE: string;
    static GROUP: string;
    private gridOptionsWrapper;
    private expressionService;
    private eventService;
    private cellRendererMap;
    private init();
    addCellRenderer(key: string, cellRenderer: {
        new (): ICellRenderer;
    } | ICellRendererFunc): void;
    getCellRenderer(key: string): {
        new (): ICellRenderer;
    } | ICellRendererFunc;
}
}
declare module 'ag-grid/dist/lib/rendering/cellRendererFactory' {
export * from '~ag-grid/dist/lib/rendering/cellRendererFactory';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellRendererService.d.ts
declare module '~ag-grid/dist/lib/rendering/cellRendererService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ICellRendererComp } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
import { ColDef } from '~ag-grid/dist/lib/entities/colDef';
import { GroupCellRendererParams } from '~ag-grid/dist/lib/rendering/cellRenderers/groupCellRenderer';
import { Promise } from '~ag-grid/dist/lib/utils';
/** Class to use a cellRenderer. */
export class CellRendererService {
    private componentRecipes;
    private componentResolver;
    private gridOptionsWrapper;
    useCellRenderer(target: ColDef, eTarget: HTMLElement, params: any): Promise<ICellRendererComp>;
    useFilterCellRenderer(target: ColDef, eTarget: HTMLElement, params: any): Promise<ICellRendererComp>;
    useRichSelectCellRenderer(target: ColDef, eTarget: HTMLElement, params: any): Promise<ICellRendererComp>;
    useInnerCellRenderer(target: GroupCellRendererParams, originalColumn: ColDef, eTarget: HTMLElement, params: any): Promise<ICellRendererComp>;
    useFullWidthGroupRowInnerCellRenderer(eTarget: HTMLElement, params: any): Promise<ICellRendererComp>;
    bindToHtml(cellRendererPromise: Promise<ICellRendererComp>, eTarget: HTMLElement): Promise<ICellRendererComp>;
}
}
declare module 'ag-grid/dist/lib/rendering/cellRendererService' {
export * from '~ag-grid/dist/lib/rendering/cellRendererService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/checkboxSelectionComponent.d.ts
declare module '~ag-grid/dist/lib/rendering/checkboxSelectionComponent' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Component } from '~ag-grid/dist/lib/widgets/component';
export class CheckboxSelectionComponent extends Component {
    private gridOptionsWrapper;
    private eventService;
    private gridApi;
    private columnApi;
    private eCheckedIcon;
    private eUncheckedIcon;
    private eIndeterminateIcon;
    private rowNode;
    private column;
    private isRowSelectableFunc;
    constructor();
    private createAndAddIcons();
    private onDataChanged();
    private onSelectableChanged();
    private onSelectionChanged();
    private onCheckedClicked();
    private onUncheckedClicked(event);
    private onIndeterminateClicked(event);
    init(params: any): void;
    private showOrHideSelect();
    private checkboxCallbackExists();
}
}
declare module 'ag-grid/dist/lib/rendering/checkboxSelectionComponent' {
export * from '~ag-grid/dist/lib/rendering/checkboxSelectionComponent';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/cellComp.d.ts
declare module '~ag-grid/dist/lib/rendering/cellComp' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { GridCell } from '~ag-grid/dist/lib/entities/gridCell';
import { ICellEditorComp } from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { ICellRendererComp } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
import { Beans } from '~ag-grid/dist/lib/rendering/beans';
import { RowComp } from '~ag-grid/dist/lib/rendering/rowComp';
export class CellComp extends Component {
    static DOM_DATA_KEY_CELL_COMP: string;
    private eCellWrapper;
    private eParentOfValue;
    private beans;
    private column;
    private rowNode;
    private eParentRow;
    private gridCell;
    private rangeCount;
    private usingWrapper;
    private includeSelectionComponent;
    private includeRowDraggingComponent;
    private cellFocused;
    private editingCell;
    private cellEditorInPopup;
    private hideEditorPopup;
    private lastIPadMouseClickEvent;
    private usingCellRenderer;
    private cellRendererType;
    private cellRenderer;
    private cellRendererGui;
    private cellEditor;
    private autoHeightCell;
    private firstRightPinned;
    private lastLeftPinned;
    private rowComp;
    private rangeSelectionEnabled;
    private value;
    private valueFormatted;
    private colsSpanning;
    private tooltip;
    private scope;
    private cellEditorVersion;
    private cellRendererVersion;
    constructor(scope: any, beans: Beans, column: Column, rowNode: RowNode, rowComp: RowComp, autoHeightCell: boolean);
    getCreateTemplate(): string;
    afterAttached(): void;
    private onColumnHover();
    private onCellChanged(event);
    private getCellLeft();
    private getCellWidth();
    private onFlashCells(event);
    private setupColSpan();
    private getColSpanningList();
    private onDisplayColumnsChanged();
    private getInitialCssClasses();
    getInitialValueToRender(): string;
    getRenderedRow(): RowComp;
    isSuppressNavigable(): boolean;
    getCellRenderer(): ICellRendererComp;
    getCellEditor(): ICellEditorComp;
    refreshCell(params?: {
        suppressFlash?: boolean;
        newData?: boolean;
        forceRefresh?: boolean;
    }): void;
    flashCell(): void;
    private animateCell(cssName);
    private replaceContentsAfterRefresh();
    private angular1Compile();
    private postProcessStylesFromColDef();
    private preProcessStylesFromColDef();
    private processStylesFromColDef();
    private postProcessClassesFromColDef();
    private preProcessClassesFromColDef();
    private processClassesFromColDef(onApplicableClass);
    private putDataIntoCellAfterRefresh();
    attemptCellRendererRefresh(): boolean;
    private refreshToolTip();
    private valuesAreEqual(val1, val2);
    private getToolTip();
    private processCellClassRules(onApplicableClass, onNotApplicableClass?);
    private postProcessCellClassRules();
    private preProcessCellClassRules();
    setUsingWrapper(): void;
    private chooseCellRenderer();
    private createCellRendererInstance();
    private afterCellRendererCreated(cellRendererVersion, cellRenderer);
    private attachCellRenderer();
    private createCellRendererParams();
    private formatValue(value);
    private getValueToUse();
    private getValueAndFormat();
    private getValue();
    onMouseEvent(eventName: string, mouseEvent: MouseEvent): void;
    dispatchCellContextMenuEvent(event: Event): void;
    private createEvent(domEvent, eventType);
    private onMouseOut(mouseEvent);
    private onMouseOver(mouseEvent);
    private onCellDoubleClicked(mouseEvent);
    startRowOrCellEdit(keyPress?: number, charPress?: string): void;
    isCellEditable(): boolean;
    startEditingIfEnabled(keyPress?: number, charPress?: string, cellStartedEdit?: boolean): void;
    private afterCellEditorCreated(cellEditorVersion, cellEditor);
    private addInCellEditor();
    private addPopupCellEditor();
    private onPopupEditorClosed();
    private setInlineEditingClass();
    private createCellEditorParams(keyPress, charPress, cellStartedEdit);
    private stopEditingAndFocus();
    private parseValue(newValue);
    focusCell(forceBrowserFocus?: boolean): void;
    setFocusInOnEditor(): void;
    isEditing(): boolean;
    onKeyDown(event: KeyboardEvent): void;
    doesUserWantToCancelKeyboardEvent(event: KeyboardEvent): boolean;
    setFocusOutOnEditor(): void;
    private onNavigationKeyPressed(event, key);
    private onShiftRangeSelect(key);
    private onTabKeyDown(event);
    private onBackspaceOrDeleteKeyPressed(key);
    private onEnterKeyDown();
    private navigateAfterEdit();
    private onF2KeyDown();
    private onEscapeKeyDown();
    onKeyPress(event: KeyboardEvent): void;
    private onSpaceKeyPressed(event);
    private onMouseDown(mouseEvent);
    private isDoubleClickOnIPad();
    private onCellClicked(mouseEvent);
    private doIeFocusHack();
    private createGridCellVo();
    getGridCell(): GridCell;
    getParentRow(): HTMLElement;
    setParentRow(eParentRow: HTMLElement): void;
    getColumn(): Column;
    detach(): void;
    destroy(): void;
    private onLeftChanged();
    private onWidthChanged();
    private getRangeClasses();
    private onRowIndexChanged();
    private onRangeSelectionChanged();
    private onFirstRightPinnedChanged();
    private onLastLeftPinnedChanged();
    private populateTemplate();
    private addRowDragging();
    private addSelectionCheckbox();
    private addDomData();
    private onCellFocused(event?);
    stopRowOrCellEdit(cancel?: boolean): void;
    stopEditing(cancel?: boolean): void;
}
}
declare module 'ag-grid/dist/lib/rendering/cellComp' {
export * from '~ag-grid/dist/lib/rendering/cellComp';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/rowComp.d.ts
declare module '~ag-grid/dist/lib/rendering/rowComp' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { CellComp } from '~ag-grid/dist/lib/rendering/cellComp';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { ICellRendererParams } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
import { RowContainerComponent } from '~ag-grid/dist/lib/rendering/rowContainerComponent';
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { Beans } from '~ag-grid/dist/lib/rendering/beans';
export class LoadingCellRenderer extends Component {
    private static TEMPLATE;
    gridOptionsWrapper: GridOptionsWrapper;
    private eLoadingIcon;
    private eLoadingText;
    constructor();
    init(params: ICellRendererParams): void;
    refresh(params: any): boolean;
}
export class RowComp extends Component {
    static DOM_DATA_KEY_RENDERED_ROW: string;
    private static FULL_WIDTH_CELL_RENDERER;
    private static GROUP_ROW_RENDERER;
    private static GROUP_ROW_RENDERER_COMP_NAME;
    private static LOADING_CELL_RENDERER;
    private static LOADING_CELL_RENDERER_COMP_NAME;
    private static DETAIL_CELL_RENDERER;
    private static DETAIL_CELL_RENDERER_COMP_NAME;
    private rowNode;
    private beans;
    private ePinnedLeftRow;
    private ePinnedRightRow;
    private eBodyRow;
    private eAllRowContainers;
    private eFullWidthRow;
    private eFullWidthRowBody;
    private eFullWidthRowLeft;
    private eFullWidthRowRight;
    private bodyContainerComp;
    private fullWidthContainerComp;
    private pinnedLeftContainerComp;
    private pinnedRightContainerComp;
    private fullWidthRowComponent;
    private fullWidthRowComponentBody;
    private fullWidthRowComponentLeft;
    private fullWidthRowComponentRight;
    private active;
    private fullWidthRow;
    private fullWidthRowEmbedded;
    private editingRow;
    private rowFocused;
    private columnRefreshPending;
    private cellComps;
    private createSecondPassFuncs;
    private removeFirstPassFuncs;
    private removeSecondPassFuncs;
    private fadeRowIn;
    private slideRowIn;
    private useAnimationFrameForCreate;
    private rowIsEven;
    private paginationPage;
    private parentScope;
    private scope;
    private initialised;
    constructor(parentScope: any, bodyContainerComp: RowContainerComponent, pinnedLeftContainerComp: RowContainerComponent, pinnedRightContainerComp: RowContainerComponent, fullWidthContainerComp: RowContainerComponent, rowNode: RowNode, beans: Beans, animateIn: boolean, useAnimationFrameForCreate: boolean);
    init(): void;
    private createTemplate(contents, extraCssClass?);
    getCellForCol(column: Column): HTMLElement;
    afterFlush(): void;
    private executeProcessRowPostCreateFunc();
    private getInitialRowTopStyle();
    private getRowBusinessKey();
    private lazyCreateCells(cols, eRow);
    private createRowContainer(rowContainerComp, cols, callback);
    private createChildScopeOrNull(data);
    private setupRowContainers();
    private setupNormalRowContainers();
    private createFullWidthRows(type, name);
    private addMouseWheelListenerToFullWidthRow();
    private setAnimateFlags(animateIn);
    isEditing(): boolean;
    stopRowEditing(cancel: boolean): void;
    isFullWidth(): boolean;
    private addListeners();
    private onGridColumnsChanged();
    private onRowNodeDataChanged(event);
    private onRowNodeCellChanged(event);
    private postProcessCss();
    private onRowNodeDraggingChanged();
    private postProcessRowDragging();
    private onExpandedChanged();
    private onDisplayedColumnsChanged();
    private destroyFullWidthComponents();
    private getContainerForCell(pinnedType);
    private onVirtualColumnsChanged();
    private onColumnResized();
    private refreshCells();
    private refreshCellsInAnimationFrame();
    private removeRenderedCells(colIds);
    private isCellEligibleToBeRemoved(indexStr);
    private ensureCellInCorrectContainer(cellComp);
    private isCellInWrongRow(cellComp);
    private insertCellsIntoContainer(eRow, cols);
    private addDomData(eRowContainer);
    private createNewCell(col, eContainer, cellTemplates, newCellComps);
    onMouseEvent(eventName: string, mouseEvent: MouseEvent): void;
    private createRowEvent(type, domEvent?);
    private createRowEventWithSource(type, domEvent);
    private onRowDblClick(mouseEvent);
    onRowClick(mouseEvent: MouseEvent): void;
    private createFullWidthRowContainer(rowContainerComp, pinned, extraCssClass, cellRendererType, cellRendererName, eRowCallback, cellRendererCallback);
    private angular1Compile(element);
    private createFullWidthParams(eRow, pinned);
    private getInitialRowClasses(extraCssClass);
    private preProcessRowClassRules();
    private processRowClassRules(onApplicableClass, onNotApplicableClass?);
    stopEditing(cancel?: boolean): void;
    private setEditingRow(value);
    startRowEditing(keyPress?: number, charPress?: string, sourceRenderedCell?: CellComp): void;
    forEachCellComp(callback: (renderedCell: CellComp) => void): void;
    private postProcessClassesFromGridOptions();
    private postProcessRowClassRules();
    private processClassesFromGridOptions();
    private preProcessStylesFromGridOptions();
    private postProcessStylesFromGridOptions();
    private processStylesFromGridOptions();
    private createCells(cols);
    private onRowSelected();
    private callAfterRowAttachedOnCells(newCellComps, eRow);
    private afterRowAttached(rowContainerComp, eRow);
    private addHoverFunctionality(eRow);
    private roundRowTopToBounds(rowTop);
    private onRowHeightChanged();
    addEventListener(eventType: string, listener: Function): void;
    removeEventListener(eventType: string, listener: Function): void;
    destroy(animate?: boolean): void;
    private destroyContainingCells();
    getAndClearDelayedDestroyFunctions(): Function[];
    private onCellFocusChanged();
    private onPaginationChanged();
    private onTopChanged();
    private applyPaginationOffset(topPx, reverse?);
    private setRowTop(pixels);
    getAndClearNextVMTurnFunctions(): Function[];
    getRowNode(): RowNode;
    getRenderedCellForColumn(column: Column): CellComp;
    private onRowIndexChanged();
    private updateRowIndexes();
    ensureDomOrder(): void;
    getPinnedLeftRowElement(): HTMLElement;
    getPinnedRightRowElement(): HTMLElement;
    getBodyRowElement(): HTMLElement;
    getFullWidthRowElement(): HTMLElement;
}
}
declare module 'ag-grid/dist/lib/rendering/rowComp' {
export * from '~ag-grid/dist/lib/rendering/rowComp';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/rowRenderer.d.ts
declare module '~ag-grid/dist/lib/rendering/rowRenderer' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { CellComp } from '~ag-grid/dist/lib/rendering/cellComp';
import { LoggerFactory } from '~ag-grid/dist/lib/logger';
import { GridCell, GridCellDef } from '~ag-grid/dist/lib/entities/gridCell';
import { BeanStub } from '~ag-grid/dist/lib/context/beanStub';
import { FlashCellsParams, GetCellRendererInstancesParams, RefreshCellsParams } from '~ag-grid/dist/lib/gridApi';
import { ICellRendererComp } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
import { ICellEditorComp } from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
export class RowRenderer extends BeanStub {
    private paginationProxy;
    private columnController;
    private gridOptionsWrapper;
    private gridCore;
    private gridPanel;
    private $scope;
    private expressionService;
    private templateService;
    private valueService;
    private eventService;
    private pinnedRowModel;
    private context;
    private loggerFactory;
    private focusedCellController;
    private cellNavigationService;
    private columnApi;
    private gridApi;
    private beans;
    private heightScaler;
    private animationFrameService;
    private rangeController;
    private firstRenderedRow;
    private lastRenderedRow;
    private rowCompsByIndex;
    private floatingTopRowComps;
    private floatingBottomRowComps;
    private forPrint;
    private autoHeight;
    private rowContainers;
    private pinningLeft;
    private pinningRight;
    private refreshInProgress;
    private logger;
    agWire(loggerFactory: LoggerFactory): void;
    init(): void;
    private onPageLoaded(refreshEvent?);
    getAllCellsForColumn(column: Column): HTMLElement[];
    refreshFloatingRowComps(): void;
    private refreshFloatingRows(rowComps, rowNodes, pinnedLeftContainerComp, pinnedRightContainerComp, bodyContainerComp, fullWidthContainerComp);
    private onPinnedRowDataChanged();
    private onModelUpdated(refreshEvent);
    private getRenderedIndexesForRowNodes(rowNodes);
    redrawRows(rowNodes: RowNode[]): void;
    private getCellToRestoreFocusToAfterRefresh(params);
    redrawAfterModelUpdate(params?: RefreshViewParams): void;
    private scrollToTopIfNewData(params);
    private sizeContainerToPageHeight();
    private getLockOnRefresh();
    private releaseLockOnRefresh();
    private restoreFocusedCell(gridCell);
    stopEditing(cancel?: boolean): void;
    forEachCellComp(callback: (cellComp: CellComp) => void): void;
    private forEachRowComp(callback);
    addRenderedRowListener(eventName: string, rowIndex: number, callback: Function): void;
    flashCells(params?: FlashCellsParams): void;
    refreshCells(params?: RefreshCellsParams): void;
    getCellRendererInstances(params: GetCellRendererInstancesParams): ICellRendererComp[];
    getCellEditorInstances(params: GetCellRendererInstancesParams): ICellEditorComp[];
    getEditingCells(): GridCellDef[];
    private forEachCellCompFiltered(rowNodes, columns, callback);
    destroy(): void;
    private binRowComps(recycleRows);
    private removeRowComps(rowsToRemove);
    redrawAfterScroll(): void;
    private removeRowCompsNotToDraw(indexesToDraw);
    private calculateIndexesToDraw();
    private redraw(rowsToRecycle?, animate?, afterScroll?);
    private flushContainers(rowComps);
    private onDisplayedColumnsChanged();
    private redrawFullWidthEmbeddedRows();
    private createOrUpdateRowComp(rowIndex, rowsToRecycle, animate, afterScroll);
    private destroyRowComps(rowCompsMap, animate);
    private checkAngularCompile();
    private workOutFirstAndLastRowsToRender();
    getFirstVirtualRenderedRow(): number;
    getLastVirtualRenderedRow(): number;
    private keepRowBecauseEditing(rowComp);
    private createRowComp(rowNode, animate, afterScroll);
    getRenderedNodes(): RowNode[];
    navigateToNextCell(event: KeyboardEvent, key: number, previousCell: GridCell, allowUserOverride: boolean): void;
    ensureCellVisible(gridCell: GridCell): void;
    startEditingCell(gridCell: GridCell, keyPress: number, charPress: string): void;
    private getComponentForCell(gridCell);
    onTabKeyDown(previousRenderedCell: CellComp, keyboardEvent: KeyboardEvent): void;
    tabToNextCell(backwards: boolean): boolean;
    private moveToCellAfter(previousRenderedCell, backwards);
    private moveToNextEditingCell(previousRenderedCell, backwards);
    private moveToNextEditingRow(previousRenderedCell, backwards);
    private moveToNextCellNotEditing(previousRenderedCell, backwards);
    private moveEditToNextCellOrRow(previousRenderedCell, nextRenderedCell);
    private findNextCellToFocusOn(gridCell, backwards, startEditing);
}
export interface RefreshViewParams {
    recycleRows?: boolean;
    animate?: boolean;
    suppressKeepFocus?: boolean;
    onlyBody?: boolean;
    newData?: boolean;
    newPage?: boolean;
}
}
declare module 'ag-grid/dist/lib/rendering/rowRenderer' {
export * from '~ag-grid/dist/lib/rendering/rowRenderer';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/valueFormatterService.d.ts
declare module '~ag-grid/dist/lib/rendering/valueFormatterService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export class ValueFormatterService {
    private gridOptionsWrapper;
    private expressionService;
    formatValue(column: Column, rowNode: RowNode, $scope: any, value: any): string;
}
}
declare module 'ag-grid/dist/lib/rendering/valueFormatterService' {
export * from '~ag-grid/dist/lib/rendering/valueFormatterService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/inMemory/filterStage.d.ts
declare module '~ag-grid/dist/lib/rowModels/inMemory/filterStage' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IRowNodeStage, StageExecuteParams } from '~ag-grid/dist/lib/interfaces/iRowNodeStage';
export class FilterStage implements IRowNodeStage {
    private gridOptionsWrapper;
    private selectableService;
    private filterService;
    execute(params: StageExecuteParams): void;
}
}
declare module 'ag-grid/dist/lib/rowModels/inMemory/filterStage' {
export * from '~ag-grid/dist/lib/rowModels/inMemory/filterStage';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/inMemory/flattenStage.d.ts
declare module '~ag-grid/dist/lib/rowModels/inMemory/flattenStage' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { IRowNodeStage, StageExecuteParams } from '~ag-grid/dist/lib/interfaces/iRowNodeStage';
export class FlattenStage implements IRowNodeStage {
    private gridOptionsWrapper;
    private selectionController;
    private eventService;
    private context;
    private columnController;
    execute(params: StageExecuteParams): RowNode[];
    private resetRowTops(rowNode);
    private recursivelyAddToRowsToDisplay(rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel);
    private addRowNodeToRowsToDisplay(rowNode, result, nextRowTop, uiLevel);
    private ensureFooterNodeExists(groupNode);
    private createDetailNode(masterNode);
}
}
declare module 'ag-grid/dist/lib/rowModels/inMemory/flattenStage' {
export * from '~ag-grid/dist/lib/rowModels/inMemory/flattenStage';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/inMemory/sortStage.d.ts
declare module '~ag-grid/dist/lib/rowModels/inMemory/sortStage' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { StageExecuteParams } from '~ag-grid/dist/lib/interfaces/iRowNodeStage';
export class SortStage {
    private gridOptionsWrapper;
    private sortService;
    execute(params: StageExecuteParams): void;
}
}
declare module 'ag-grid/dist/lib/rowModels/inMemory/sortStage' {
export * from '~ag-grid/dist/lib/rowModels/inMemory/sortStage';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/pinnedRowModel.d.ts
declare module '~ag-grid/dist/lib/rowModels/pinnedRowModel' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export class PinnedRowModel {
    private gridOptionsWrapper;
    private eventService;
    private context;
    private columnApi;
    private gridApi;
    private pinnedTopRows;
    private pinnedBottomRows;
    init(): void;
    isEmpty(floating: string): boolean;
    isRowsToRender(floating: string): boolean;
    getRowAtPixel(pixel: number, floating: string): number;
    setPinnedTopRowData(rowData: any[]): void;
    setPinnedBottomRowData(rowData: any[]): void;
    private createNodesFromData(allData, isTop);
    getPinnedTopRowData(): RowNode[];
    getPinnedBottomRowData(): RowNode[];
    getPinnedTopTotalHeight(): number;
    getPinnedTopRowCount(): number;
    getPinnedBottomRowCount(): number;
    getPinnedTopRow(index: number): RowNode;
    getPinnedBottomRow(index: number): RowNode;
    forEachPinnedTopRow(callback: (rowNode: RowNode, index: number) => void): void;
    forEachPinnedBottomRow(callback: (rowNode: RowNode, index: number) => void): void;
    getPinnedBottomTotalHeight(): number;
    private getTotalHeight(rowNodes);
}
}
declare module 'ag-grid/dist/lib/rowModels/pinnedRowModel' {
export * from '~ag-grid/dist/lib/rowModels/pinnedRowModel';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/inMemory/inMemoryRowModel.d.ts
declare module '~ag-grid/dist/lib/rowModels/inMemory/inMemoryRowModel' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { ChangedPath } from '~ag-grid/dist/lib/rowModels/inMemory/changedPath';
import { RowBounds } from '~ag-grid/dist/lib/interfaces/iRowModel';
export interface RefreshModelParams {
    step: number;
    groupState?: any;
    keepRenderedRows?: boolean;
    animate?: boolean;
    keepEditingRows?: boolean;
    rowNodeTransactions?: RowNodeTransaction[];
    rowNodeOrder?: {
        [id: string]: number;
    };
    newData?: boolean;
}
export interface RowDataTransaction {
    addIndex?: number;
    add?: any[];
    remove?: any[];
    update?: any[];
}
export interface RowNodeTransaction {
    add: RowNode[];
    remove: RowNode[];
    update: RowNode[];
}
export interface BatchTransactionItem {
    rowDataTransaction: RowDataTransaction;
    callback: (res: RowNodeTransaction) => void;
}
export class InMemoryRowModel {
    private gridOptionsWrapper;
    private columnController;
    private filterManager;
    private $scope;
    private selectionController;
    private eventService;
    private context;
    private valueService;
    private valueCache;
    private columnApi;
    private gridApi;
    private filterStage;
    private sortStage;
    private flattenStage;
    private groupStage;
    private aggregationStage;
    private pivotStage;
    private rootNode;
    private rowsToDisplay;
    private nodeManager;
    private rowDataTransactionBatch;
    init(): void;
    ensureRowAtPixel(rowNode: RowNode, pixel: number): boolean;
    isLastRowFound(): boolean;
    getRowCount(): number;
    getRowBounds(index: number): RowBounds;
    private onRowGroupOpened();
    private onFilterChanged();
    private onSortChanged();
    getType(): string;
    private onValueChanged();
    private createChangePath(rowNodeTransactions);
    refreshModel(params: RefreshModelParams): void;
    isEmpty(): boolean;
    isRowsToRender(): boolean;
    getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[];
    setDatasource(datasource: any): void;
    getTopLevelNodes(): RowNode[];
    getRootNode(): RowNode;
    getRow(index: number): RowNode;
    isRowPresent(rowNode: RowNode): boolean;
    getVirtualRowCount(): number;
    getPageFirstRow(): number;
    getPageLastRow(): number;
    getRowIndexAtPixel(pixelToMatch: number): number;
    private isRowInPixel(rowNode, pixelToMatch);
    getCurrentPageHeight(): number;
    forEachLeafNode(callback: Function): void;
    forEachNode(callback: Function): void;
    forEachNodeAfterFilter(callback: Function): void;
    forEachNodeAfterFilterAndSort(callback: Function): void;
    forEachPivotNode(callback: Function): void;
    private recursivelyWalkNodesAndCallback(nodes, callback, recursionType, index);
    doAggregate(changedPath?: ChangedPath): void;
    expandOrCollapseAll(expand: boolean): void;
    private doSort();
    private doRowGrouping(groupState, rowNodeTransactions, rowNodeOrder, changedPath);
    private restoreGroupState(groupState);
    private doFilter();
    private doPivot(changedPath);
    private getGroupState();
    getCopyOfNodesMap(): {
        [id: string]: RowNode;
    };
    getRowNode(id: string): RowNode;
    setRowData(rowData: any[]): void;
    batchUpdateRowData(rowDataTransaction: RowDataTransaction, callback?: (res: RowNodeTransaction) => void): void;
    private executeBatchUpdateRowData();
    updateRowData(rowDataTran: RowDataTransaction, rowNodeOrder?: {
        [id: string]: number;
    }): RowNodeTransaction;
    private commonUpdateRowData(rowNodeTrans, rowNodeOrder?);
    private doRowsToDisplay();
    onRowHeightChanged(): void;
    resetRowHeights(): void;
}
}
declare module 'ag-grid/dist/lib/rowModels/inMemory/inMemoryRowModel' {
export * from '~ag-grid/dist/lib/rowModels/inMemory/inMemoryRowModel';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/inMemory/changedPath.d.ts
declare module '~ag-grid/dist/lib/rowModels/inMemory/changedPath' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { Column } from '~ag-grid/dist/lib/entities/column';
export class ChangedPath {
    private active;
    private keepingColumns;
    private nodeIdsToBoolean;
    private nodeIdsToColumns;
    constructor(keepingColumns: boolean);
    setInactive(): void;
    isActive(): boolean;
    addParentNode(rowNode: RowNode, columns?: Column[]): void;
    isInPath(rowNode: RowNode): boolean;
    getValueColumnsForNode(rowNode: RowNode, valueColumns: Column[]): Column[];
    getNotValueColumnsForNode(rowNode: RowNode, valueColumns: Column[]): Column[];
    private validateActive();
}
}
declare module 'ag-grid/dist/lib/rowModels/inMemory/changedPath' {
export * from '~ag-grid/dist/lib/rowModels/inMemory/changedPath';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/inMemory/inMemoryNodeManager.d.ts
declare module '~ag-grid/dist/lib/rowModels/inMemory/inMemoryNodeManager' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
import { Context } from '~ag-grid/dist/lib/context/context';
import { EventService } from '~ag-grid/dist/lib/eventService';
import { RowDataTransaction, RowNodeTransaction } from '~ag-grid/dist/lib/rowModels/inMemory/inMemoryRowModel';
import { ColumnController } from '~ag-grid/dist/lib/columnController/columnController';
export class InMemoryNodeManager {
    private static TOP_LEVEL;
    private rootNode;
    private gridOptionsWrapper;
    private context;
    private eventService;
    private columnController;
    private nextId;
    private static ROOT_NODE_ID;
    private getNodeChildDetails;
    private doesDataFlower;
    private isRowMasterFunc;
    private suppressParentsInRowNodes;
    private doingLegacyTreeData;
    private doingMasterDetail;
    private allNodesMap;
    constructor(rootNode: RowNode, gridOptionsWrapper: GridOptionsWrapper, context: Context, eventService: EventService, columnController: ColumnController);
    postConstruct(): void;
    getCopyOfNodesMap(): {
        [id: string]: RowNode;
    };
    getRowNode(id: string): RowNode;
    setRowData(rowData: any[]): RowNode[];
    updateRowData(rowDataTran: RowDataTransaction, rowNodeOrder: {
        [id: string]: number;
    }): RowNodeTransaction;
    private addRowNode(data, index?);
    private updatedRowNode(data, update);
    private recursiveFunction(rowData, parent, level);
    private createNode(dataItem, parent, level);
    private isExpanded(level);
    private setLeafChildren(node);
    insertItemsAtIndex(index: number, rowData: any[]): RowNode[];
    addItems(items: any): RowNode[];
    isLegacyTreeData(): boolean;
}
}
declare module 'ag-grid/dist/lib/rowModels/inMemory/inMemoryNodeManager' {
export * from '~ag-grid/dist/lib/rowModels/inMemory/inMemoryNodeManager';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/infinite/infiniteRowModel.d.ts
declare module '~ag-grid/dist/lib/rowModels/infinite/infiniteRowModel' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { IRowModel, RowBounds } from '~ag-grid/dist/lib/interfaces/iRowModel';
import { IDatasource } from '~ag-grid/dist/lib/rowModels/iDatasource';
import { BeanStub } from '~ag-grid/dist/lib/context/beanStub';
import { RowDataTransaction } from '~ag-grid/dist/lib/rowModels/inMemory/inMemoryRowModel';
export class InfiniteRowModel extends BeanStub implements IRowModel {
    private gridOptionsWrapper;
    private filterManager;
    private sortController;
    private selectionController;
    private eventService;
    private context;
    private gridApi;
    private columnApi;
    private infiniteCache;
    private rowNodeBlockLoader;
    private datasource;
    private rowHeight;
    getRowBounds(index: number): RowBounds;
    init(): void;
    private destroyDatasource();
    isLastRowFound(): boolean;
    private addEventListeners();
    private onFilterChanged();
    private onSortChanged();
    private onColumnEverything();
    destroy(): void;
    getType(): string;
    setDatasource(datasource: IDatasource): void;
    private checkForDeprecated();
    isEmpty(): boolean;
    isRowsToRender(): boolean;
    getNodesInRangeForSelection(firstInRange: RowNode, lastInRange: RowNode): RowNode[];
    private reset();
    private createModelUpdatedEvent();
    private resetCache();
    private destroyCache();
    private onCacheUpdated();
    getRow(rowIndex: number): RowNode;
    forEachNode(callback: (rowNode: RowNode, index: number) => void): void;
    getCurrentPageHeight(): number;
    getRowIndexAtPixel(pixel: number): number;
    getPageFirstRow(): number;
    getPageLastRow(): number;
    getRowCount(): number;
    updateRowData(transaction: RowDataTransaction): void;
    isRowPresent(rowNode: RowNode): boolean;
    refreshCache(): void;
    purgeCache(): void;
    getVirtualRowCount(): number;
    isMaxRowFound(): boolean;
    setVirtualRowCount(rowCount: number, maxRowFound?: boolean): void;
    getBlockState(): any;
}
}
declare module 'ag-grid/dist/lib/rowModels/infinite/infiniteRowModel' {
export * from '~ag-grid/dist/lib/rowModels/infinite/infiniteRowModel';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iEnterpriseDatasource.d.ts
declare module '~ag-grid/dist/lib/interfaces/iEnterpriseDatasource' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export interface ColumnVO {
    id: string;
    displayName: string;
    field: string;
    aggFunc: string;
}
export interface IEnterpriseGetRowsRequest {
    startRow: number;
    endRow: number;
    rowGroupCols: ColumnVO[];
    valueCols: ColumnVO[];
    pivotCols: ColumnVO[];
    pivotMode: boolean;
    groupKeys: string[];
    filterModel: any;
    sortModel: any;
}
export interface IEnterpriseGetRowsParams {
    request: IEnterpriseGetRowsRequest;
    parentNode: RowNode;
    successCallback(rowsThisPage: any[], lastRow: number): void;
    failCallback(): void;
}
export interface IEnterpriseDatasource {
    getRows(params: IEnterpriseGetRowsParams): void;
    destroy?(): void;
}
}
declare module 'ag-grid/dist/lib/interfaces/iEnterpriseDatasource' {
export * from '~ag-grid/dist/lib/interfaces/iEnterpriseDatasource';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/infinite/infiniteBlock.d.ts
declare module '~ag-grid/dist/lib/rowModels/infinite/infiniteBlock' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { IEventEmitter } from '~ag-grid/dist/lib/interfaces/iEventEmitter';
import { InfiniteCacheParams } from '~ag-grid/dist/lib/rowModels/infinite/infiniteCache';
import { RowNodeBlock } from '~ag-grid/dist/lib/rowModels/cache/rowNodeBlock';
export class InfiniteBlock extends RowNodeBlock implements IEventEmitter {
    private gridOptionsWrapper;
    private context;
    private rowRenderer;
    private cacheParams;
    constructor(pageNumber: number, params: InfiniteCacheParams);
    protected createBlankRowNode(rowIndex: number): RowNode;
    protected setDataAndId(rowNode: RowNode, data: any, index: number): void;
    setRowNode(rowIndex: number, rowNode: RowNode): void;
    protected init(): void;
    getNodeIdPrefix(): string;
    getRow(displayIndex: number): RowNode;
    private setIndexAndTopOnRowNode(rowNode, rowIndex);
    protected loadFromDatasource(): void;
}
}
declare module 'ag-grid/dist/lib/rowModels/infinite/infiniteBlock' {
export * from '~ag-grid/dist/lib/rowModels/infinite/infiniteBlock';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/infinite/infiniteCache.d.ts
declare module '~ag-grid/dist/lib/rowModels/infinite/infiniteCache' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { IDatasource } from '~ag-grid/dist/lib/rowModels/iDatasource';
import { InfiniteBlock } from '~ag-grid/dist/lib/rowModels/infinite/infiniteBlock';
import { RowNodeCache, RowNodeCacheParams } from '~ag-grid/dist/lib/rowModels/cache/rowNodeCache';
export interface InfiniteCacheParams extends RowNodeCacheParams {
    datasource: IDatasource;
}
export class InfiniteCache extends RowNodeCache<InfiniteBlock, InfiniteCacheParams> {
    private eventService;
    private context;
    private columnApi;
    private gridApi;
    constructor(params: InfiniteCacheParams);
    private setBeans(loggerFactory);
    protected init(): void;
    private moveItemsDown(page, moveFromIndex, moveCount);
    private insertItems(block, indexToInsert, items);
    insertItemsAtIndex(indexToInsert: number, items: any[]): void;
    getRow(rowIndex: number, dontCreatePage?: boolean): RowNode;
    private createBlock(blockNumber);
    refreshCache(): void;
}
}
declare module 'ag-grid/dist/lib/rowModels/infinite/infiniteCache' {
export * from '~ag-grid/dist/lib/rowModels/infinite/infiniteCache';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/cache/rowNodeBlock.d.ts
declare module '~ag-grid/dist/lib/rowModels/cache/rowNodeBlock' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { NumberSequence } from '~ag-grid/dist/lib/utils';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { Context } from '~ag-grid/dist/lib/context/context';
import { BeanStub } from '~ag-grid/dist/lib/context/beanStub';
import { RowNodeCacheParams } from '~ag-grid/dist/lib/rowModels/cache/rowNodeCache';
import { RowRenderer } from '~ag-grid/dist/lib/rendering/rowRenderer';
import { AgEvent } from '~ag-grid/dist/lib/events';
export interface RowNodeBlockBeans {
    context: Context;
    rowRenderer: RowRenderer;
}
export interface LoadCompleteEvent extends AgEvent {
    success: boolean;
    page: RowNodeBlock;
    lastRow: number;
}
export abstract class RowNodeBlock extends BeanStub {
    static EVENT_LOAD_COMPLETE: string;
    static STATE_DIRTY: string;
    static STATE_LOADING: string;
    static STATE_LOADED: string;
    static STATE_FAILED: string;
    private version;
    private state;
    private lastAccessed;
    private blockNumber;
    private startRow;
    private endRow;
    rowNodes: RowNode[];
    private beans;
    private rowNodeCacheParams;
    protected abstract loadFromDatasource(): void;
    protected abstract setDataAndId(rowNode: RowNode, data: any, index: number): void;
    abstract getRow(displayIndex: number): RowNode;
    abstract getNodeIdPrefix(): string;
    constructor(blockNumber: number, rowNodeCacheParams: RowNodeCacheParams);
    isAnyNodeOpen(rowCount: number): boolean;
    private forEachNodeCallback(callback, rowCount);
    private forEachNode(callback, sequence, rowCount, deep);
    forEachNodeDeep(callback: (rowNode: RowNode, index: number) => void, sequence: NumberSequence, rowCount: number): void;
    forEachNodeShallow(callback: (rowNode: RowNode, index: number) => void, sequence: NumberSequence, rowCount: number): void;
    getVersion(): number;
    getLastAccessed(): number;
    getRowUsingLocalIndex(rowIndex: number): RowNode;
    protected init(beans: RowNodeBlockBeans): void;
    getStartRow(): number;
    getEndRow(): number;
    getBlockNumber(): number;
    setDirty(): void;
    setDirtyAndPurge(): void;
    getState(): string;
    setRowNode(rowIndex: number, rowNode: RowNode): void;
    setBlankRowNode(rowIndex: number): RowNode;
    setNewData(rowIndex: number, dataItem: any): RowNode;
    protected createBlankRowNode(rowIndex: number): RowNode;
    protected createRowNodes(): void;
    load(): void;
    protected pageLoadFailed(): void;
    private populateWithRowData(rows);
    destroy(): void;
    protected pageLoaded(version: number, rows: any[], lastRow: number): void;
}
}
declare module 'ag-grid/dist/lib/rowModels/cache/rowNodeBlock' {
export * from '~ag-grid/dist/lib/rowModels/cache/rowNodeBlock';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/cache/rowNodeBlockLoader.d.ts
declare module '~ag-grid/dist/lib/rowModels/cache/rowNodeBlockLoader' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNodeBlock } from '~ag-grid/dist/lib/rowModels/cache/rowNodeBlock';
export class RowNodeBlockLoader {
    private activeBlockLoadsCount;
    private blocks;
    private maxConcurrentRequests;
    private logger;
    private active;
    constructor(maxConcurrentRequests: number);
    private setBeans(loggerFactory);
    addBlock(block: RowNodeBlock): void;
    removeBlock(block: RowNodeBlock): void;
    destroy(): void;
    loadComplete(): void;
    checkBlockToLoad(): void;
    getBlockState(): any;
    private printCacheStatus();
}
}
declare module 'ag-grid/dist/lib/rowModels/cache/rowNodeBlockLoader' {
export * from '~ag-grid/dist/lib/rowModels/cache/rowNodeBlockLoader';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iEnterpriseRowModel.d.ts
declare module '~ag-grid/dist/lib/interfaces/iEnterpriseRowModel' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IRowModel } from '~ag-grid/dist/lib/interfaces/iRowModel';
export interface IEnterpriseRowModel extends IRowModel {
    purgeCache(route?: string[]): void;
    getBlockState(): any;
}
}
declare module 'ag-grid/dist/lib/interfaces/iEnterpriseRowModel' {
export * from '~ag-grid/dist/lib/interfaces/iEnterpriseRowModel';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iEnterpriseCache.d.ts
declare module '~ag-grid/dist/lib/interfaces/iEnterpriseCache' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export interface IEnterpriseCache {
}
}
declare module 'ag-grid/dist/lib/interfaces/iEnterpriseCache' {
export * from '~ag-grid/dist/lib/interfaces/iEnterpriseCache';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iToolPanel.d.ts
declare module '~ag-grid/dist/lib/interfaces/iToolPanel' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
export interface IToolPanel extends IComponent<any> {
    refresh(): void;
    showToolPanel(show: boolean): void;
    isToolPanelShowing(): boolean;
    init(): void;
}
}
declare module 'ag-grid/dist/lib/interfaces/iToolPanel' {
export * from '~ag-grid/dist/lib/interfaces/iToolPanel';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/cache/rowNodeCache.d.ts
declare module '~ag-grid/dist/lib/rowModels/cache/rowNodeCache' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { NumberSequence } from '~ag-grid/dist/lib/utils';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { BeanStub } from '~ag-grid/dist/lib/context/beanStub';
import { RowNodeBlock } from '~ag-grid/dist/lib/rowModels/cache/rowNodeBlock';
import { Logger } from '~ag-grid/dist/lib/logger';
import { RowNodeBlockLoader } from '~ag-grid/dist/lib/rowModels/cache/rowNodeBlockLoader';
import { AgEvent } from '~ag-grid/dist/lib/events';
export interface RowNodeCacheParams {
    initialRowCount: number;
    blockSize: number;
    overflowSize: number;
    sortModel: any;
    filterModel: any;
    maxBlocksInCache: number;
    rowHeight: number;
    lastAccessedSequence: NumberSequence;
    maxConcurrentRequests: number;
    rowNodeBlockLoader: RowNodeBlockLoader;
    dynamicRowHeight: boolean;
}
export interface CacheUpdatedEvent extends AgEvent {
}
export abstract class RowNodeCache<T extends RowNodeBlock, P extends RowNodeCacheParams> extends BeanStub {
    static EVENT_CACHE_UPDATED: string;
    private virtualRowCount;
    private maxRowFound;
    protected cacheParams: P;
    private active;
    blocks: {
        [blockNumber: string]: T;
    };
    private blockCount;
    protected logger: Logger;
    abstract getRow(rowIndex: number): RowNode;
    constructor(cacheParams: P);
    destroy(): void;
    protected init(): void;
    isActive(): boolean;
    getVirtualRowCount(): number;
    hack_setVirtualRowCount(virtualRowCount: number): void;
    isMaxRowFound(): boolean;
    protected onPageLoaded(event: any): void;
    private purgeBlocksIfNeeded(blockToExclude);
    protected postCreateBlock(newBlock: T): void;
    protected removeBlockFromCache(blockToRemove: T): void;
    protected checkBlockToLoad(): void;
    protected checkVirtualRowCount(block: T, lastRow: any): void;
    setVirtualRowCount(rowCount: number, maxRowFound?: boolean): void;
    forEachNodeDeep(callback: (rowNode: RowNode, index: number) => void, sequence: NumberSequence): void;
    forEachBlockInOrder(callback: (block: T, id: number) => void): void;
    protected forEachBlockInReverseOrder(callback: (block: T, id: number) => void): void;
    private forEachBlockId(ids, callback);
    protected getBlockIdsSorted(): number[];
    protected getBlock(blockId: string | number): T;
    protected setBlock(id: number, block: T): void;
    protected destroyBlock(block: T): void;
    protected onCacheUpdated(): void;
    purgeCache(): void;
    getRowNodesInRange(firstInRange: RowNode, lastInRange: RowNode): RowNode[];
}
}
declare module 'ag-grid/dist/lib/rowModels/cache/rowNodeCache' {
export * from '~ag-grid/dist/lib/rowModels/cache/rowNodeCache';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowModels/iDatasource.d.ts
declare module '~ag-grid/dist/lib/rowModels/iDatasource' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
/** Datasource used by both PaginationController and InfiniteRowModel */
export interface IDatasource {
    /** If you know up front how many rows are in the dataset, set it here. Otherwise leave blank.*/
    rowCount?: number;
    /** Callback the grid calls that you implement to fetch rows from the server. See below for params.*/
    getRows(params: IGetRowsParams): void;
    destroy?(): void;
}
/** Params for the above IDatasource.getRows() */
export interface IGetRowsParams {
    /** The first row index to get. */
    startRow: number;
    /** The first row index to NOT get. */
    endRow: number;
    /** Callback to call for the result when successful. */
    successCallback(rowsThisBlock: any[], lastRow?: number): void;
    /** Callback to call for the result when successful. */
    failCallback(): void;
    /** If doing server side sorting, contains the sort model */
    sortModel: any;
    /** If doing server side filtering, contains the filter model */
    filterModel: any;
    /** The grid context object */
    context: any;
}
}
declare module 'ag-grid/dist/lib/rowModels/iDatasource' {
export * from '~ag-grid/dist/lib/rowModels/iDatasource';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/styling/stylingService.d.ts
declare module '~ag-grid/dist/lib/styling/stylingService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { CellClassParams, ColDef } from '~ag-grid/dist/lib/entities/colDef';
export class StylingService {
    private expressionService;
    processAllCellClasses(colDef: ColDef, params: any, onApplicableClass: (className: string) => void, onNotApplicableClass?: (className: string) => void): void;
    processClassRules(classRules: {
        [cssClassName: string]: (Function | string);
    }, params: CellClassParams, onApplicableClass: (className: string) => void, onNotApplicableClass?: (className: string) => void): void;
    processStaticCellClasses(colDef: ColDef, params: CellClassParams, onApplicableClass: (className: string) => void): void;
}
}
declare module 'ag-grid/dist/lib/styling/stylingService' {
export * from '~ag-grid/dist/lib/styling/stylingService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/widgets/agCheckbox.d.ts
declare module '~ag-grid/dist/lib/widgets/agCheckbox' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { AgEvent } from '~ag-grid/dist/lib/events';
export interface ChangeEvent extends AgEvent {
    selected: boolean;
}
export class AgCheckbox extends Component {
    static EVENT_CHANGED: string;
    private static TEMPLATE;
    private gridOptionsWrapper;
    private eChecked;
    private eUnchecked;
    private eIndeterminate;
    private eLabel;
    private selected;
    private readOnly;
    private passive;
    private props;
    constructor();
    private preConstruct();
    private postConstruct();
    private loadIcons();
    private onClick(event);
    getNextValue(): boolean;
    setPassive(passive: boolean): void;
    setReadOnly(readOnly: boolean): void;
    isReadOnly(): boolean;
    isSelected(): boolean;
    toggle(): void;
    setSelected(selected: boolean): void;
    private updateIcons();
}
}
declare module 'ag-grid/dist/lib/widgets/agCheckbox' {
export * from '~ag-grid/dist/lib/widgets/agCheckbox';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/widgets/component.d.ts
declare module '~ag-grid/dist/lib/widgets/component' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Context } from '~ag-grid/dist/lib/context/context';
import { BeanStub } from '~ag-grid/dist/lib/context/beanStub';
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
import { AgEvent } from '~ag-grid/dist/lib/events';
export interface VisibleChangedEvent extends AgEvent {
    visible: boolean;
}
export class Component extends BeanStub implements IComponent<any> {
    static EVENT_VISIBLE_CHANGED: string;
    private eGui;
    private childComponents;
    private annotatedEventListeners;
    private visible;
    private compId;
    constructor(template?: string);
    getCompId(): number;
    instantiate(context: Context): void;
    private instantiateRecurse(parentNode, context);
    private getAttrLists(child);
    private addEventListenersToElement(attrLists, element);
    private addEventListenersToComponent(attrLists, component);
    private addEventListenerCommon(attrLists, callback);
    private createChildAttributes(attrLists, child);
    private copyAttributesFromNode(attrLists, childNode);
    private swapComponentForNode(newComponent, parentNode, childNode);
    private swapInComponentForQuerySelectors(newComponent, childNode);
    setTemplate(template: string): void;
    setTemplateFromElement(element: HTMLElement): void;
    protected wireQuerySelectors(): void;
    private addAnnotatedEventListeners();
    private getAgComponentMetaData(key);
    private removeAnnotatedEventListeners();
    getGui(): HTMLElement;
    protected setGui(eGui: HTMLElement): void;
    protected queryForHtmlElement(cssSelector: string): HTMLElement;
    protected queryForHtmlInputElement(cssSelector: string): HTMLInputElement;
    appendChild(newChild: Node | IComponent<any>): void;
    addFeature(context: Context, feature: BeanStub): void;
    isVisible(): boolean;
    setVisible(visible: boolean): void;
    addOrRemoveCssClass(className: string, addOrRemove: boolean): void;
    destroy(): void;
    addGuiEventListener(event: string, listener: (event: any) => void): void;
    addCssClass(className: string): void;
    removeCssClass(className: string): void;
    getAttribute(key: string): string;
    getRefElement(refName: string): HTMLElement;
}
}
declare module 'ag-grid/dist/lib/widgets/component' {
export * from '~ag-grid/dist/lib/widgets/component';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/widgets/popupService.d.ts
declare module '~ag-grid/dist/lib/widgets/popupService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { Column } from '~ag-grid/dist/lib/entities/column';
export class PopupService {
    private gridCore;
    private gridOptionsWrapper;
    private environment;
    private activePopupElements;
    private getPopupParent();
    positionPopupForMenu(params: {
        eventSource: any;
        ePopup: HTMLElement;
    }): void;
    positionPopupUnderMouseEvent(params: {
        rowNode?: RowNode;
        column?: Column;
        type: string;
        mouseEvent: MouseEvent | Touch;
        ePopup: HTMLElement;
    }): void;
    positionPopupUnderComponent(params: {
        type: string;
        eventSource: HTMLElement;
        ePopup: HTMLElement;
        column?: Column;
        rowNode?: RowNode;
        minWidth?: number;
        nudgeX?: number;
        nudgeY?: number;
        keepWithinBounds?: boolean;
    }): void;
    private callPostProcessPopup(ePopup, eventSource, mouseEvent, type, column, rowNode);
    positionPopupOverComponent(params: {
        type: string;
        eventSource: HTMLElement;
        ePopup: HTMLElement;
        column: Column;
        rowNode: RowNode;
        minWidth?: number;
        nudgeX?: number;
        nudgeY?: number;
        keepWithinBounds?: boolean;
    }): void;
    private positionPopup(params);
    private keepYWithinBounds(params, y);
    private keepXWithinBounds(params, x);
    addAsModalPopup(eChild: any, closeOnEsc: boolean, closedCallback?: () => void, click?: MouseEvent | Touch): (event?: any) => void;
    private isEventFromCurrentPopup(mouseEvent, touchEvent, eChild);
    private isEventSameChainAsOriginalEvent(originalClick, mouseEvent, touchEvent);
}
}
declare module 'ag-grid/dist/lib/widgets/popupService' {
export * from '~ag-grid/dist/lib/widgets/popupService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/widgets/touchListener.d.ts
declare module '~ag-grid/dist/lib/widgets/touchListener' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IEventEmitter } from '~ag-grid/dist/lib/interfaces/iEventEmitter';
import { AgEvent } from '~ag-grid/dist/lib/events';
export interface TapEvent extends AgEvent {
    touchStart: Touch;
}
export interface LongTapEvent extends AgEvent {
    touchStart: Touch;
    touchEvent: TouchEvent;
}
export class TouchListener implements IEventEmitter {
    static EVENT_TAP: string;
    static EVENT_DOUBLE_TAP: string;
    static EVENT_LONG_TAP: string;
    private static DOUBLE_TAP_MILLIS;
    private eElement;
    private destroyFuncs;
    private moved;
    private touching;
    private touchStart;
    private lastTapTime;
    private eventService;
    private preventMouseClick;
    constructor(eElement: HTMLElement, preventMouseClick?: boolean);
    private getActiveTouch(touchList);
    addEventListener(eventType: string, listener: Function): void;
    removeEventListener(eventType: string, listener: Function): void;
    private onTouchStart(touchEvent);
    private onTouchMove(touchEvent);
    private onTouchEnd(touchEvent);
    private checkForDoubleTap();
    destroy(): void;
}
}
declare module 'ag-grid/dist/lib/widgets/touchListener' {
export * from '~ag-grid/dist/lib/widgets/touchListener';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iRangeController.d.ts
declare module '~ag-grid/dist/lib/interfaces/iRangeController' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { GridCell } from '~ag-grid/dist/lib/entities/gridCell';
export interface IRangeController {
    clearSelection(): void;
    getCellRangeCount(cell: GridCell): number;
    isCellInAnyRange(cell: GridCell): boolean;
    onDragStart(mouseEvent: MouseEvent): void;
    onDragStop(): void;
    onDragging(mouseEvent: MouseEvent): void;
    getCellRanges(): RangeSelection[];
    setRangeToCell(cell: GridCell): void;
    setRange(rangeSelection: AddRangeSelectionParams): void;
    addRange(rangeSelection: AddRangeSelectionParams): void;
    extendRangeInDirection(cell: GridCell, key: number): boolean;
    extendRangeToCell(cell: GridCell): void;
}
export interface RangeSelection {
    start: GridCell;
    end: GridCell;
    columns: Column[];
}
export interface AddRangeSelectionParams {
    rowStart: number;
    floatingStart: string;
    rowEnd: number;
    floatingEnd: string;
    columnStart: string | Column;
    columnEnd: string | Column;
}
}
declare module 'ag-grid/dist/lib/interfaces/iRangeController' {
export * from '~ag-grid/dist/lib/interfaces/iRangeController';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/baseFrameworkFactory.d.ts
declare module '~ag-grid/dist/lib/baseFrameworkFactory' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ICellRendererFunc, ICellRendererComp } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
import { ColDef } from '~ag-grid/dist/lib/entities/colDef';
import { GridOptions } from '~ag-grid/dist/lib/entities/gridOptions';
import { ICellEditorComp } from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
import { IFilterComp } from '~ag-grid/dist/lib/interfaces/iFilter';
import { IFrameworkFactory } from '~ag-grid/dist/lib/interfaces/iFrameworkFactory';
import { IDateComp } from '~ag-grid/dist/lib/rendering/dateComponent';
/** The base frameworks, eg React & Angular 2, override this bean with implementations specific to their requirement. */
export class BaseFrameworkFactory implements IFrameworkFactory {
    dateComponent(gridOptions: GridOptions): {
        new (): IDateComp;
    };
    colDefFloatingCellRenderer(colDef: ColDef): {
        new (): ICellRendererComp;
    } | ICellRendererFunc | string;
    colDefCellRenderer(colDef: ColDef): {
        new (): ICellRendererComp;
    } | ICellRendererFunc | string;
    colDefCellEditor(colDef: ColDef): {
        new (): ICellEditorComp;
    } | string;
    colDefFilter(colDef: ColDef): {
        new (): IFilterComp;
    } | string;
    gridOptionsFullWidthCellRenderer(gridOptions: GridOptions): {
        new (): ICellRendererComp;
    } | ICellRendererFunc | string;
    gridOptionsGroupRowRenderer(gridOptions: GridOptions): {
        new (): ICellRendererComp;
    } | ICellRendererFunc | string;
    gridOptionsGroupRowInnerRenderer(gridOptions: GridOptions): {
        new (): ICellRendererComp;
    } | ICellRendererFunc | string;
    setTimeout(action: any, timeout?: any): void;
}
}
declare module 'ag-grid/dist/lib/baseFrameworkFactory' {
export * from '~ag-grid/dist/lib/baseFrameworkFactory';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/cellNavigationService.d.ts
declare module '~ag-grid/dist/lib/cellNavigationService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { GridRow } from '~ag-grid/dist/lib/entities/gridRow';
import { GridCell } from '~ag-grid/dist/lib/entities/gridCell';
export class CellNavigationService {
    private columnController;
    private rowModel;
    private pinnedRowModel;
    private gridOptionsWrapper;
    getNextCellToFocus(key: any, lastCellToFocus: GridCell): GridCell;
    private isCellGoodToFocusOn(gridCell);
    private getCellToLeft(lastCell);
    private getCellToRight(lastCell);
    getRowBelow(lastRow: GridRow): GridRow;
    private getCellBelow(lastCell);
    private isLastRowInContainer(gridRow);
    private getRowAbove(lastRow);
    private getCellAbove(lastCell);
    private getLastBodyCell();
    private getLastFloatingTopRow();
    getNextTabbedCell(gridCell: GridCell, backwards: boolean): GridCell;
    getNextTabbedCellForwards(gridCell: GridCell): GridCell;
    getNextTabbedCellBackwards(gridCell: GridCell): GridCell;
}
}
declare module 'ag-grid/dist/lib/cellNavigationService' {
export * from '~ag-grid/dist/lib/cellNavigationService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/alignedGridsService.d.ts
declare module '~ag-grid/dist/lib/alignedGridsService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { AgEvent, ColumnEvent } from '~ag-grid/dist/lib/events';
import { Column } from '~ag-grid/dist/lib/entities/column';
export class AlignedGridsService {
    private instanceId;
    private gridOptionsWrapper;
    private columnController;
    private gridPanel;
    private eventService;
    private logger;
    private consuming;
    private setBeans(loggerFactory);
    init(): void;
    private fireEvent(callback);
    private onEvent(callback);
    private fireColumnEvent(event);
    private fireScrollEvent(event);
    private onScrollEvent(event);
    getMasterColumns(event: ColumnEvent): Column[];
    getColumnIds(event: ColumnEvent): string[];
    onColumnEvent(event: AgEvent): void;
    private processGroupOpenedEvent(groupOpenedEvent);
    private processColumnEvent(colEvent);
}
}
declare module 'ag-grid/dist/lib/alignedGridsService' {
export * from '~ag-grid/dist/lib/alignedGridsService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/constants.d.ts
declare module '~ag-grid/dist/lib/constants' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class Constants {
    static STEP_EVERYTHING: number;
    static STEP_FILTER: number;
    static STEP_SORT: number;
    static STEP_MAP: number;
    static STEP_AGGREGATE: number;
    static STEP_PIVOT: number;
    static ROW_BUFFER_SIZE: number;
    static LAYOUT_INTERVAL: number;
    static BATCH_WAIT_MILLIS: number;
    static EXPORT_TYPE_DRAG_COPY: string;
    static EXPORT_TYPE_CLIPBOARD: string;
    static EXPORT_TYPE_EXCEL: string;
    static EXPORT_TYPE_CSV: string;
    static KEY_BACKSPACE: number;
    static KEY_TAB: number;
    static KEY_NEW_LINE: number;
    static KEY_ENTER: number;
    static KEY_SHIFT: number;
    static KEY_ESCAPE: number;
    static KEY_SPACE: number;
    static KEY_LEFT: number;
    static KEY_UP: number;
    static KEY_RIGHT: number;
    static KEY_DOWN: number;
    static KEY_DELETE: number;
    static KEY_A: number;
    static KEY_C: number;
    static KEY_V: number;
    static KEY_D: number;
    static KEY_F2: number;
    static KEY_PAGE_UP: number;
    static KEY_PAGE_DOWN: number;
    static KEY_PAGE_HOME: number;
    static KEY_PAGE_END: number;
    static ROW_MODEL_TYPE_INFINITE: string;
    static ROW_MODEL_TYPE_VIEWPORT: string;
    static ROW_MODEL_TYPE_IN_MEMORY: string;
    static ROW_MODEL_TYPE_ENTERPRISE: string;
    static DEPRECATED_ROW_MODEL_TYPE_NORMAL: string;
    static ALWAYS: string;
    static ONLY_WHEN_GROUPING: string;
    static PINNED_TOP: string;
    static PINNED_BOTTOM: string;
}
}
declare module 'ag-grid/dist/lib/constants' {
export * from '~ag-grid/dist/lib/constants';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/csvCreator.d.ts
declare module '~ag-grid/dist/lib/csvCreator' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { GridSerializer, RowAccumulator, BaseGridSerializingSession, RowSpanningAccumulator, GridSerializingSession } from '~ag-grid/dist/lib/gridSerializer';
import { Downloader } from '~ag-grid/dist/lib/downloader';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { ColumnController } from '~ag-grid/dist/lib/columnController/columnController';
import { ValueService } from '~ag-grid/dist/lib/valueService/valueService';
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
import { CsvExportParams, ExportParams, ProcessCellForExportParams, ProcessHeaderForExportParams } from '~ag-grid/dist/lib/exportParams';
export class CsvSerializingSession extends BaseGridSerializingSession<string> {
    private suppressQuotes;
    private columnSeparator;
    private result;
    private lineOpened;
    constructor(columnController: ColumnController, valueService: ValueService, gridOptionsWrapper: GridOptionsWrapper, processCellCallback: (params: ProcessCellForExportParams) => string, processHeaderCallback: (params: ProcessHeaderForExportParams) => string, suppressQuotes: boolean, columnSeparator: string);
    prepare(columnsToExport: Column[]): void;
    addCustomHeader(customHeader: string): void;
    addCustomFooter(customFooter: string): void;
    onNewHeaderGroupingRow(): RowSpanningAccumulator;
    private onNewHeaderGroupingRowColumn(header, index, span);
    onNewHeaderRow(): RowAccumulator;
    private onNewHeaderRowColumn(column, index, node?);
    onNewBodyRow(): RowAccumulator;
    private onNewBodyRowColumn(column, index, node?);
    private putInQuotes(value, suppressQuotes);
    parse(): string;
}
export interface BaseCreatorBeans {
    downloader: Downloader;
    gridSerializer: GridSerializer;
    gridOptionsWrapper: GridOptionsWrapper;
}
export abstract class BaseCreator<T, S extends GridSerializingSession<T>, P extends ExportParams<T>> {
    private beans;
    protected setBeans(beans: BaseCreatorBeans): void;
    export(userParams?: P): string;
    getData(params: P): string;
    private getMergedParamsAndData(userParams);
    private mergeDefaultParams(userParams);
    abstract createSerializingSession(params?: P): S;
    abstract getMimeType(): string;
    abstract getDefaultFileName(): string;
    abstract getDefaultFileExtension(): string;
    abstract isExportSuppressed(): boolean;
}
export class CsvCreator extends BaseCreator<string, CsvSerializingSession, CsvExportParams> {
    private columnController;
    private valueService;
    private downloader;
    private gridSerializer;
    gridOptionsWrapper: GridOptionsWrapper;
    postConstruct(): void;
    exportDataAsCsv(params?: CsvExportParams): string;
    getDataAsCsv(params?: CsvExportParams): string;
    getMimeType(): string;
    getDefaultFileName(): string;
    getDefaultFileExtension(): string;
    createSerializingSession(params?: CsvExportParams): CsvSerializingSession;
    isExportSuppressed(): boolean;
}
}
declare module 'ag-grid/dist/lib/csvCreator' {
export * from '~ag-grid/dist/lib/csvCreator';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/downloader.d.ts
declare module '~ag-grid/dist/lib/downloader' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class Downloader {
    download(fileName: string, content: string, mimeType: string): void;
}
}
declare module 'ag-grid/dist/lib/downloader' {
export * from '~ag-grid/dist/lib/downloader';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/grid.d.ts
declare module '~ag-grid/dist/lib/grid' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { GridOptions } from '~ag-grid/dist/lib/entities/gridOptions';
import { IFrameworkFactory } from '~ag-grid/dist/lib/interfaces/iFrameworkFactory';
export interface GridParams {
    globalEventListener?: Function;
    $scope?: any;
    $compile?: any;
    quickFilterOnScope?: any;
    frameworkFactory?: IFrameworkFactory;
    seedBeanInstances?: {
        [key: string]: any;
    };
}
export class Grid {
    private context;
    private static enterpriseBeans;
    private static frameworkBeans;
    private static enterpriseComponents;
    private static RowModelClasses;
    static setEnterpriseBeans(enterpriseBeans: any[], rowModelClasses: any): void;
    static setEnterpriseComponents(components: any[]): void;
    static setFrameworkBeans(frameworkBeans: any[]): void;
    constructor(eGridDiv: HTMLElement, gridOptions: GridOptions, params?: GridParams);
    private setColumnsAndData();
    private dispatchGridReadyEvent(gridOptions);
    private getRowModelClass(gridOptions);
    destroy(): void;
}
}
declare module 'ag-grid/dist/lib/grid' {
export * from '~ag-grid/dist/lib/grid';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/gridApi.d.ts
declare module '~ag-grid/dist/lib/gridApi' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
import { ColDef, ColGroupDef, IAggFunc } from '~ag-grid/dist/lib/entities/colDef';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { IRowModel } from '~ag-grid/dist/lib/interfaces/iRowModel';
import { AddRangeSelectionParams, RangeSelection } from '~ag-grid/dist/lib/interfaces/iRangeController';
import { GridCell, GridCellDef } from '~ag-grid/dist/lib/entities/gridCell';
import { IViewportDatasource } from '~ag-grid/dist/lib/interfaces/iViewportDatasource';
import { IFilterComp } from '~ag-grid/dist/lib/interfaces/iFilter';
import { CsvExportParams } from '~ag-grid/dist/lib/exportParams';
import { ExcelExportParams } from '~ag-grid/dist/lib/interfaces/iExcelCreator';
import { IDatasource } from '~ag-grid/dist/lib/rowModels/iDatasource';
import { IEnterpriseDatasource } from '~ag-grid/dist/lib/interfaces/iEnterpriseDatasource';
import { RowDataTransaction, RowNodeTransaction } from '~ag-grid/dist/lib/rowModels/inMemory/inMemoryRowModel';
import { AlignedGridsService } from '~ag-grid/dist/lib/alignedGridsService';
import { AgEvent, ColumnEventType } from '~ag-grid/dist/lib/events';
import { ICellRendererComp } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
import { ICellEditorComp } from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
export interface StartEditingCellParams {
    rowIndex: number;
    colKey: string | Column;
    rowPinned?: string;
    keyPress?: number;
    charPress?: string;
}
export interface GetCellsParams {
    rowNodes?: RowNode[];
    columns?: (string | Column)[];
}
export interface RefreshCellsParams extends GetCellsParams {
    force?: boolean;
}
export interface FlashCellsParams extends GetCellsParams {
}
export interface GetCellRendererInstancesParams extends GetCellsParams {
}
export interface GetCellEditorInstancesParams extends GetCellsParams {
}
export interface RedrawRowsParams {
    rowNodes?: RowNode[];
}
export interface DetailGridInfo {
    id: string;
    api: GridApi;
    columnApi: ColumnApi;
}
export class GridApi {
    private immutableService;
    private csvCreator;
    private excelCreator;
    private gridCore;
    private rowRenderer;
    private headerRenderer;
    private filterManager;
    private columnController;
    private selectionController;
    private gridOptionsWrapper;
    private gridPanel;
    private valueService;
    private alignedGridsService;
    private eventService;
    private pinnedRowModel;
    private context;
    private rowModel;
    private sortController;
    private paginationProxy;
    private focusedCellController;
    private rangeController;
    private clipboardService;
    private aggFuncService;
    private menuFactory;
    private contextMenuFactory;
    private cellRendererFactory;
    private cellEditorFactory;
    private valueCache;
    private toolPanelComp;
    private inMemoryRowModel;
    private infinitePageRowModel;
    private enterpriseRowModel;
    private detailGridInfoMap;
    private init();
    /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */
    __getAlignedGridService(): AlignedGridsService;
    addDetailGridInfo(id: string, gridInfo: DetailGridInfo): void;
    removeDetailGridInfo(id: string): void;
    getDetailGridInfo(id: string): DetailGridInfo;
    forEachDetailGridInfo(callback: (gridInfo: DetailGridInfo, index: number) => void): void;
    getDataAsCsv(params?: CsvExportParams): string;
    exportDataAsCsv(params?: CsvExportParams): void;
    getDataAsExcel(params?: ExcelExportParams): string;
    exportDataAsExcel(params?: ExcelExportParams): void;
    setEnterpriseDatasource(datasource: IEnterpriseDatasource): void;
    setDatasource(datasource: IDatasource): void;
    setViewportDatasource(viewportDatasource: IViewportDatasource): void;
    setRowData(rowData: any[]): void;
    setFloatingTopRowData(rows: any[]): void;
    setFloatingBottomRowData(rows: any[]): void;
    getFloatingTopRowCount(): number;
    getFloatingBottomRowCount(): number;
    getFloatingTopRow(index: number): RowNode;
    getFloatingBottomRow(index: number): RowNode;
    setPinnedTopRowData(rows: any[]): void;
    setPinnedBottomRowData(rows: any[]): void;
    getPinnedTopRowCount(): number;
    getPinnedBottomRowCount(): number;
    getPinnedTopRow(index: number): RowNode;
    getPinnedBottomRow(index: number): RowNode;
    setColumnDefs(colDefs: (ColDef | ColGroupDef)[], source?: ColumnEventType): void;
    expireValueCache(): void;
    getVerticalPixelRange(): any;
    refreshToolPanel(): void;
    refreshCells(params?: RefreshCellsParams): void;
    flashCells(params?: FlashCellsParams): void;
    redrawRows(params?: RedrawRowsParams): void;
    timeFullRedraw(count?: number): void;
    refreshView(): void;
    refreshRows(rowNodes: RowNode[]): void;
    rowDataChanged(rows: any): void;
    softRefreshView(): void;
    refreshGroupRows(): void;
    setFunctionsReadOnly(readOnly: boolean): void;
    refreshHeader(): void;
    isAnyFilterPresent(): boolean;
    isAdvancedFilterPresent(): boolean;
    isQuickFilterPresent(): boolean;
    getModel(): IRowModel;
    onGroupExpandedOrCollapsed(deprecated_refreshFromIndex?: any): void;
    refreshInMemoryRowModel(step?: string): any;
    getRowNode(id: string): RowNode;
    expandAll(): void;
    collapseAll(): void;
    addVirtualRowListener(eventName: string, rowIndex: number, callback: Function): void;
    addRenderedRowListener(eventName: string, rowIndex: number, callback: Function): void;
    setQuickFilter(newFilter: any): void;
    selectIndex(index: any, tryMulti: any, suppressEvents: any): void;
    deselectIndex(index: number, suppressEvents?: boolean): void;
    selectNode(node: RowNode, tryMulti?: boolean, suppressEvents?: boolean): void;
    deselectNode(node: RowNode, suppressEvents?: boolean): void;
    selectAll(): void;
    deselectAll(): void;
    selectAllFiltered(): void;
    deselectAllFiltered(): void;
    recomputeAggregates(): void;
    sizeColumnsToFit(): void;
    showLoadingOverlay(): void;
    showNoRowsOverlay(): void;
    hideOverlay(): void;
    isNodeSelected(node: any): any;
    getSelectedNodesById(): {
        [nodeId: number]: RowNode;
    };
    getSelectedNodes(): RowNode[];
    getSelectedRows(): any[];
    getBestCostNodeSelection(): any;
    getRenderedNodes(): RowNode[];
    ensureColIndexVisible(index: any): void;
    ensureColumnVisible(key: string | Column): void;
    ensureIndexVisible(index: any, position?: string): void;
    ensureNodeVisible(comparator: any, position?: string): void;
    forEachLeafNode(callback: (rowNode: RowNode) => void): void;
    forEachNode(callback: (rowNode: RowNode) => void): void;
    forEachNodeAfterFilter(callback: (rowNode: RowNode) => void): void;
    forEachNodeAfterFilterAndSort(callback: (rowNode: RowNode) => void): void;
    getFilterApiForColDef(colDef: any): any;
    getFilterInstance(key: string | Column): IFilterComp;
    getFilterApi(key: string | Column): IFilterComp;
    destroyFilter(key: string | Column): void;
    getColumnDef(key: string | Column): ColDef;
    onFilterChanged(): void;
    onSortChanged(): void;
    setSortModel(sortModel: any, source?: ColumnEventType): void;
    getSortModel(): {
        colId: string;
        sort: string;
    }[];
    setFilterModel(model: any): void;
    getFilterModel(): any;
    getFocusedCell(): GridCell;
    clearFocusedCell(): void;
    setFocusedCell(rowIndex: number, colKey: string | Column, floating?: string): void;
    setSuppressRowDrag(value: boolean): void;
    setHeaderHeight(headerHeight: number): void;
    setGroupHeaderHeight(headerHeight: number): void;
    setFloatingFiltersHeight(headerHeight: number): void;
    setPivotGroupHeaderHeight(headerHeight: number): void;
    setPivotHeaderHeight(headerHeight: number): void;
    showToolPanel(show: any): void;
    isToolPanelShowing(): boolean;
    doLayout(): void;
    resetRowHeights(): void;
    setGroupRemoveSingleChildren(value: boolean): void;
    setGroupRemoveLowestSingleChildren(value: boolean): void;
    onRowHeightChanged(): void;
    getValue(colKey: string | Column, rowNode: RowNode): any;
    addEventListener(eventType: string, listener: Function): void;
    addGlobalListener(listener: Function): void;
    removeEventListener(eventType: string, listener: Function): void;
    removeGlobalListener(listener: Function): void;
    dispatchEvent(event: AgEvent): void;
    destroy(): void;
    resetQuickFilter(): void;
    getRangeSelections(): RangeSelection[];
    camelCaseToHumanReadable(camelCase: string): string;
    addRangeSelection(rangeSelection: AddRangeSelectionParams): void;
    clearRangeSelection(): void;
    copySelectedRowsToClipboard(includeHeader: boolean, columnKeys?: (string | Column)[]): void;
    copySelectedRangeToClipboard(includeHeader: boolean): void;
    copySelectedRangeDown(): void;
    showColumnMenuAfterButtonClick(colKey: string | Column, buttonElement: HTMLElement): void;
    showColumnMenuAfterMouseClick(colKey: string | Column, mouseEvent: MouseEvent | Touch): void;
    hidePopupMenu(): void;
    setPopupParent(ePopupParent: HTMLElement): void;
    tabToNextCell(): boolean;
    tabToPreviousCell(): boolean;
    getCellRendererInstances(params?: GetCellRendererInstancesParams): ICellRendererComp[];
    getCellEditorInstances(params?: GetCellEditorInstancesParams): ICellEditorComp[];
    getEditingCells(): GridCellDef[];
    stopEditing(cancel?: boolean): void;
    startEditingCell(params: StartEditingCellParams): void;
    addAggFunc(key: string, aggFunc: IAggFunc): void;
    addAggFuncs(aggFuncs: {
        [key: string]: IAggFunc;
    }): void;
    clearAggFuncs(): void;
    updateRowData(rowDataTransaction: RowDataTransaction): RowNodeTransaction;
    batchUpdateRowData(rowDataTransaction: RowDataTransaction, callback?: (res: RowNodeTransaction) => void): void;
    insertItemsAtIndex(index: number, items: any[], skipRefresh?: boolean): void;
    removeItems(rowNodes: RowNode[], skipRefresh?: boolean): void;
    addItems(items: any[], skipRefresh?: boolean): void;
    refreshVirtualPageCache(): void;
    refreshInfinitePageCache(): void;
    refreshInfiniteCache(): void;
    purgeVirtualPageCache(): void;
    purgeInfinitePageCache(): void;
    purgeInfiniteCache(): void;
    purgeEnterpriseCache(route?: string[]): void;
    getVirtualRowCount(): number;
    getInfiniteRowCount(): number;
    isMaxRowFound(): boolean;
    setVirtualRowCount(rowCount: number, maxRowFound?: boolean): void;
    setInfiniteRowCount(rowCount: number, maxRowFound?: boolean): void;
    getVirtualPageState(): any;
    getInfinitePageState(): any;
    getCacheBlockState(): any;
    checkGridSize(): void;
    getFirstRenderedRow(): number;
    getFirstDisplayedRow(): number;
    getLastRenderedRow(): number;
    getLastDisplayedRow(): number;
    getDisplayedRowAtIndex(index: number): RowNode;
    getDisplayedRowCount(): number;
    paginationIsLastPageFound(): boolean;
    paginationGetPageSize(): number;
    paginationSetPageSize(size: number): void;
    paginationGetCurrentPage(): number;
    paginationGetTotalPages(): number;
    paginationGetRowCount(): number;
    paginationGoToNextPage(): void;
    paginationGoToPreviousPage(): void;
    paginationGoToFirstPage(): void;
    paginationGoToLastPage(): void;
    paginationGoToPage(page: number): void;
}
}
declare module 'ag-grid/dist/lib/gridApi' {
export * from '~ag-grid/dist/lib/gridApi';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/eventKeys.d.ts
declare module '~ag-grid/dist/lib/eventKeys' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class Events {
    /** Everything has changed with the columns. Either complete new set of columns set, or user called setState()*/
    static EVENT_COLUMN_EVERYTHING_CHANGED: string;
    /** User has set in new columns. */
    static EVENT_NEW_COLUMNS_LOADED: string;
    /** The pivot mode flag was changed */
    static EVENT_COLUMN_PIVOT_MODE_CHANGED: string;
    /** A row group column was added, removed or order changed. */
    static EVENT_COLUMN_ROW_GROUP_CHANGED: string;
    /** A pivot column was added, removed or order changed. */
    static EVENT_COLUMN_PIVOT_CHANGED: string;
    /** The list of grid columns has changed. */
    static EVENT_GRID_COLUMNS_CHANGED: string;
    /** A value column was added, removed or agg function was changed. */
    static EVENT_COLUMN_VALUE_CHANGED: string;
    /** A column was moved */
    static EVENT_COLUMN_MOVED: string;
    /** One or more columns was shown / hidden */
    static EVENT_COLUMN_VISIBLE: string;
    /** One or more columns was pinned / unpinned*/
    static EVENT_COLUMN_PINNED: string;
    /** A column group was opened / closed */
    static EVENT_COLUMN_GROUP_OPENED: string;
    /** One or more columns was resized. If just one, the column in the event is set. */
    static EVENT_COLUMN_RESIZED: string;
    /** The list of displayed columns has changed, can result from columns open / close, column move, pivot, group, etc */
    static EVENT_DISPLAYED_COLUMNS_CHANGED: string;
    /** The list of virtual columns has changed, results from viewport changing */
    static EVENT_VIRTUAL_COLUMNS_CHANGED: string;
    /** A row group was opened / closed */
    static EVENT_ROW_GROUP_OPENED: string;
    /** The client has set new data into the grid */
    static EVENT_ROW_DATA_CHANGED: string;
    /** The client has updated data for the grid */
    static EVENT_ROW_DATA_UPDATED: string;
    /** The client has set new floating data into the grid */
    static EVENT_PINNED_ROW_DATA_CHANGED: string;
    /** Range selection has changed */
    static EVENT_RANGE_SELECTION_CHANGED: string;
    /** For when the tool panel is shown / hidden */
    static EVENT_TOOL_PANEL_VISIBLE_CHANGED: string;
    /** Model was updated - grid updates the drawn rows when this happens */
    static EVENT_MODEL_UPDATED: string;
    static EVENT_CELL_CLICKED: string;
    static EVENT_CELL_DOUBLE_CLICKED: string;
    static EVENT_CELL_MOUSE_DOWN: string;
    static EVENT_CELL_CONTEXT_MENU: string;
    static EVENT_CELL_VALUE_CHANGED: string;
    static EVENT_ROW_VALUE_CHANGED: string;
    static EVENT_CELL_FOCUSED: string;
    static EVENT_ROW_SELECTED: string;
    static EVENT_SELECTION_CHANGED: string;
    static EVENT_CELL_MOUSE_OVER: string;
    static EVENT_CELL_MOUSE_OUT: string;
    /** 2 events for filtering. The grid LISTENS for filterChanged and afterFilterChanged */
    static EVENT_FILTER_CHANGED: string;
    /** Filter was change but not applied. Only useful if apply buttons are used in filters. */
    static EVENT_FILTER_MODIFIED: string;
    static EVENT_SORT_CHANGED: string;
    /** A row was removed from the dom, for any reason. Use to clean up resources (if any) used by the row. */
    static EVENT_VIRTUAL_ROW_REMOVED: string;
    static EVENT_ROW_CLICKED: string;
    static EVENT_ROW_DOUBLE_CLICKED: string;
    /** Gets called once after the grid has finished initialising. */
    static EVENT_GRID_READY: string;
    /** Width of height of the main grid div has changed. Grid listens for this and does layout of grid if it's
     * changed, so always filling the space it was given. */
    static EVENT_GRID_SIZE_CHANGED: string;
    /** The indexes of the rows rendered has changed, eg user has scrolled to a new vertical position. */
    static EVENT_VIEWPORT_CHANGED: string;
    /** A column drag has started, either resizing a column or moving a column. */
    static EVENT_DRAG_STARTED: string;
    /** A column drag has stopped */
    static EVENT_DRAG_STOPPED: string;
    static EVENT_ROW_EDITING_STARTED: string;
    static EVENT_ROW_EDITING_STOPPED: string;
    static EVENT_CELL_EDITING_STARTED: string;
    static EVENT_CELL_EDITING_STOPPED: string;
    /** Main body of grid has scrolled, either horizontally or vertically */
    static EVENT_BODY_SCROLL: string;
    static EVENT_HEIGHT_SCALE_CHANGED: string;
    /** The displayed page for pagination has changed. For example the data was filtered or sorted,
     * or the user has moved to a different page. */
    static EVENT_PAGINATION_CHANGED: string;
    /** Only used by React, Angular 2+, Web Components, Aurelia and VueJS ag-Grid components
     * (not used if doing plain JavaScript or Angular 1.x). If the grid receives changes due
     * to bound properties, this event fires after the grid has finished processing the change. */
    static EVENT_COMPONENT_STATE_CHANGED: string;
    /** All items from here down are used internally by the grid, not intended for external use. */
    static EVENT_BODY_HEIGHT_CHANGED: string;
    static EVENT_DISPLAYED_COLUMNS_WIDTH_CHANGED: string;
    static EVENT_SCROLL_VISIBILITY_CHANGED: string;
    static EVENT_COLUMN_HOVER_CHANGED: string;
    static EVENT_FLASH_CELLS: string;
    static EVENT_ROW_DRAG_ENTER: string;
    static EVENT_ROW_DRAG_MOVE: string;
    static EVENT_ROW_DRAG_LEAVE: string;
    static EVENT_ROW_DRAG_END: string;
    static EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST: string;
    static EVENT_COLUMN_PIVOT_CHANGE_REQUEST: string;
    static EVENT_COLUMN_VALUE_CHANGE_REQUEST: string;
    static EVENT_COLUMN_AGG_FUNC_CHANGE_REQUEST: string;
}
}
declare module 'ag-grid/dist/lib/eventKeys' {
export * from '~ag-grid/dist/lib/eventKeys';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/events.d.ts
declare module '~ag-grid/dist/lib/events' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { ColDef } from '~ag-grid/dist/lib/entities/colDef';
import { GridApi } from '~ag-grid/dist/lib/gridApi';
import { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
import { OriginalColumnGroup } from '~ag-grid/dist/lib/entities/originalColumnGroup';
export { Events } from '~ag-grid/dist/lib/eventKeys';
export interface ModelUpdatedEvent extends AgGridEvent {
    /** If true, the grid will try and animate the rows to the new positions */
    animate: boolean;
    /** If true, the grid has new data loaded, eg user called setRowData(), otherwise
     * it's the same data but sorted or filtered, in which case this is true, and rows
     * can animate around (eg rowNode id 24 is the same row node as last time). */
    keepRenderedRows: boolean;
    /** If true, then this update was a result of setRowData() getting called. This
     * gets the grid to scroll to the top again. */
    newData: boolean;
    /** True when pagination and a new page is navigated to. */
    newPage: boolean;
}
export interface AgEvent {
    type: string;
}
export interface AgGridEvent extends AgEvent {
    api: GridApi;
    columnApi: ColumnApi;
}
export interface ToolPanelVisibleChanged extends AgGridEvent {
}
export interface ColumnPivotModeChangedEvent extends AgGridEvent {
}
export interface VirtualColumnsChangedEvent extends AgGridEvent {
}
export interface ColumnEverythingChangedEvent extends AgGridEvent {
    source: string;
}
export interface NewColumnsLoadedEvent extends AgGridEvent {
}
export interface GridColumnsChangedEvent extends AgGridEvent {
}
export interface DisplayedColumnsChangedEvent extends AgGridEvent {
}
export interface RowDataChangedEvent extends AgGridEvent {
}
export interface RowDataUpdatedEvent extends AgGridEvent {
}
export interface PinnedRowDataChangedEvent extends AgGridEvent {
}
export interface SelectionChangedEvent extends AgGridEvent {
}
export interface FilterChangedEvent extends AgGridEvent {
}
export interface FilterModifiedEvent extends AgGridEvent {
}
export interface SortChangedEvent extends AgGridEvent {
}
export interface GridReadyEvent extends AgGridEvent {
}
export interface DisplayedColumnsWidthChangedEvent extends AgGridEvent {
}
export interface ColumnHoverChangedEvent extends AgGridEvent {
}
export interface BodyHeightChangedEvent extends AgGridEvent {
}
export interface ComponentStateChangedEvent extends AgGridEvent {
}
export interface DragEvent extends AgGridEvent {
    type: string;
}
export interface DragStartedEvent extends DragEvent {
}
export interface DragStoppedEvent extends DragEvent {
}
export interface RowDragEvent extends AgGridEvent {
    node: RowNode;
    y: number;
    vDirection: string;
    event: MouseEvent;
    overIndex: number;
    overNode: RowNode;
}
export interface RowDragEnterEvent extends RowDragEvent {
}
export interface RowDragEndEvent extends RowDragEvent {
}
export interface RowDragMoveEvent extends RowDragEvent {
}
export interface RowDragLeaveEvent extends RowDragEvent {
}
export interface GridSizeChangedEvent extends AgGridEvent {
    clientWidth: number;
    clientHeight: number;
}
export interface ViewportChangedEvent extends AgGridEvent {
    firstRow: number;
    lastRow: number;
}
export interface RangeSelectionChangedEvent extends AgGridEvent {
    finished: boolean;
    started: boolean;
}
export interface ColumnGroupOpenedEvent extends AgGridEvent {
    columnGroup: OriginalColumnGroup;
}
export interface ItemsAddedEvent extends AgGridEvent {
    items: RowNode[];
}
export interface BodyScrollEvent extends AgGridEvent {
    direction: string;
    left: number;
    top: number;
}
export interface FlashCellsEvent extends AgGridEvent {
    cells: any;
}
export interface PaginationChangedEvent extends AgGridEvent {
    animate: boolean;
    keepRenderedRows: boolean;
    newData: boolean;
    newPage: boolean;
}
export interface CellFocusedEvent extends AgGridEvent {
    rowIndex: number;
    column: Column;
    rowPinned: string;
    forceBrowserFocus: boolean;
    floating: string;
}
/**---------------*/
/** COLUMN EVENTS */
/**---------------*/
export type ColumnEventType = "sizeColumnsToFit" | "autosizeColumns" | "alignedGridChanged" | "filterChanged" | "filterDestroyed" | "gridOptionsChanged" | "gridInitializing" | "toolPanelDragAndDrop" | "toolPanelUi" | "uiColumnMoved" | "uiColumnResized" | "uiColumnDragged" | "uiColumnExpanded" | "uiColumnSorted" | "contextMenu" | "columnMenu" | "rowModelUpdated" | "api";
export interface ColumnEvent extends AgGridEvent {
    column: Column;
    columns: Column[];
    source: ColumnEventType;
}
export interface ColumnResizedEvent extends ColumnEvent {
    finished: boolean;
}
export interface ColumnPivotChangedEvent extends ColumnEvent {
}
export interface ColumnRowGroupChangedEvent extends ColumnEvent {
}
export interface ColumnValueChangedEvent extends ColumnEvent {
}
export interface ColumnMovedEvent extends ColumnEvent {
    toIndex: number;
}
export interface ColumnVisibleEvent extends ColumnEvent {
    visible: boolean;
}
export interface ColumnPinnedEvent extends ColumnEvent {
    pinned: string;
}
/**------------*/
/** ROW EVENTS */
/**------------*/
export interface RowEvent extends AgGridEvent {
    node: RowNode;
    data: any;
    rowIndex: number;
    rowPinned: string;
    context: any;
    event?: Event;
}
export interface RowGroupOpenedEvent extends RowEvent {
}
export interface RowValueChangedEvent extends RowEvent {
}
export interface RowSelectedEvent extends RowEvent {
}
export interface VirtualRowRemovedEvent extends RowEvent {
}
export interface RowClickedEvent extends RowEvent {
}
export interface RowDoubleClickedEvent extends RowEvent {
}
export interface RowEditingStartedEvent extends RowEvent {
}
export interface RowEditingStoppedEvent extends RowEvent {
}
/**------------*/
/** CELL EVENTS */
/**------------*/
export interface CellEvent extends RowEvent {
    column: Column;
    colDef: ColDef;
    value: any;
}
export interface CellClickedEvent extends CellEvent {
}
export interface CellMouseDownEvent extends CellEvent {
}
export interface CellDoubleClickedEvent extends CellEvent {
}
export interface CellMouseOverEvent extends CellEvent {
}
export interface CellMouseOutEvent extends CellEvent {
}
export interface CellContextMenuEvent extends CellEvent {
}
export interface CellEditingStartedEvent extends CellEvent {
}
export interface CellEditingStoppedEvent extends CellEvent {
}
export interface CellValueChangedEvent extends CellEvent {
    oldValue: any;
    newValue: any;
}
export interface ColumnRequestEvent extends AgGridEvent {
    columns: Column[];
}
export interface ColumnRowGroupChangeRequestEvent extends ColumnRequestEvent {
}
export interface ColumnPivotChangeRequestEvent extends ColumnRequestEvent {
}
export interface ColumnValueChangeRequestEvent extends ColumnRequestEvent {
}
export interface ColumnAggFuncChangeRequestEvent extends ColumnRequestEvent {
    aggFunc: any;
}
export interface ScrollVisibilityChangedEvent extends AgGridEvent {
}
}
declare module 'ag-grid/dist/lib/events' {
export * from '~ag-grid/dist/lib/events';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/focusedCellController.d.ts
declare module '~ag-grid/dist/lib/focusedCellController' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { GridCell } from '~ag-grid/dist/lib/entities/gridCell';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export class FocusedCellController {
    private eventService;
    private gridOptionsWrapper;
    private columnController;
    private columnApi;
    private gridApi;
    private focusedCell;
    private init();
    clearFocusedCell(): void;
    getFocusedCell(): GridCell;
    getFocusCellToUseAfterRefresh(): GridCell;
    private getGridCellForDomElement(eBrowserCell);
    setFocusedCell(rowIndex: number, colKey: string | Column, floating: string, forceBrowserFocus?: boolean): void;
    isCellFocused(gridCell: GridCell): boolean;
    isRowNodeFocused(rowNode: RowNode): boolean;
    isAnyCellFocused(): boolean;
    isRowFocused(rowIndex: number, floating: string): boolean;
    private onCellFocused(forceBrowserFocus);
}
}
declare module 'ag-grid/dist/lib/focusedCellController' {
export * from '~ag-grid/dist/lib/focusedCellController';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/functions.d.ts
declare module '~ag-grid/dist/lib/functions' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export function defaultGroupComparator(valueA: any, valueB: any, nodeA: RowNode, nodeB: RowNode, accentedCompare?: boolean): number;
}
declare module 'ag-grid/dist/lib/functions' {
export * from '~ag-grid/dist/lib/functions';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/gridOptionsWrapper.d.ts
declare module '~ag-grid/dist/lib/gridOptionsWrapper' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { GetContextMenuItems, GetMainMenuItems, GetRowNodeIdFunc, GridOptions, IsRowMaster, IsRowSelectable, NavigateToNextCellParams, NodeChildDetails, PaginationNumberFormatterParams, PostProcessPopupParams, TabToNextCellParams } from '~ag-grid/dist/lib/entities/gridOptions';
import { GridApi } from '~ag-grid/dist/lib/gridApi';
import { ColDef, ColGroupDef, IAggFunc } from '~ag-grid/dist/lib/entities/colDef';
import { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
import { IViewportDatasource } from '~ag-grid/dist/lib/interfaces/iViewportDatasource';
import { IDatasource } from '~ag-grid/dist/lib/rowModels/iDatasource';
import { GridCellDef } from '~ag-grid/dist/lib/entities/gridCell';
import { IEnterpriseDatasource } from '~ag-grid/dist/lib/interfaces/iEnterpriseDatasource';
import { BaseExportParams, ProcessCellForExportParams, ProcessHeaderForExportParams } from '~ag-grid/dist/lib/exportParams';
import { AgEvent } from '~ag-grid/dist/lib/events';
export interface PropertyChangedEvent extends AgEvent {
    currentValue: any;
    previousValue: any;
}
export class GridOptionsWrapper {
    private static MIN_COL_WIDTH;
    static PROP_HEADER_HEIGHT: string;
    static PROP_GROUP_REMOVE_SINGLE_CHILDREN: string;
    static PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN: string;
    static PROP_PIVOT_HEADER_HEIGHT: string;
    static PROP_GROUP_HEADER_HEIGHT: string;
    static PROP_PIVOT_GROUP_HEADER_HEIGHT: string;
    static PROP_FLOATING_FILTERS_HEIGHT: string;
    static PROP_SUPPRESS_ROW_DRAG: string;
    static PROP_POPUP_PARENT: string;
    private gridOptions;
    private columnController;
    private eventService;
    private enterprise;
    private frameworkFactory;
    private gridApi;
    private columnApi;
    private environment;
    private autoHeightCalculator;
    private propertyEventService;
    private domDataKey;
    private forPrintWarningGiven;
    private agWire(gridApi, columnApi);
    private destroy();
    init(): void;
    private checkColumnDefProperties();
    private checkGridOptionsProperties();
    private checkProperties(userProperties, validPropertiesAndExceptions, validProperties, containerName, docsUrl);
    getDomData(element: Node, key: string): any;
    setDomData(element: Element, key: string, value: any): any;
    isEnterprise(): boolean;
    isRowSelection(): boolean;
    isRowDeselection(): boolean;
    isRowSelectionMulti(): boolean;
    isRowMultiSelectWithClick(): boolean;
    getContext(): any;
    isPivotMode(): boolean;
    isPivotTotals(): boolean;
    isRowModelInfinite(): boolean;
    isRowModelViewport(): boolean;
    isRowModelEnterprise(): boolean;
    isRowModelDefault(): boolean;
    isFullRowEdit(): boolean;
    isSuppressFocusAfterRefresh(): boolean;
    isShowToolPanel(): boolean;
    isToolPanelSuppressValues(): boolean;
    isToolPanelSuppressPivots(): boolean;
    isToolPanelSuppressRowGroups(): boolean;
    isToolPanelSuppressSideButtons(): boolean;
    isToolPanelSuppressPivotMode(): boolean;
    isContractColumnSelection(): boolean;
    isToolPanelSuppressColumnFilter(): boolean;
    isToolPanelSuppressColumnSelectAll(): boolean;
    isToolPanelSuppressColumnExpandAll(): boolean;
    isSuppressTouch(): boolean;
    useAsyncEvents(): boolean;
    isEnableCellChangeFlash(): boolean;
    isGroupSelectsChildren(): boolean;
    isGroupSelectsFiltered(): boolean;
    isGroupHideOpenParents(): boolean;
    isGroupMultiAutoColumn(): boolean;
    isGroupRemoveSingleChildren(): boolean;
    isGroupRemoveLowestSingleChildren(): boolean;
    isGroupIncludeFooter(): boolean;
    isGroupSuppressBlankHeader(): boolean;
    isSuppressRowClickSelection(): boolean;
    isSuppressCellSelection(): boolean;
    isSuppressMultiSort(): boolean;
    isMultiSortKeyCtrl(): boolean;
    isGroupSuppressAutoColumn(): boolean;
    isSuppressDragLeaveHidesColumns(): boolean;
    isSuppressScrollOnNewData(): boolean;
    isRowDragManaged(): boolean;
    isSuppressRowDrag(): boolean;
    isForPrint(): boolean;
    isAutoHeight(): boolean;
    isNormalDomLayout(): boolean;
    isSuppressHorizontalScroll(): boolean;
    isSuppressLoadingOverlay(): boolean;
    isSuppressNoRowsOverlay(): boolean;
    isSuppressFieldDotNotation(): boolean;
    getPinnedTopRowData(): any[];
    getPinnedBottomRowData(): any[];
    isFunctionsPassive(): boolean;
    isSuppressTabbing(): boolean;
    isSuppressChangeDetection(): boolean;
    isSuppressAnimationFrame(): boolean;
    getQuickFilterText(): string;
    isCacheQuickFilter(): boolean;
    isUnSortIcon(): boolean;
    isSuppressMenuHide(): boolean;
    isEnterMovesDownAfterEdit(): boolean;
    isEnterMovesDown(): boolean;
    getRowStyle(): any;
    getRowClass(): string | string[];
    getRowStyleFunc(): Function;
    getRowClassFunc(): (params: any) => string | string[];
    rowClassRules(): {
        [cssClassName: string]: string | Function;
    };
    getPopupParent(): HTMLElement;
    getPostProcessPopupFunc(): (params: PostProcessPopupParams) => void;
    getDoesDataFlowerFunc(): (data: any) => boolean;
    getPaginationNumberFormatterFunc(): (params: PaginationNumberFormatterParams) => string;
    getChildCountFunc(): (dataItem: any) => number;
    getDefaultGroupSortComparator(): (nodeA: RowNode, nodeB: RowNode) => number;
    getIsFullWidthCellFunc(): (rowNode: RowNode) => boolean;
    getFullWidthCellRendererParams(): any;
    isEmbedFullWidthRows(): boolean;
    getBusinessKeyForNodeFunc(): (node: RowNode) => string;
    getApi(): GridApi;
    getColumnApi(): ColumnApi;
    isDeltaRowDataMode(): boolean;
    isEnsureDomOrder(): boolean;
    isEnableColResize(): boolean;
    isSingleClickEdit(): boolean;
    isSuppressClickEdit(): boolean;
    isStopEditingWhenGridLosesFocus(): boolean;
    getGroupDefaultExpanded(): number;
    getMaxConcurrentDatasourceRequests(): number;
    getMaxBlocksInCache(): number;
    getCacheOverflowSize(): number;
    getPaginationPageSize(): number;
    getCacheBlockSize(): number;
    getInfiniteInitialRowCount(): number;
    isPurgeClosedRowNodes(): boolean;
    isSuppressPaginationPanel(): boolean;
    getRowData(): any[];
    isGroupUseEntireRow(): boolean;
    isEnableRtl(): boolean;
    getAutoGroupColumnDef(): ColDef;
    isGroupSuppressRow(): boolean;
    getRowGroupPanelShow(): string;
    getPivotPanelShow(): string;
    isAngularCompileRows(): boolean;
    isAngularCompileFilters(): boolean;
    isAngularCompileHeaders(): boolean;
    isDebug(): boolean;
    getColumnDefs(): (ColDef | ColGroupDef)[];
    getColumnTypes(): {
        [key: string]: ColDef;
    };
    getDatasource(): IDatasource;
    getViewportDatasource(): IViewportDatasource;
    getEnterpriseDatasource(): IEnterpriseDatasource;
    isEnableSorting(): boolean;
    isAccentedSort(): boolean;
    isEnableCellExpressions(): boolean;
    isEnableGroupEdit(): boolean;
    isSuppressMiddleClickScrolls(): boolean;
    isSuppressPreventDefaultOnMouseWheel(): boolean;
    isSuppressColumnVirtualisation(): boolean;
    isSuppressContextMenu(): boolean;
    isAllowContextMenuWithControlKey(): boolean;
    isSuppressCopyRowsToClipboard(): boolean;
    isEnableFilter(): boolean;
    isPagination(): boolean;
    isSuppressEnterpriseResetOnNewColumns(): boolean;
    getBatchUpdateWaitMillis(): number;
    isEnableServerSideFilter(): boolean;
    isEnableServerSideSorting(): boolean;
    isSuppressMovableColumns(): boolean;
    isAnimateRows(): boolean;
    isSuppressColumnMoveAnimation(): boolean;
    isSuppressAggFuncInHeader(): boolean;
    isSuppressAggAtRootLevel(): boolean;
    isEnableRangeSelection(): boolean;
    isSuppressMultiRangeSelection(): boolean;
    isPaginationAutoPageSize(): boolean;
    isRememberGroupStateWhenNewData(): boolean;
    getIcons(): any;
    getAggFuncs(): {
        [key: string]: IAggFunc;
    };
    getSortingOrder(): string[];
    getAlignedGrids(): GridOptions[];
    isMasterDetail(): boolean;
    getIsRowMasterFunc(): IsRowMaster;
    getIsRowSelectableFunc(): IsRowSelectable;
    getGroupRowRendererParams(): any;
    getOverlayLoadingTemplate(): string;
    getOverlayNoRowsTemplate(): string;
    isSuppressAutoSize(): boolean;
    isSuppressParentsInRowNodes(): boolean;
    isEnableStatusBar(): boolean;
    isAlwaysShowStatusBar(): boolean;
    isFunctionsReadOnly(): boolean;
    isFloatingFilter(): boolean;
    isEnableOldSetFilterModel(): boolean;
    getDefaultColDef(): ColDef;
    getDefaultColGroupDef(): ColGroupDef;
    getDefaultExportParams(): BaseExportParams;
    isSuppressCsvExport(): boolean;
    isSuppressExcelExport(): boolean;
    isSuppressMakeColumnVisibleAfterUnGroup(): boolean;
    getNodeChildDetailsFunc(): ((dataItem: any) => NodeChildDetails);
    getDataPathFunc(): ((dataItem: any) => string[]);
    getGroupRowAggNodesFunc(): (nodes: RowNode[]) => any;
    getContextMenuItemsFunc(): GetContextMenuItems;
    getMainMenuItemsFunc(): GetMainMenuItems;
    getRowNodeIdFunc(): GetRowNodeIdFunc;
    getNavigateToNextCellFunc(): (params: NavigateToNextCellParams) => GridCellDef;
    getTabToNextCellFunc(): (params: TabToNextCellParams) => GridCellDef;
    isNativeScroll(): boolean;
    isTreeData(): boolean;
    isValueCache(): boolean;
    isValueCacheNeverExpires(): boolean;
    isAggregateOnlyChangedColumns(): boolean;
    getProcessSecondaryColDefFunc(): (colDef: ColDef) => void;
    getProcessSecondaryColGroupDefFunc(): (colGroupDef: ColGroupDef) => void;
    getSendToClipboardFunc(): (params: any) => void;
    getProcessRowPostCreateFunc(): any;
    getProcessCellForClipboardFunc(): (params: ProcessCellForExportParams) => any;
    getProcessHeaderForClipboardFunc(): (params: ProcessHeaderForExportParams) => any;
    getProcessCellFromClipboardFunc(): (params: ProcessCellForExportParams) => any;
    getViewportRowModelPageSize(): number;
    getViewportRowModelBufferSize(): number;
    getPostSortFunc(): (rowNodes: RowNode[]) => void;
    getClipboardDeliminator(): string;
    setProperty(key: string, value: any): void;
    addEventListener(key: string, listener: Function): void;
    removeEventListener(key: string, listener: Function): void;
    getAutoSizePadding(): number;
    getHeaderHeight(): number;
    getFloatingFiltersHeight(): number;
    getGroupHeaderHeight(): number;
    getPivotHeaderHeight(): number;
    getPivotGroupHeaderHeight(): number;
    isExternalFilterPresent(): boolean;
    doesExternalFilterPass(node: RowNode): boolean;
    getDocument(): Document;
    getLayoutInterval(): number;
    getMinColWidth(): number;
    getMaxColWidth(): number;
    getColWidth(): number;
    getRowBuffer(): number;
    getScrollbarWidth(): number;
    private checkForDeprecated();
    getLocaleTextFunc(): Function;
    globalEventHandler(eventName: string, event?: any): void;
    getRowHeightAsNumber(): number;
    getRowHeightForNode(rowNode: RowNode): number;
    isDynamicRowHeight(): boolean;
    getVirtualItemHeight(): number;
    private isNumeric(value);
    private specialForNewMaterial(defaultValue, sassVariableName);
    private getDefaultRowHeight();
}
}
declare module 'ag-grid/dist/lib/gridOptionsWrapper' {
export * from '~ag-grid/dist/lib/gridOptionsWrapper';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/eventService.d.ts
declare module '~ag-grid/dist/lib/eventService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { LoggerFactory } from '~ag-grid/dist/lib/logger';
import { IEventEmitter } from '~ag-grid/dist/lib/interfaces/iEventEmitter';
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
import { AgEvent } from '~ag-grid/dist/lib/events';
export class EventService implements IEventEmitter {
    private allSyncListeners;
    private allAsyncListeners;
    private globalSyncListeners;
    private globalAsyncListeners;
    private logger;
    private asyncFunctionsQueue;
    private scheduled;
    private static PRIORITY;
    setBeans(loggerFactory: LoggerFactory, gridOptionsWrapper: GridOptionsWrapper, globalEventListener?: Function): void;
    private getListenerList(eventType, async);
    addEventListener(eventType: string, listener: Function, async?: boolean): void;
    private assertNotDeprecated(eventType);
    addModalPriorityEventListener(eventType: string, listener: Function, async?: boolean): void;
    addGlobalListener(listener: Function, async?: boolean): void;
    removeEventListener(eventType: string, listener: Function, async?: boolean): void;
    removeGlobalListener(listener: Function, async?: boolean): void;
    dispatchEvent(event: AgEvent): void;
    private dispatchToListeners(event, async);
    private dispatchAsync(func);
    private flushAsyncQueue();
}
}
declare module 'ag-grid/dist/lib/eventService' {
export * from '~ag-grid/dist/lib/eventService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rowNodes/selectableService.d.ts
declare module '~ag-grid/dist/lib/rowNodes/selectableService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export class SelectableService {
    private gridOptionsWrapper;
    private groupSelectsChildren;
    private isRowSelectableFunc;
    init(): void;
    updateSelectableAfterGrouping(rowNode: RowNode): void;
    updateSelectableAfterFiltering(rowNode: RowNode): void;
    private recurseDown(children, nextChildrenFunc);
}
}
declare module 'ag-grid/dist/lib/rowNodes/selectableService' {
export * from '~ag-grid/dist/lib/rowNodes/selectableService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/gridCore.d.ts
declare module '~ag-grid/dist/lib/gridCore' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { LoggerFactory } from '~ag-grid/dist/lib/logger';
export class GridCore {
    private gridOptions;
    private gridOptionsWrapper;
    private rowModel;
    private frameworkFactory;
    private columnController;
    private rowRenderer;
    private filterManager;
    private eventService;
    private gridPanel;
    private eGridDiv;
    private $scope;
    private quickFilterOnScope;
    private popupService;
    private focusedCellController;
    private context;
    private columnApi;
    private gridApi;
    private rowGroupCompFactory;
    private pivotCompFactory;
    private toolPanelComp;
    private statusBar;
    private rowGroupComp;
    private pivotComp;
    private finished;
    private doingVirtualPaging;
    private eRootPanel;
    private logger;
    private destroyFunctions;
    constructor(loggerFactory: LoggerFactory);
    init(): void;
    private addRtlSupport();
    private createNorthPanel();
    private onDropPanelVisible();
    getRootGui(): HTMLElement;
    private createSouthPanel();
    private onRowGroupChanged();
    private addWindowResizeListener();
    private periodicallyDoLayout();
    showToolPanel(show: any): void;
    isToolPanelShowing(): boolean;
    private destroy();
    ensureNodeVisible(comparator: any, position?: string): void;
    doLayout(): void;
}
}
declare module 'ag-grid/dist/lib/gridCore' {
export * from '~ag-grid/dist/lib/gridCore';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/logger.d.ts
declare module '~ag-grid/dist/lib/logger' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class LoggerFactory {
    private logging;
    private setBeans(gridOptionsWrapper);
    create(name: string): Logger;
    isLogging(): boolean;
}
export class Logger {
    private isLoggingFunc;
    private name;
    constructor(name: string, isLoggingFunc: () => boolean);
    isLogging(): boolean;
    log(message: string): void;
}
}
declare module 'ag-grid/dist/lib/logger' {
export * from '~ag-grid/dist/lib/logger';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/selectionController.d.ts
declare module '~ag-grid/dist/lib/selectionController' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export class SelectionController {
    private eventService;
    private rowModel;
    private gridOptionsWrapper;
    private columnApi;
    private gridApi;
    private selectedNodes;
    private logger;
    private lastSelectedNode;
    private groupSelectsChildren;
    private setBeans(loggerFactory);
    init(): void;
    setLastSelectedNode(rowNode: RowNode): void;
    getLastSelectedNode(): RowNode;
    getSelectedNodes(): RowNode[];
    getSelectedRows(): any[];
    removeGroupsFromSelection(): void;
    updateGroupsFromChildrenSelections(): void;
    getNodeForIdIfSelected(id: number): RowNode;
    clearOtherNodes(rowNodeToKeepSelected: RowNode): number;
    private onRowSelected(event);
    syncInRowNode(rowNode: RowNode, oldNode: RowNode): void;
    private syncInOldRowNode(rowNode, oldNode);
    private syncInNewRowNode(rowNode);
    reset(): void;
    getBestCostNodeSelection(): any;
    setRowModel(rowModel: any): void;
    isEmpty(): boolean;
    deselectAllRowNodes(justFiltered?: boolean): void;
    selectAllRowNodes(justFiltered?: boolean): void;
    selectNode(rowNode: RowNode, tryMulti: boolean): void;
    deselectIndex(rowIndex: number): void;
    deselectNode(rowNode: RowNode): void;
    selectIndex(index: any, tryMulti: boolean): void;
}
}
declare module 'ag-grid/dist/lib/selectionController' {
export * from '~ag-grid/dist/lib/selectionController';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/sortController.d.ts
declare module '~ag-grid/dist/lib/sortController' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { ColumnEventType } from '~ag-grid/dist/lib/events';
export class SortController {
    private static DEFAULT_SORTING_ORDER;
    private gridOptionsWrapper;
    private columnController;
    private eventService;
    private columnApi;
    private gridApi;
    progressSort(column: Column, multiSort: boolean, source?: ColumnEventType): void;
    setSortForColumn(column: Column, sort: string, multiSort: boolean, source?: ColumnEventType): void;
    onSortChanged(): void;
    private dispatchSortChangedEvents();
    private clearSortBarThisColumn(columnToSkip, source);
    private getNextSortDirection(column);
    getSortModel(): {
        colId: string;
        sort: string;
    }[];
    setSortModel(sortModel: any, source?: ColumnEventType): void;
    private compareColIds(sortModelEntry, column);
    getColumnsWithSortingOrdered(): Column[];
    getSortForRowController(): any[];
}
}
declare module 'ag-grid/dist/lib/sortController' {
export * from '~ag-grid/dist/lib/sortController';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/templateService.d.ts
declare module '~ag-grid/dist/lib/templateService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class TemplateService {
    private $scope;
    private templateCache;
    private waitingCallbacks;
    getTemplate(url: any, callback: any): any;
    handleHttpResult(httpResult: any, url: any): void;
}
}
declare module 'ag-grid/dist/lib/templateService' {
export * from '~ag-grid/dist/lib/templateService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/utils.d.ts
declare module '~ag-grid/dist/lib/utils' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export class Timer {
    private timestamp;
    print(msg: string): void;
}
export class Utils {
    private static isSafari;
    private static isIE;
    private static isEdge;
    private static isChrome;
    private static isFirefox;
    private static isIPad;
    private static PRINTABLE_CHARACTERS;
    private static doOnceFlags;
    static doOnce(func: () => void, key: string): void;
    static areEventsNear(e1: MouseEvent | Touch, e2: MouseEvent | Touch, pixelCount: number): boolean;
    static shallowCompare(arr1: any[], arr2: any[]): boolean;
    static getNameOfClass(TheClass: any): string;
    static values<T>(object: {
        [key: string]: T;
    }): T[];
    static getValueUsingField(data: any, field: string, fieldContainsDots: boolean): any;
    static getScrollLeft(element: HTMLElement, rtl: boolean): number;
    static cleanNumber(value: any): number;
    static setScrollLeft(element: HTMLElement, value: number, rtl: boolean): void;
    static iterateNamedNodeMap(map: NamedNodeMap, callback: (key: string, value: string) => void): void;
    static iterateObject<T>(object: {
        [p: string]: T;
    } | T[], callback: (key: string, value: T) => void): void;
    static cloneObject<T>(object: T): T;
    static map<TItem, TResult>(array: TItem[], callback: (item: TItem) => TResult): TResult[];
    static mapObject<TResult>(object: any, callback: (item: any) => TResult): TResult[];
    static forEach<T>(array: T[], callback: (item: T, index: number) => void): void;
    static filter<T>(array: T[], callback: (item: T) => boolean): T[];
    static getAllKeysInObjects(objects: any[]): string[];
    static mergeDeep(dest: any, source: any): void;
    static assign(object: any, ...sources: any[]): any;
    static parseYyyyMmDdToDate(yyyyMmDd: string, separator: string): Date;
    static serializeDateToYyyyMmDd(date: Date, separator: string): string;
    static pad(num: number, totalStringSize: number): string;
    static pushAll(target: any[], source: any[]): void;
    static createArrayOfNumbers(first: number, last: number): number[];
    static getFunctionParameters(func: any): any;
    static find<T>(collection: T[] | {
        [id: string]: T;
    }, predicate: string | boolean | ((item: T) => void), value?: any): T;
    static toStrings<T>(array: T[]): string[];
    static iterateArray<T>(array: T[], callback: (item: T, index: number) => void): void;
    static isNode(o: any): boolean;
    static isElement(o: any): boolean;
    static isNodeOrElement(o: any): boolean;
    static copyNodeList(nodeList: NodeList): Node[];
    static isEventFromPrintableCharacter(event: KeyboardEvent): boolean;
    static addChangeListener(element: HTMLElement, listener: EventListener): void;
    static makeNull<T>(value: T): T;
    static missing(value: any): boolean;
    static missingOrEmpty(value: any[] | string): boolean;
    static missingOrEmptyObject(value: any): boolean;
    static exists(value: any): boolean;
    static firstExistingValue<A>(...values: A[]): A;
    static anyExists(values: any[]): boolean;
    static existsAndNotEmpty(value: any[]): boolean;
    static removeAllChildren(node: HTMLElement): void;
    static removeElement(parent: HTMLElement, cssSelector: string): void;
    static removeFromParent(node: Element): void;
    static isVisible(element: HTMLElement): boolean;
    /**
     * loads the template and returns it as an element. makes up for no simple way in
     * the dom api to load html directly, eg we cannot do this: document.createElement(template)
     */
    static loadTemplate(template: string): HTMLElement;
    static appendHtml(eContainer: HTMLElement, htmlTemplate: string): void;
    static addOrRemoveCssClass(element: HTMLElement, className: string, addOrRemove: boolean): void;
    static callIfPresent(func: Function): void;
    static addCssClass(element: HTMLElement, className: string): void;
    static containsClass(element: any, className: string): boolean;
    static getElementAttribute(element: any, attributeName: string): string;
    static offsetHeight(element: HTMLElement): number;
    static offsetWidth(element: HTMLElement): number;
    static sortNumberArray(numberArray: number[]): void;
    static removeCssClass(element: HTMLElement, className: string): void;
    static removeRepeatsFromArray<T>(array: T[], object: T): void;
    static removeFromArray<T>(array: T[], object: T): void;
    static removeAllFromArray<T>(array: T[], toRemove: T[]): void;
    static insertIntoArray<T>(array: T[], object: T, toIndex: number): void;
    static insertArrayIntoArray<T>(dest: T[], src: T[], toIndex: number): void;
    static moveInArray<T>(array: T[], objectsToMove: T[], toIndex: number): void;
    static defaultComparator(valueA: any, valueB: any, accentedCompare?: boolean): number;
    static compareArrays(array1: any[], array2: any[]): boolean;
    static ensureDomOrder(eContainer: HTMLElement, eChild: HTMLElement, eChildBefore: HTMLElement): void;
    static insertWithDomOrder(eContainer: HTMLElement, eChild: HTMLElement, eChildBefore: HTMLElement): void;
    static insertTemplateWithDomOrder(eContainer: HTMLElement, htmlTemplate: string, eChildBefore: HTMLElement): HTMLElement;
    static every<T>(items: T[], callback: (item: T) => boolean): boolean;
    static toStringOrNull(value: any): string;
    static formatWidth(width: number | string): string;
    static formatNumberTwoDecimalPlacesAndCommas(value: number): string;
    static formatNumberCommas(value: number): string;
    static prependDC(parent: HTMLElement, documentFragment: DocumentFragment): void;
    static iconNameClassMap: {
        [key: string]: string;
    };
    /**
     * If icon provided, use this (either a string, or a function callback).
     * if not, then use the default icon from the theme
     */
    static createIcon(iconName: string, gridOptionsWrapper: GridOptionsWrapper, column: Column): HTMLElement;
    static createIconNoSpan(iconName: string, gridOptionsWrapper: GridOptionsWrapper, column: Column): HTMLElement;
    static addStylesToElement(eElement: any, styles: any): void;
    static isHorizontalScrollShowing(element: HTMLElement): boolean;
    static isVerticalScrollShowing(element: HTMLElement): boolean;
    static getMaxDivHeight(): number;
    static getScrollbarWidth(): number;
    static isKeyPressed(event: KeyboardEvent, keyToCheck: number): boolean;
    static setVisible(element: HTMLElement, visible: boolean): void;
    static setHidden(element: HTMLElement, hidden: boolean): void;
    static isBrowserIE(): boolean;
    static isBrowserEdge(): boolean;
    static isBrowserSafari(): boolean;
    static isBrowserChrome(): boolean;
    static isBrowserFirefox(): boolean;
    static isUserAgentIPad(): boolean;
    static getTarget(event: Event): Element;
    static isElementInEventPath(element: HTMLElement, event: Event): boolean;
    static createEventPath(event: Event): EventTarget[];
    static addAgGridEventPath(event: Event): void;
    static getEventPath(event: Event): EventTarget[];
    static forEachSnapshotFirst(list: any[], callback: (item: any) => void): void;
    static getBodyWidth(): number;
    static getBodyHeight(): number;
    static setCheckboxState(eCheckbox: any, state: any): void;
    static traverseNodesWithKey(nodes: RowNode[], callback: (node: RowNode, key: string) => void): void;
    static camelCaseToHyphen(str: string): string;
    static hyphenToCamelCase(str: string): string;
    static cssStyleObjectToMarkup(stylesToUse: any): string;
    /**
     * From http://stackoverflow.com/questions/9716468/is-there-any-function-like-isnumeric-in-javascript-to-validate-numbers
     */
    static isNumeric(value: any): boolean;
    static escape(toEscape: string): string;
    /**
     * Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
     * complicated, thus this doc is long and (hopefully) detailed enough to answer
     * your questions.
     *
     * If you need to react to the mouse wheel in a predictable way, this code is
     * like your bestest friend. * hugs *
     *
     * As of today, there are 4 DOM event types you can listen to:
     *
     *   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
     *   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
     *   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
     *   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
     *
     * So what to do?  The is the best:
     *
     *   normalizeWheel.getEventType();
     *
     * In your event callback, use this code to get sane interpretation of the
     * deltas.  This code will return an object with properties:
     *
     *   spinX   -- normalized spin speed (use for zoom) - x plane
     *   spinY   -- " - y plane
     *   pixelX  -- normalized distance (to pixels) - x plane
     *   pixelY  -- " - y plane
     *
     * Wheel values are provided by the browser assuming you are using the wheel to
     * scroll a web page by a number of lines or pixels (or pages).  Values can vary
     * significantly on different platforms and browsers, forgetting that you can
     * scroll at different speeds.  Some devices (like trackpads) emit more events
     * at smaller increments with fine granularity, and some emit massive jumps with
     * linear speed or acceleration.
     *
     * This code does its best to normalize the deltas for you:
     *
     *   - spin is trying to normalize how far the wheel was spun (or trackpad
     *     dragged).  This is super useful for zoom support where you want to
     *     throw away the chunky scroll steps on the PC and make those equal to
     *     the slow and smooth tiny steps on the Mac. Key data: This code tries to
     *     resolve a single slow step on a wheel to 1.
     *
     *   - pixel is normalizing the desired scroll delta in pixel units.  You'll
     *     get the crazy differences between browsers, but at least it'll be in
     *     pixels!
     *
     *   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
     *     should translate to positive value zooming IN, negative zooming OUT.
     *     This matches the newer 'wheel' event.
     *
     * Why are there spinX, spinY (or pixels)?
     *
     *   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
     *     with a mouse.  It results in side-scrolling in the browser by default.
     *
     *   - spinY is what you expect -- it's the classic axis of a mouse wheel.
     *
     *   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
     *     probably is by browsers in conjunction with fancy 3D controllers .. but
     *     you know.
     *
     * Implementation info:
     *
     * Examples of 'wheel' event if you scroll slowly (down) by one step with an
     * average mouse:
     *
     *   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
     *   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
     *   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
     *   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
     *   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
     *
     * On the trackpad:
     *
     *   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
     *   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
     *
     * On other/older browsers.. it's more complicated as there can be multiple and
     * also missing delta values.
     *
     * The 'wheel' event is more standard:
     *
     * http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
     *
     * The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
     * deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
     * backward compatibility with older events.  Those other values help us
     * better normalize spin speed.  Example of what the browsers provide:
     *
     *                          | event.wheelDelta | event.detail
     *        ------------------+------------------+--------------
     *          Safari v5/OS X  |       -120       |       0
     *          Safari v5/Win7  |       -120       |       0
     *         Chrome v17/OS X  |       -120       |       0
     *         Chrome v17/Win7  |       -120       |       0
     *                IE9/Win7  |       -120       |   undefined
     *         Firefox v4/OS X  |     undefined    |       1
     *         Firefox v4/Win7  |     undefined    |       3
     *
     */
    static normalizeWheel(event: any): any;
    /**
     * https://stackoverflow.com/questions/24004791/can-someone-explain-the-debounce-function-in-javascript
     */
    static debounce(func: () => void, wait: number, immediate?: boolean): () => void;
    static stopPropagationForAgGrid(event: Event): void;
    static isStopPropagationForAgGrid(event: Event): boolean;
    static executeInAWhile(funcs: Function[]): void;
    static executeNextVMTurn(funcs: Function[]): void;
    static executeAfter(funcs: Function[], millis: number): void;
    static referenceCompare(left: any, right: any): boolean;
    static get(source: {
        [p: string]: any;
    }, expression: string, defaultValue: any): any;
    static passiveEvents: string[];
    static addSafePassiveEventListener(eElement: HTMLElement, event: string, listener: (event?: any) => void): void;
    static camelCaseToHumanText(camelCase: string): string;
    static message(msg: string): void;
    static sortRowNodesByOrder(rowNodes: RowNode[], rowNodeOrder: {
        [id: string]: number;
    }): void;
    static fuzzyCheckStrings(inputValues: string[], validValues: string[], allSuggestions: string[]): {
        [p: string]: string[];
    };
    static fuzzySuggestions(inputValue: string, validValues: string[], allSuggestions: string[]): string[];
    static get_bigrams(from: string): any[];
    static string_similarity: (str1: string, str2: string) => number;
}
export class NumberSequence {
    private nextValue;
    private step;
    constructor(initValue?: number, step?: number);
    next(): number;
    peek(): number;
    skip(count: number): void;
}
export let _: typeof Utils;
export type ResolveAndRejectCallback<T> = (resolve: (value: T) => void, reject: (params: any) => void) => void;
export enum PromiseStatus {
    IN_PROGRESS = 0,
    RESOLVED = 1,
}
export interface ExternalPromise<T> {
    resolve: (value: T) => void;
    promise: Promise<T>;
}
export class Promise<T> {
    private status;
    private resolution;
    private listOfWaiters;
    static all<T>(toCombine: Promise<T>[]): Promise<T[]>;
    static resolve<T>(value: T): Promise<T>;
    static external<T>(): ExternalPromise<T>;
    constructor(callback: ResolveAndRejectCallback<T>);
    then(func: (result: any) => void): void;
    firstOneOnly(func: (result: any) => void): void;
    map<Z>(adapter: (from: T) => Z): Promise<Z>;
    resolveNow<Z>(ifNotResolvedValue: Z, ifResolved: (current: T) => Z): Z;
    private onDone(value);
    private onReject(params);
}
}
declare module 'ag-grid/dist/lib/utils' {
export * from '~ag-grid/dist/lib/utils';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/valueService/valueService.d.ts
declare module '~ag-grid/dist/lib/valueService/valueService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { Column } from '~ag-grid/dist/lib/entities/column';
export class ValueService {
    private gridOptionsWrapper;
    private expressionService;
    private columnController;
    private eventService;
    private valueCache;
    private cellExpressions;
    private initialised;
    init(): void;
    getValue(column: Column, rowNode: RowNode, forFilter?: boolean, ignoreAggData?: boolean): any;
    setValue(rowNode: RowNode, colKey: string | Column, newValue: any): void;
    private setValueUsingField(data, field, newValue, isFieldContainsDots);
    private executeValueGetter(filterValueGetter, data, column, rowNode);
    private getValueCallback(node, field);
    getKeyForNode(col: Column, rowNode: RowNode): any;
}
}
declare module 'ag-grid/dist/lib/valueService/valueService' {
export * from '~ag-grid/dist/lib/valueService/valueService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/valueService/expressionService.d.ts
declare module '~ag-grid/dist/lib/valueService/expressionService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class ExpressionService {
    private expressionToFunctionCache;
    private logger;
    private setBeans(loggerFactory);
    evaluate(expressionOrFunc: Function | string, params: any): any;
    private evaluateExpression(expression, params);
    private createExpressionFunction(expression);
    private createFunctionBody(expression);
}
}
declare module 'ag-grid/dist/lib/valueService/expressionService' {
export * from '~ag-grid/dist/lib/valueService/expressionService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/xmlFactory.d.ts
declare module '~ag-grid/dist/lib/xmlFactory' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class XmlFactory {
    createXml(xmlElement: XmlElement, booleanTransformer?: (currentValue: boolean) => string): string;
    private returnAttributeIfPopulated(key, value, booleanTransformer?);
}
export interface XmlElement {
    name: string;
    properties?: XmlAttributes;
    children?: XmlElement[];
    textNode?: string;
}
export interface XmlAttributes {
    prefixedAttributes?: PrefixedXmlAttributes[];
    rawMap?: any;
}
export interface PrefixedXmlAttributes {
    prefix: string;
    map: any;
}
}
declare module 'ag-grid/dist/lib/xmlFactory' {
export * from '~ag-grid/dist/lib/xmlFactory';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/gridSerializer.d.ts
declare module '~ag-grid/dist/lib/gridSerializer' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { ColumnController } from '~ag-grid/dist/lib/columnController/columnController';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { ValueService } from '~ag-grid/dist/lib/valueService/valueService';
import { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
import { ExportParams, ProcessCellForExportParams, ProcessHeaderForExportParams } from '~ag-grid/dist/lib/exportParams';
import { ColumnGroupChild } from '~ag-grid/dist/lib/entities/columnGroupChild';
/**
 * This interface works in conjuction with the GridSerializer. When serializing a grid, an instance that implements this interface
 * must be passed in, the serializer will call back to the provided methods and finally call to parse to obtain the final result
 * of the serialization.
 *
 * The lifecycle of a serializer with a GridSerializingSession is as follows.
 *
 * --1 Call to prepare method. An opportunity to do any required work before the call to accumulate data for the rows are about to happen.
 * --2 Call to the row methods as the serializer loops through the different rows of the grid will call these methods so that the data
 * can be accumulated. The methods. if there is relevant data will be called in the following order:
 *      a) addCustomHeader
 *      b) onNewHeaderGroupingRow
 *      c) onNewHeader
 *      d) onNewBodyRow
 *      e) addCustomFooter
 *      IF ANY OF THIS METHODS RETURN A ROW ACCUMULATOR, YOU CAN EXPECT THE SERIALIZER TO CALL ON THAT ACCUMULATOR WITH THE DATA FOR THAT ROW
 *      IMMEDIATELY AFTER IT HAS RECEIVED THE OBJECT AND BEFORE IT CALLS YOU TO OBTAIN A NEW ROW ACCUMULATOR
 * --3 Call to parse method. This method is the last one to be called and is expected to return whatever accumulated
 * parsed string is to be returned as a result of the serialization
 *
 * This interface is closely related to the RowAccumulator and RowSpanningAccumulator interfaces as every time a new row is about
 * to be created a new instances of RowAccumulator or RowSpanningAccumulator need to be provided.

 */
export interface GridSerializingSession<T> {
    /**
     * INITIAL METHOD
     */
    prepare(columnsToExport: Column[]): void;
    /**
     * ROW METHODS
     */
    addCustomHeader(customHeader: T): void;
    onNewHeaderGroupingRow(): RowSpanningAccumulator;
    onNewHeaderRow(): RowAccumulator;
    onNewBodyRow(): RowAccumulator;
    addCustomFooter(customFooter: T): void;
    /**
     * FINAL RESULT
     */
    parse(): string;
}
export interface RowAccumulator {
    onColumn(column: Column, index: number, node?: RowNode): void;
}
export interface RowSpanningAccumulator {
    onColumn(header: string, index: number, span: number): void;
}
export abstract class BaseGridSerializingSession<T> implements GridSerializingSession<T> {
    columnController: ColumnController;
    valueService: ValueService;
    gridOptionsWrapper: GridOptionsWrapper;
    processCellCallback: (params: ProcessCellForExportParams) => string;
    processHeaderCallback: (params: ProcessHeaderForExportParams) => string;
    cellAndHeaderEscaper: (rawValue: string) => string;
    constructor(columnController: ColumnController, valueService: ValueService, gridOptionsWrapper: GridOptionsWrapper, processCellCallback?: (params: ProcessCellForExportParams) => string, processHeaderCallback?: (params: ProcessHeaderForExportParams) => string, cellAndHeaderEscaper?: (rawValue: string) => string);
    abstract prepare(columnsToExport: Column[]): void;
    abstract addCustomHeader(customHeader: T): void;
    abstract addCustomFooter(customFooter: T): void;
    abstract onNewHeaderGroupingRow(): RowSpanningAccumulator;
    abstract onNewHeaderRow(): RowAccumulator;
    abstract onNewBodyRow(): RowAccumulator;
    abstract parse(): string;
    extractHeaderValue(column: Column): string;
    extractRowCellValue(column: Column, index: number, type: string, node?: RowNode): any;
    private getHeaderName(callback, column);
    private createValueForGroupNode(node);
    private processCell(rowNode, column, value, processCellCallback, type);
}
export class GridSerializer {
    private displayedGroupCreator;
    private columnController;
    private rowModel;
    private pinnedRowModel;
    private selectionController;
    private balancedColumnTreeBuilder;
    private gridOptionsWrapper;
    serialize<T>(gridSerializingSession: GridSerializingSession<T>, params?: ExportParams<T>): string;
    recursivelyAddHeaderGroups<T>(displayedGroups: ColumnGroupChild[], gridSerializingSession: GridSerializingSession<T>): void;
    private doAddHeaderHeader<T>(gridSerializingSession, displayedGroups);
}
export enum RowType {
    HEADER_GROUPING = 0,
    HEADER = 1,
    BODY = 2,
}
}
declare module 'ag-grid/dist/lib/gridSerializer' {
export * from '~ag-grid/dist/lib/gridSerializer';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/exportParams.d.ts
declare module '~ag-grid/dist/lib/exportParams' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { GridApi } from '~ag-grid/dist/lib/gridApi';
import { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
export interface BaseExportParams {
    skipHeader?: boolean;
    columnGroups?: boolean;
    skipFooters?: boolean;
    skipGroups?: boolean;
    skipPinnedTop?: boolean;
    skipPinnedBottom?: boolean;
    suppressQuotes?: boolean;
    columnKeys?: (string | Column)[];
    fileName?: string;
    allColumns?: boolean;
    onlySelected?: boolean;
    onlySelectedAllPages?: boolean;
    shouldRowBeSkipped?(params: ShouldRowBeSkippedParams): boolean;
    processCellCallback?(params: ProcessCellForExportParams): string;
    processHeaderCallback?(params: ProcessHeaderForExportParams): string;
}
export interface ExportParams<T> extends BaseExportParams {
    customHeader?: T;
    customFooter?: T;
}
export interface CsvExportParams extends ExportParams<string> {
    columnSeparator?: string;
}
export interface ShouldRowBeSkippedParams {
    node: RowNode;
    api: GridApi;
    context: any;
}
export interface ProcessCellForExportParams {
    value: any;
    node: RowNode;
    column: Column;
    api: GridApi;
    columnApi: ColumnApi;
    context: any;
    type: string;
}
export interface ProcessHeaderForExportParams {
    column: Column;
    api: GridApi;
    columnApi: ColumnApi;
    context: any;
}
}
declare module 'ag-grid/dist/lib/exportParams' {
export * from '~ag-grid/dist/lib/exportParams';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iRowModel.d.ts
declare module '~ag-grid/dist/lib/interfaces/iRowModel' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export interface RowBounds {
    rowTop: number;
    rowHeight: number;
}
export interface IRowModel {
    /** Returns the rowNode at the given index. */
    getRow(index: number): RowNode;
    /** Returns the first and last rows to render. */
    getPageFirstRow(): number;
    getPageLastRow(): number;
    /** This is legacy, not used by ag-Grid, but keeping for backward compatibility */
    getRowCount(): number;
    /** Returns the row index at the given pixel */
    getRowIndexAtPixel(pixel: number): number;
    /** Returns total height of all the rows - used to size the height of the grid div that contains the rows */
    getCurrentPageHeight(): number;
    /** Returns true if the provided rowNode is in the list of rows to render */
    isRowPresent(rowNode: RowNode): boolean;
    /** Returns row top and bottom for a given row */
    getRowBounds(index: number): RowBounds;
    /** Returns true if this model has no rows, regardless of model filter. EG if rows present, but filtered
     * out, this still returns false. If it returns true, then the grid shows the 'no rows' overlay - but we
     * don't show that overlay if the rows are just filtered out. */
    isEmpty(): boolean;
    /** Returns true if no rows (either no rows at all, or the rows are filtered out). This is what the grid
     * uses to know if there are rows to render or not. */
    isRowsToRender(): boolean;
    /** Returns all rows in range that should be selected. If there is a gap in range (non InMemoryRowModel) then
     *  then no rows should be returned  */
    getNodesInRangeForSelection(first: RowNode, last: RowNode): RowNode[];
    /** Iterate through each node. What this does depends on the model type. For inMemory, goes through
     * all nodes. For pagination, goes through current page. For virtualPage, goes through what's loaded in memory. */
    forEachNode(callback: (rowNode: RowNode) => void): void;
    /** The base class returns the type. We use this instead of 'instanceof' as the client might provide
     * their own implementation of the models in the future. */
    getType(): string;
    /**
     * It tells us if this row model knows about the last row that it can produce. This is used by the
     * PaginationPanel, if last row is not found, then the 'last' button is disabled and the last page is
     * not shown. This is always true for InMemoryRowModel. It toggles for InfiniteRowModel.
     */
    isLastRowFound(): boolean;
}
}
declare module 'ag-grid/dist/lib/interfaces/iRowModel' {
export * from '~ag-grid/dist/lib/interfaces/iRowModel';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iAggFuncService.d.ts
declare module '~ag-grid/dist/lib/interfaces/iAggFuncService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IAggFunc } from '~ag-grid/dist/lib/entities/colDef';
import { Column } from '~ag-grid/dist/lib/entities/column';
export interface IAggFuncService {
    addAggFuncs(aggFuncs: {
        [key: string]: IAggFunc;
    }): void;
    addAggFunc(key: string, aggFunc: IAggFunc): void;
    clear(): void;
    getDefaultAggFunc(column: Column): string;
}
}
declare module 'ag-grid/dist/lib/interfaces/iAggFuncService' {
export * from '~ag-grid/dist/lib/interfaces/iAggFuncService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iClipboardService.d.ts
declare module '~ag-grid/dist/lib/interfaces/iClipboardService' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
export interface IClipboardService {
    pasteFromClipboard(): void;
    copyToClipboard(includeHeader?: boolean): void;
    copySelectedRowsToClipboard(includeHeader?: boolean, columnKeys?: (string | Column)[]): void;
    copySelectedRangeToClipboard(includeHeader?: boolean): void;
    copyRangeDown(): void;
}
}
declare module 'ag-grid/dist/lib/interfaces/iClipboardService' {
export * from '~ag-grid/dist/lib/interfaces/iClipboardService';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iMenuFactory.d.ts
declare module '~ag-grid/dist/lib/interfaces/iMenuFactory' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
export interface IMenuFactory {
    showMenuAfterButtonClick(column: Column, eventSource: HTMLElement, defaultTab?: string, restrictToTabs?: string[]): void;
    showMenuAfterMouseEvent(column: Column, mouseEvent: MouseEvent | Touch, defaultTab?: string, restrictToTabs?: string[]): void;
    isMenuEnabled(column: Column): boolean;
    hideActiveMenu(): void;
}
}
declare module 'ag-grid/dist/lib/interfaces/iMenuFactory' {
export * from '~ag-grid/dist/lib/interfaces/iMenuFactory';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/entities/colDef.d.ts
declare module '~ag-grid/dist/lib/entities/colDef' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { ICellEditorComp } from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
import { ICellRendererComp, ICellRendererFunc } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { IFilterComp } from '~ag-grid/dist/lib/interfaces/iFilter';
import { GridApi } from '~ag-grid/dist/lib/gridApi';
import { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
import { IHeaderGroupComp } from '~ag-grid/dist/lib/headerRendering/headerGroup/headerGroupComp';
import { IFloatingFilterComp } from '~ag-grid/dist/lib/filter/floatingFilter';
import { CellClickedEvent, CellContextMenuEvent, CellDoubleClickedEvent } from '~ag-grid/dist/lib/events';
import { DynamicComponentDef, DynamicComponentParams } from '~ag-grid/dist/lib/components/framework/componentResolver';
/****************************************************************
 * Don't forget to update ComponentUtil if changing this class. PLEASE!*
 ****************************************************************/
/** AbstractColDef can be a group or a column definition */
export interface AbstractColDef {
    /** The name to render in the column header */
    headerName?: string;
    /** Whether to show the column when the group is open / closed. */
    columnGroupShow?: string;
    /** CSS class for the header */
    headerClass?: string | string[] | ((params: any) => string | string[]);
    /** CSS class for the header */
    toolPanelClass?: string | string[] | ((params: any) => string | string[]);
    /** Expression or function to get the cells value. */
    headerValueGetter?: string | Function;
    /** Never set this, it is used internally by grid when doing in-grid pivoting */
    pivotKeys?: string[];
    /** Set to true to not include this column in the toolpanel */
    suppressToolPanel?: boolean;
    /** Tooltip for the column header */
    headerTooltip?: string;
}
export interface ColGroupDef extends AbstractColDef {
    /** Columns in this group */
    children: (ColDef | ColGroupDef)[];
    /** Group ID */
    groupId?: string;
    /** Open by Default */
    openByDefault?: boolean;
    /** If true, group cannot be broken up by column moving, child columns will always appear side by side, however you can rearrange child columns within the group */
    marryChildren?: boolean;
    /** The custom header group component to be used for rendering the component header. If none specified the default ag-Grid is used**/
    headerGroupComponent?: {
        new (): IHeaderGroupComp;
    };
    /** The custom header group component to be used for rendering the component header in the hosting framework (ie: React/Angular). If none specified the default ag-Grid is used**/
    headerGroupComponentFramework?: {
        new (): any;
    };
    /** The custom header group component to be used for rendering the component header. If none specified the default ag-Grid is used**/
    headerGroupComponentParams?: any;
}
export interface IAggFunc {
    (input: any[]): any;
}
/****************************************************************
 * Don't forget to update ComponentUtil if changing this class. PLEASE!*
 ****************************************************************/
export interface ColDef extends AbstractColDef {
    /** The unique ID to give the column. This is optional. If missing, the ID will default to the field.
     *  If both field and colId are missing, a unique ID will be generated.
     *  This ID is used to identify the column in the API for sorting, filtering etc. */
    colId?: string;
    /** If sorting by default, set it here. Set to 'asc' or 'desc' */
    sort?: string;
    /** If sorting more than one column by default, the milliseconds when this column was sorted, so we know what order to sort the columns in. */
    sortedAt?: number;
    /** The sort order, provide an array with any of the following in any order ['asc','desc',null] */
    sortingOrder?: string[];
    /** The field of the row to get the cells data from */
    field?: string;
    /**
     * A comma separated string or array of strings containing ColumnType keys which can be used as a template for a column.
     * This helps to reduce duplication of properties when you have a lot of common column properties.
     */
    type?: string | string[];
    /** Set to true for this column to be hidden. Naturally you might think, it would make more sense to call this field 'visible' and mark it false to hide,
     *  however we want all default values to be false and we want columns to be visible by default. */
    hide?: boolean;
    /** Whether this column is pinned or not. */
    pinned?: boolean | string;
    /** The field where we get the tooltip on the object */
    tooltipField?: string;
    /** The function used to calculate the tooltip of the object, tooltipField takes precedence*/
    tooltip?: (params: TooltipParams) => string;
    /** Expression or function to get the cells value. */
    valueGetter?: ((params: ValueGetterParams) => any) | string;
    /** Expression or function to get the cells value for filtering. */
    filterValueGetter?: ((params: ValueGetterParams) => any) | string;
    /** If not using a field, then this puts the value into the cell */
    valueSetter?: ((params: ValueSetterParams) => boolean) | string;
    /** Function to return the key for a value - use this if the value is an object (not a primitive type) and you
     * want to a) group by this field or b) use set filter on this field. */
    keyCreator?: Function;
    /** Initial width, in pixels, of the cell */
    width?: number;
    /** Min width, in pixels, of the cell */
    minWidth?: number;
    /** Max width, in pixels, of the cell */
    maxWidth?: number;
    /** True if this column should stretch rows height to fit contents */
    autoHeight?: number;
    /** Class to use for the cell. Can be string, array of strings, or function. */
    cellClass?: string | string[] | ((cellClassParams: CellClassParams) => string | string[]);
    /** An object of css values. Or a function returning an object of css values. */
    cellStyle?: {} | ((params: any) => {});
    /** A function for rendering a cell. */
    cellRenderer?: {
        new (): ICellRendererComp;
    } | ICellRendererFunc | string;
    cellRendererFramework?: any;
    cellRendererParams?: any;
    cellRendererSelector?: (params: DynamicComponentParams) => DynamicComponentDef;
    /** Cell editor */
    cellEditor?: {
        new (): ICellEditorComp;
    } | string;
    cellEditorFramework?: any;
    cellEditorParams?: any;
    cellEditorSelector?: (params: DynamicComponentParams) => DynamicComponentDef;
    /** A function for rendering a pinned row cell. */
    pinnedRowCellRenderer?: {
        new (): ICellRendererComp;
    } | ICellRendererFunc | string;
    pinnedRowCellRendererFramework?: any;
    pinnedRowCellRendererParams?: any;
    /** A function to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering. */
    valueFormatter?: (params: ValueFormatterParams) => string | string;
    /** A function to format a pinned row value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering. */
    pinnedRowValueFormatter?: (params: ValueFormatterParams) => string | string;
    /** Gets called after editing, converts the value in the cell. */
    valueParser?: (params: ValueParserParams) => any | string;
    /** Name of function to use for aggregation. One of [sum,min,max,first,last] or a function. */
    aggFunc?: string | IAggFunc;
    /** Agg funcs allowed on this column. If missing, all installed agg funcs are allowed.
     * Can be eg ['sum','avg']. This will restrict what the GUI allows to select only.*/
    allowedAggFuncs?: string[];
    /** To group by this column by default, either provide an index (eg rowGroupIndex=1), or set rowGroup=true. */
    rowGroupIndex?: number;
    rowGroup?: boolean;
    /** Set to true to have the grid place the values for the group into the cell, or put the name of a grouped column to just show that group. */
    showRowGroup?: string | boolean;
    /** To pivot by this column by default, either provide an index (eg pivotIndex=1), or set pivot=true. */
    pivotIndex?: number;
    pivot?: boolean;
    /** Comparator function for custom sorting. */
    comparator?: (valueA: any, valueB: any, nodeA?: RowNode, nodeB?: RowNode, isInverted?: boolean) => number;
    /** Comparator for values, used by renderer to know if values have changed. Cells who's values have not changed don't get refreshed. */
    equals?: (valueA: any, valueB: any) => boolean;
    /** Comparator for ordering the pivot columns */
    pivotComparator?: (valueA: string, valueB: string) => number;
    /** Set to true to render a selection checkbox in the column. */
    checkboxSelection?: boolean | ((params: any) => boolean);
    /** If true, a 'select all' checkbox will be put into the header */
    headerCheckboxSelection?: boolean | ((params: any) => boolean);
    /** If true, the header checkbox selection will work on filtered items*/
    headerCheckboxSelectionFilteredOnly?: boolean;
    rowDrag?: boolean | ((params: any) => boolean);
    /** Set to true if no menu should be shown for this column header. */
    suppressMenu?: boolean;
    /** The menu tabs to show, and in which order, the valid values for this property are:
     * filterMenuTab, generalMenuTab, columnsMenuTab **/
    menuTabs?: string[];
    /** Set to true if no sorting should be done for this column. */
    suppressSorting?: boolean;
    /** Set to true to not allow moving this column via dragging it's header */
    suppressMovable?: boolean;
    /** Set to true to not flash this column for value changes */
    suppressCellFlash?: boolean;
    /** Set to true to make sure this column is always first. Other columns, if movable, cannot move before this column. */
    lockPosition?: boolean;
    /** Set to true to block the user showing / hiding the column, the column can only be shown / hidden via definitions or API */
    lockVisible?: boolean;
    /** Set to true to block the user pinning the column, the column can only be pinned via definitions or API */
    lockPinned?: boolean;
    /** Set to true to not allow filter on this column */
    suppressFilter?: boolean;
    /** Set to true if you want the unsorted icon to be shown when no sort is applied to this column. */
    unSortIcon?: boolean;
    /** Set to true if you want this columns width to be fixed during 'size to fit' operation. */
    suppressSizeToFit?: boolean;
    /** Set to true if you do not want this column to be resizable by dragging it's edge. */
    suppressResize?: boolean;
    /** Set to true if you do not want this column to be auto-resizable by double clicking it's edge. */
    suppressAutoSize?: boolean;
    suppressKeyboardEvent?: (params: SuppressKeyboardEventParams) => boolean;
    /** If true, GUI will allow adding this columns as a row group */
    enableRowGroup?: boolean;
    /** If true, GUI will allow adding this columns as a pivot */
    enablePivot?: boolean;
    /** If true, GUI will allow adding this columns as a value */
    enableValue?: boolean;
    /** Set to true if this col is editable, otherwise false. Can also be a function to have different rows editable. */
    editable?: boolean | IsColumnFunc;
    colSpan?: (params: ColSpanParams) => number;
    /** Set to true if this col should not be allowed take new values from teh clipboard . */
    suppressPaste?: boolean | IsColumnFunc;
    /** Set to tru if this col should not be navigable with the tab key. Can also be a function to have different rows editable. */
    suppressNavigable?: boolean | IsColumnFunc;
    /** To create the quick filter text for this column, if toString is not good enough on the value. */
    getQuickFilterText?: (params: GetQuickFilterTextParams) => string;
    /** Callbacks for editing. See editing section for further details.
     * Return true if the update was successful, or false if not.
     * If false, then skips the UI refresh and no events are emitted.
     * Return false if the values are the same (ie no update). */
    newValueHandler?: (params: any) => boolean;
    /** Cell template to use for cell. Useful for AngularJS cells. */
    template?: string;
    /** Cell template URL to load template from to use for cell. Useful for AngularJS cells. */
    templateUrl?: string;
    /** one of the built in filter names: [set, number, text], or a filter function*/
    filter?: string | {
        new (): IFilterComp;
    };
    filterFramework?: any;
    /** The filter params are specific to each filter! */
    filterParams?: any;
    /** Rules for applying css classes */
    cellClassRules?: {
        [cssClassName: string]: (Function | string);
    };
    /** Callbacks for editing.See editing section for further details. */
    onCellValueChanged?: Function;
    /** Function callback, gets called when a cell is clicked. */
    onCellClicked?: (event: CellClickedEvent) => void;
    /** Function callback, gets called when a cell is double clicked. */
    onCellDoubleClicked?: (event: CellDoubleClickedEvent) => void;
    /** Function callback, gets called when a cell is right clicked. */
    onCellContextMenu?: (event: CellContextMenuEvent) => void;
    /** Icons for this column. Leave blank to use default. */
    icons?: {
        [key: string]: string;
    };
    /** If true, grid will flash cell after cell is refreshed */
    enableCellChangeFlash?: boolean;
    /** Never set this, it is used internally by grid when doing in-grid pivoting */
    pivotValueColumn?: Column;
    /** Never set this, it is used internally by grid when doing in-grid pivoting */
    pivotTotalColumnIds?: string[];
    /** The custom header component to be used for rendering the component header. If none specified the default ag-Grid is used**/
    headerComponent?: string | {
        new (): any;
    };
    /** The custom header component to be used for rendering the component header in the hosting framework (ie: React/Angular). If none specified the default ag-Grid is used**/
    headerComponentFramework?: {
        new (): any;
    };
    /** The custom header component parameters**/
    headerComponentParams?: any;
    /** The custom header component to be used for rendering the floating filter. If none specified the default ag-Grid is used**/
    floatingFilterComponent?: {
        new (): IFloatingFilterComp<any, any, any>;
    };
    floatingFilterComponentParams?: any;
    floatingFilterComponentFramework?: {
        new (): any;
    };
    refData?: {
        [key: string]: string;
    };
}
export interface IsColumnFunc {
    (params: IsColumnFuncParams): boolean;
}
export interface IsColumnFuncParams {
    node: RowNode;
    data: any;
    column: Column;
    colDef: ColDef;
    context: any;
    api: GridApi;
    columnApi: ColumnApi;
}
export interface GetQuickFilterTextParams {
    value: any;
    node: RowNode;
    data: any;
    column: Column;
    colDef: ColDef;
}
export interface BaseColDefParams {
    node: RowNode;
    data: any;
    colDef: ColDef;
    column: Column;
    api: GridApi;
    columnApi: ColumnApi;
    context: any;
}
export interface BaseWithValueColDefParams extends BaseColDefParams {
    value: any;
}
export interface ValueGetterParams extends BaseColDefParams {
    getValue: (field: string) => any;
}
export interface NewValueParams extends BaseColDefParams {
    oldValue: any;
    newValue: any;
}
export interface ValueSetterParams extends NewValueParams {
}
export interface ValueParserParams extends NewValueParams {
}
export interface ValueFormatterParams extends BaseWithValueColDefParams {
}
export interface ColSpanParams extends BaseColDefParams {
}
export interface SuppressKeyboardEventParams extends IsColumnFuncParams {
    event: KeyboardEvent;
    editing: boolean;
}
export interface CellClassParams {
    value: any;
    data: any;
    node: RowNode;
    colDef: ColDef;
    rowIndex: number;
    $scope: any;
    api: GridApi;
    context: any;
}
export interface TooltipParams {
    value: any;
    valueFormatted: any;
    data: any;
    node: RowNode;
    colDef: ColDef;
    rowIndex: number;
    $scope: any;
    api: GridApi;
    context: any;
}
}
declare module 'ag-grid/dist/lib/entities/colDef' {
export * from '~ag-grid/dist/lib/entities/colDef';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/entities/gridOptions.d.ts
declare module '~ag-grid/dist/lib/entities/gridOptions' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { GridApi } from '~ag-grid/dist/lib/gridApi';
import { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { IViewportDatasource } from '~ag-grid/dist/lib/interfaces/iViewportDatasource';
import { ICellRendererComp, ICellRendererFunc } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
import { ColDef, ColGroupDef, IAggFunc } from '~ag-grid/dist/lib/entities/colDef';
import { IDatasource } from '~ag-grid/dist/lib/rowModels/iDatasource';
import { GridCellDef } from '~ag-grid/dist/lib/entities/gridCell';
import { IDateComp } from '~ag-grid/dist/lib/rendering/dateComponent';
import { IEnterpriseDatasource } from '~ag-grid/dist/lib/interfaces/iEnterpriseDatasource';
import { CsvExportParams, ProcessCellForExportParams, ProcessHeaderForExportParams } from '~ag-grid/dist/lib/exportParams';
import { CellClickedEvent, CellContextMenuEvent, CellDoubleClickedEvent, CellEditingStartedEvent, CellEditingStoppedEvent, CellFocusedEvent, CellMouseDownEvent, CellMouseOutEvent, CellMouseOverEvent, CellValueChangedEvent, ColumnAggFuncChangeRequestEvent, ColumnEverythingChangedEvent, ColumnGroupOpenedEvent, ColumnMovedEvent, ColumnPinnedEvent, ColumnPivotChangedEvent, ColumnPivotChangeRequestEvent, ColumnPivotModeChangedEvent, ColumnResizedEvent, ColumnRowGroupChangedEvent, ColumnRowGroupChangeRequestEvent, ColumnValueChangedEvent, ColumnValueChangeRequestEvent, ColumnVisibleEvent, DisplayedColumnsChangedEvent, DragStartedEvent, DragStoppedEvent, FilterChangedEvent, FilterModifiedEvent, GridColumnsChangedEvent, GridReadyEvent, GridSizeChangedEvent, ModelUpdatedEvent, NewColumnsLoadedEvent, PaginationChangedEvent, PinnedRowDataChangedEvent, RangeSelectionChangedEvent, RowClickedEvent, RowDataChangedEvent, RowDoubleClickedEvent, RowEditingStartedEvent, RowEditingStoppedEvent, RowGroupOpenedEvent, RowSelectedEvent, RowValueChangedEvent, SelectionChangedEvent, SortChangedEvent, ViewportChangedEvent, VirtualColumnsChangedEvent, VirtualRowRemovedEvent } from '~ag-grid/dist/lib/events';
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
import { AgGridRegisteredComponentInput } from '~ag-grid/dist/lib/components/framework/componentProvider';
import { ILoadingOverlayComp } from '~ag-grid/dist/lib/rendering/overlays/loadingOverlayComponent';
import { INoRowsOverlayComp } from '~ag-grid/dist/lib/rendering/overlays/noRowsOverlayComponent';
import { DraggingEvent } from '~ag-grid/dist/lib/dragAndDrop/dragAndDropService';
/****************************************************************
 * Don't forget to update ComponentUtil if changing this class. *
 ****************************************************************/
export interface GridOptions {
    /****************************************************************
     * Don't forget to update ComponentUtil if changing this class. PLEASE!*
     ****************************************************************/
    rowDragManaged?: boolean;
    suppressRowDrag?: boolean;
    ensureDomOrder?: boolean;
    deltaRowDataMode?: boolean;
    scrollbarWidth?: number;
    toolPanelSuppressRowGroups?: boolean;
    toolPanelSuppressValues?: boolean;
    toolPanelSuppressPivots?: boolean;
    toolPanelSuppressPivotMode?: boolean;
    toolPanelSuppressSideButtons?: boolean;
    toolPanelSuppressColumnFilter?: boolean;
    toolPanelSuppressColumnSelectAll?: boolean;
    toolPanelSuppressColumnExpandAll?: boolean;
    contractColumnSelection?: boolean;
    suppressRowClickSelection?: boolean;
    suppressCellSelection?: boolean;
    sortingOrder?: string[];
    suppressMultiSort?: boolean;
    multiSortKey?: string;
    accentedSort?: boolean;
    suppressHorizontalScroll?: boolean;
    suppressTabbing?: boolean;
    unSortIcon?: boolean;
    rowBuffer?: number;
    enableRtl?: boolean;
    enableColResize?: boolean;
    enableCellExpressions?: boolean;
    enableSorting?: boolean;
    enableServerSideSorting?: boolean;
    enableFilter?: boolean;
    enableServerSideFilter?: boolean;
    enableStatusBar?: boolean;
    alwaysShowStatusBar?: boolean;
    enableGroupEdit?: boolean;
    enterMovesDownAfterEdit?: boolean;
    enterMovesDown?: boolean;
    suppressMiddleClickScrolls?: boolean;
    suppressPreventDefaultOnMouseWheel?: boolean;
    suppressScrollOnNewData?: boolean;
    suppressMenuHide?: boolean;
    singleClickEdit?: boolean;
    suppressClickEdit?: boolean;
    stopEditingWhenGridLosesFocus?: boolean;
    debug?: boolean;
    icons?: any;
    angularCompileRows?: boolean;
    angularCompileFilters?: boolean;
    angularCompileHeaders?: boolean;
    suppressLoadingOverlay?: boolean;
    suppressNoRowsOverlay?: boolean;
    suppressAutoSize?: boolean;
    autoSizePadding?: number;
    animateRows?: boolean;
    suppressColumnMoveAnimation?: boolean;
    suppressMovableColumns?: boolean;
    suppressDragLeaveHidesColumns?: boolean;
    suppressMakeColumnVisibleAfterUnGroup?: boolean;
    suppressParentsInRowNodes?: boolean;
    suppressFieldDotNotation?: boolean;
    suppressCopyRowsToClipboard?: boolean;
    clipboardDeliminator?: string;
    suppressAggFuncInHeader?: boolean;
    suppressAggAtRootLevel?: boolean;
    suppressFocusAfterRefresh?: boolean;
    rowModelType?: string;
    pivotMode?: boolean;
    pivotTotals?: boolean;
    suppressEnterpriseResetOnNewColumns?: boolean;
    enableRangeSelection?: boolean;
    suppressMultiRangeSelection?: boolean;
    rowGroupPanelShow?: string;
    pivotPanelShow?: string;
    suppressContextMenu?: boolean;
    allowContextMenuWithControlKey?: boolean;
    rememberGroupStateWhenNewData?: boolean;
    viewportRowModelPageSize?: number;
    viewportRowModelBufferSize?: number;
    enableCellChangeFlash?: boolean;
    quickFilterText?: string;
    cacheQuickFilter?: boolean;
    aggFuncs?: {
        [key: string]: IAggFunc;
    };
    suppressColumnVirtualisation?: boolean;
    layoutInterval?: number;
    functionsReadOnly?: boolean;
    functionsPassive?: boolean;
    maxConcurrentDatasourceRequests?: number;
    maxBlocksInCache?: number;
    purgeClosedRowNodes?: boolean;
    domLayout?: string;
    suppressChangeDetection?: boolean;
    aggregateOnlyChangedColumns?: boolean;
    valueCache?: boolean;
    valueCacheNeverExpires?: boolean;
    batchUpdateWaitMillis?: number;
    cacheOverflowSize?: number;
    infiniteInitialRowCount?: number;
    paginationPageSize?: number;
    cacheBlockSize?: number;
    paginationAutoPageSize?: boolean;
    paginationStartPage?: number;
    suppressPaginationPanel?: boolean;
    pagination?: boolean;
    editType?: string;
    suppressTouch?: boolean;
    suppressAsyncEvents?: boolean;
    embedFullWidthRows?: boolean;
    excelStyles?: any[];
    floatingFilter?: boolean;
    suppressExcelExport?: boolean;
    suppressCsvExport?: boolean;
    colWidth?: number;
    minColWidth?: number;
    maxColWidth?: number;
    suppressPropertyNamesCheck?: boolean;
    /****************************************************************
     * Don't forget to update ComponentUtil if changing this class. *
     ****************************************************************/
    localeText?: any;
    localeTextFunc?: Function;
    suppressAnimationFrame?: boolean;
    defaultColGroupDef?: ColGroupDef;
    defaultColDef?: ColDef;
    defaultExportParams?: CsvExportParams;
    /****************************************************************
     * Don't forget to update ComponentUtil if changing this class. *
     ****************************************************************/
    groupSuppressAutoColumn?: boolean;
    groupSelectsChildren?: boolean;
    groupSelectsFiltered?: boolean;
    groupIncludeFooter?: boolean;
    groupUseEntireRow?: boolean;
    groupRemoveSingleChildren?: boolean;
    groupRemoveLowestSingleChildren?: boolean;
    groupSuppressRow?: boolean;
    groupHideOpenParents?: boolean;
    groupMultiAutoColumn?: boolean;
    groupSuppressBlankHeader?: boolean;
    groupColumnDef?: ColDef;
    autoGroupColumnDef?: ColDef;
    forPrint?: boolean;
    enableOldSetFilterModel?: boolean;
    /****************************************************************
     * Don't forget to update ComponentUtil if changing this class. *
     ****************************************************************/
    context?: any;
    rowStyle?: any;
    rowClass?: string | string[];
    groupDefaultExpanded?: number;
    slaveGrids?: GridOptions[];
    alignedGrids?: GridOptions[];
    rowSelection?: string;
    rowDeselection?: boolean;
    rowMultiSelectWithClick?: boolean;
    isRowSelectable?: IsRowSelectable;
    overlayLoadingTemplate?: string;
    overlayNoRowsTemplate?: string;
    rowHeight?: number;
    detailRowHeight?: number;
    popupParent?: HTMLElement;
    masterDetail?: boolean;
    isRowMaster?: IsRowMaster;
    detailCellRenderer?: {
        new (): ICellRendererComp;
    } | ICellRendererFunc | string;
    detailCellRendererFramework?: any;
    detailCellRendererParams?: any;
    /****************************************************************
     * Don't forget to update ComponentUtil if changing this class. *
     ****************************************************************/
    rowData?: any[];
    pinnedTopRowData?: any[];
    pinnedBottomRowData?: any[];
    showToolPanel?: boolean;
    columnDefs?: (ColDef | ColGroupDef)[];
    columnTypes?: {
        [key: string]: ColDef;
    };
    datasource?: IDatasource;
    viewportDatasource?: IViewportDatasource;
    enterpriseDatasource?: IEnterpriseDatasource;
    headerHeight?: number;
    pivotHeaderHeight?: number;
    groupHeaderHeight?: number;
    pivotGroupHeaderHeight?: number;
    floatingFiltersHeight?: number;
    /****************************************************************
     * Don't forget to update ComponentUtil if changing this class. *
     ****************************************************************/
    paginationNumberFormatter?: (params: PaginationNumberFormatterParams) => string;
    postProcessPopup?: (params: PostProcessPopupParams) => void;
    frameworkComponents?: {
        [p: string]: {
            new (): any;
        };
    };
    components?: {
        [p: string]: AgGridRegisteredComponentInput<IComponent<any>>;
    };
    dateComponent?: {
        new (): IDateComp;
    };
    dateComponentFramework?: any;
    groupRowRenderer?: {
        new (): ICellRendererComp;
    } | ICellRendererFunc | string;
    groupRowRendererFramework?: any;
    groupRowRendererParams?: any;
    groupRowInnerRenderer?: {
        new (): ICellRendererComp;
    } | ICellRendererFunc | string;
    groupRowInnerRendererFramework?: any;
    isExternalFilterPresent?(): boolean;
    doesExternalFilterPass?(node: RowNode): boolean;
    getRowStyle?: Function;
    getRowClass?: (params: any) => (string | string[]);
    rowClassRules?: {
        [cssClassName: string]: (Function | string);
    };
    getRowHeight?: Function;
    sendToClipboard?: (params: any) => void;
    navigateToNextCell?: (params: NavigateToNextCellParams) => GridCellDef;
    tabToNextCell?: (params: TabToNextCellParams) => GridCellDef;
    getDocument?: () => Document;
    defaultGroupSortComparator?: (nodeA: RowNode, nodeB: RowNode) => number;
    loadingOverlayComponent?: {
        new (): ILoadingOverlayComp;
    } | string;
    loadingOverlayComponentFramework?: any;
    noRowsOverlayComponent?: {
        new (): INoRowsOverlayComp;
    } | string;
    noRowsOverlayComponentFramework?: any;
    fullWidthCellRenderer?: {
        new (): ICellRendererComp;
    } | ICellRendererFunc | string;
    fullWidthCellRendererFramework?: any;
    fullWidthCellRendererParams?: any;
    isFullWidthCell?(rowNode: RowNode): boolean;
    groupRowAggNodes?(nodes: RowNode[]): any;
    getBusinessKeyForNode?(node: RowNode): string;
    getNodeChildDetails?: GetNodeChildDetails;
    getDataPath?: GetDataPath;
    treeData?: boolean;
    getContextMenuItems?: GetContextMenuItems;
    getMainMenuItems?: GetMainMenuItems;
    getRowNodeId?: GetRowNodeIdFunc;
    getChildCount?(dataItem: any): number;
    doesDataFlower?(dataItem: any): boolean;
    processRowPostCreate?(params: ProcessRowParams): void;
    processCellForClipboard?(params: ProcessCellForExportParams): any;
    processHeaderForClipboard?(params: ProcessHeaderForExportParams): any;
    processCellFromClipboard?(params: ProcessCellForExportParams): any;
    processSecondaryColDef?(colDef: ColDef): void;
    processSecondaryColGroupDef?(colGroupDef: ColGroupDef): void;
    postSort?(nodes: RowNode[]): void;
    /****************************************************************
     * Don't forget to update ComponentUtil if changing this class. *
     ****************************************************************/
    onColumnEverythingChanged?(event?: ColumnEverythingChangedEvent): void;
    onNewColumnsLoaded?(event?: NewColumnsLoadedEvent): void;
    onColumnPivotModeChanged?(event?: ColumnPivotModeChangedEvent): void;
    onColumnRowGroupChanged?(event?: ColumnRowGroupChangedEvent): void;
    onColumnPivotChanged?(event?: ColumnPivotChangedEvent): void;
    onGridColumnsChanged?(event?: GridColumnsChangedEvent): void;
    onColumnValueChanged?(event?: ColumnValueChangedEvent): void;
    onColumnMoved?(event?: ColumnMovedEvent): void;
    onColumnVisible?(event?: ColumnVisibleEvent): void;
    onColumnPinned?(event?: ColumnPinnedEvent): void;
    onColumnGroupOpened?(event?: ColumnGroupOpenedEvent): void;
    onColumnResized?(event?: ColumnResizedEvent): void;
    onDisplayedColumnsChanged?(event?: DisplayedColumnsChangedEvent): void;
    onVirtualColumnsChanged?(event?: VirtualColumnsChangedEvent): void;
    onRowGroupOpened?(event?: RowGroupOpenedEvent): void;
    onRowDataChanged?(event?: RowDataChangedEvent): void;
    onPinnedRowDataChanged?(event?: PinnedRowDataChangedEvent): void;
    onRangeSelectionChanged?(event?: RangeSelectionChangedEvent): void;
    onColumnRowGroupChangeRequest?(event?: ColumnRowGroupChangeRequestEvent): void;
    onColumnPivotChangeRequest?(event?: ColumnPivotChangeRequestEvent): void;
    onColumnValueChangeRequest?(event?: ColumnValueChangeRequestEvent): void;
    onColumnAggFuncChangeRequest?(event?: ColumnAggFuncChangeRequestEvent): void;
    onModelUpdated?(event?: ModelUpdatedEvent): void;
    onCellClicked?(event?: CellClickedEvent): void;
    onCellMouseDown?(event?: CellMouseDownEvent): void;
    onCellDoubleClicked?(event?: CellDoubleClickedEvent): void;
    onCellContextMenu?(event?: CellContextMenuEvent): void;
    onCellValueChanged?(event?: CellValueChangedEvent): void;
    onCellMouseOver?(event?: CellMouseOverEvent): void;
    onCellMouseOut?(event?: CellMouseOutEvent): void;
    onRowValueChanged?(event?: RowValueChangedEvent): void;
    onRowEditingStarted?(event?: RowEditingStartedEvent): void;
    onRowEditingStopped?(event?: RowEditingStoppedEvent): void;
    onCellEditingStarted?(event?: CellEditingStartedEvent): void;
    onCellEditingStopped?(event?: CellEditingStoppedEvent): void;
    onCellFocused?(event?: CellFocusedEvent): void;
    onRowSelected?(event?: RowSelectedEvent): void;
    onSelectionChanged?(event?: SelectionChangedEvent): void;
    onFilterChanged?(event?: FilterChangedEvent): void;
    onFilterModified?(event?: FilterModifiedEvent): void;
    onSortChanged?(event?: SortChangedEvent): void;
    onVirtualRowRemoved?(event?: VirtualRowRemovedEvent): void;
    onRowClicked?(event?: RowClickedEvent): void;
    onRowDoubleClicked?(event?: RowDoubleClickedEvent): void;
    onGridReady?(event?: GridReadyEvent): void;
    onGridSizeChanged?(event?: GridSizeChangedEvent): void;
    onViewportChanged?(event?: ViewportChangedEvent): void;
    onDragStarted?(event?: DragStartedEvent): void;
    onDragStopped?(event?: DragStoppedEvent): void;
    onPaginationChanged?(event?: PaginationChangedEvent): void;
    onRowDragEnter?(event?: DraggingEvent): void;
    onRowDragMove?(event?: DraggingEvent): void;
    onRowDragLeave?(event?: DraggingEvent): void;
    onRowDragEnd?(event?: DraggingEvent): void;
    /****************************************************************
     * Don't forget to update ComponentUtil if changing this class. *
     ****************************************************************/
    api?: GridApi;
    columnApi?: ColumnApi;
}
export interface GetDataPath {
    (data: any): string[];
}
export interface GetNodeChildDetails {
    (dataItem: any): NodeChildDetails;
}
export interface IsRowMaster {
    (dataItem: any): boolean;
}
export interface IsRowSelectable {
    (node: RowNode): boolean;
}
export interface NodeChildDetails {
    group: boolean;
    children?: any[];
    expanded?: boolean;
    field?: string;
    key?: any;
}
export interface GetContextMenuItemsParams {
    defaultItems: string[];
    column: Column;
    node: RowNode;
    value: any;
    api: GridApi;
    columnApi: ColumnApi;
    context: any;
}
export interface GetContextMenuItems {
    (params: GetContextMenuItemsParams): (string | MenuItemDef)[];
}
export interface MenuItemDef {
    name: string;
    disabled?: boolean;
    shortcut?: string;
    action?: () => void;
    checked?: boolean;
    icon?: HTMLElement | string;
    subMenu?: (MenuItemDef | string)[];
    cssClasses?: string[];
    tooltip?: string;
}
export interface GetMainMenuItemsParams {
    column: Column;
    api: GridApi;
    columnApi: ColumnApi;
    context: any;
    defaultItems: string[];
}
export interface GetMainMenuItems {
    (params: GetMainMenuItemsParams): (string | MenuItemDef)[];
}
export interface GetRowNodeIdFunc {
    (data: any): string;
}
export interface ProcessRowParams {
    eRow: HTMLElement;
    ePinnedLeftRow: HTMLElement;
    ePinnedRightRow: HTMLElement;
    rowIndex: number;
    node: RowNode;
    api: GridApi;
    columnApi: ColumnApi;
    addRenderedRowListener: (eventType: string, listener: Function) => void;
    context: any;
}
export interface NavigateToNextCellParams {
    key: number;
    previousCellDef: GridCellDef;
    nextCellDef: GridCellDef;
    event: KeyboardEvent;
}
export interface TabToNextCellParams {
    backwards: boolean;
    editing: boolean;
    previousCellDef: GridCellDef;
    nextCellDef: GridCellDef;
}
export interface PostProcessPopupParams {
    column?: Column;
    rowNode?: RowNode;
    ePopup: HTMLElement;
    type: string;
    eventSource?: HTMLElement;
    mouseEvent?: MouseEvent | Touch;
}
export interface PaginationNumberFormatterParams {
    value: number;
}
}
declare module 'ag-grid/dist/lib/entities/gridOptions' {
export * from '~ag-grid/dist/lib/entities/gridOptions';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/entities/originalColumnGroupChild.d.ts
declare module '~ag-grid/dist/lib/entities/originalColumnGroupChild' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export interface OriginalColumnGroupChild {
    isVisible(): boolean;
    getColumnGroupShow(): string;
    getId(): string;
}
}
declare module 'ag-grid/dist/lib/entities/originalColumnGroupChild' {
export * from '~ag-grid/dist/lib/entities/originalColumnGroupChild';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iViewportDatasource.d.ts
declare module '~ag-grid/dist/lib/interfaces/iViewportDatasource' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export interface IViewportDatasource {
    /** Gets called exactly once before viewPort is used. Passes methods to be used to tell viewPort of data loads / changes. */
    init(params: IViewportDatasourceParams): void;
    /** Tell the viewport what the scroll position of the grid is, so it knows what rows it has to get */
    setViewportRange(firstRow: number, lastRow: number): void;
    /** Gets called once when viewPort is no longer used. If you need to do any cleanup, do it here. */
    destroy?(): void;
}
export interface IViewportDatasourceParams {
    /** datasource calls this method when the total row count changes. This in turn sets the height of the grids vertical scroll. */
    setRowCount: (count: number) => void;
    /** datasource calls this when new data arrives. The grid then updates the provided rows. The rows are mapped [rowIndex]=>rowData].*/
    setRowData: (rowData: {
        [key: number]: any;
    }) => void;
    /** datasource calls this when it wants a row node - typically used when it wants to update the row node */
    getRow: (rowIndex: number) => RowNode;
}
}
declare module 'ag-grid/dist/lib/interfaces/iViewportDatasource' {
export * from '~ag-grid/dist/lib/interfaces/iViewportDatasource';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iContextMenuFactory.d.ts
declare module '~ag-grid/dist/lib/interfaces/iContextMenuFactory' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export interface IContextMenuFactory {
    showMenu(node: RowNode, column: Column, value: any, mouseEvent: MouseEvent | Touch): void;
    hideActiveMenu(): void;
}
}
declare module 'ag-grid/dist/lib/interfaces/iContextMenuFactory' {
export * from '~ag-grid/dist/lib/interfaces/iContextMenuFactory';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iCompFactory.d.ts
declare module '~ag-grid/dist/lib/interfaces/iCompFactory' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Component } from '~ag-grid/dist/lib/widgets/component';
export interface ICompFactory {
    create(): Component;
}
}
declare module 'ag-grid/dist/lib/interfaces/iCompFactory' {
export * from '~ag-grid/dist/lib/interfaces/iCompFactory';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iRowNodeStage.d.ts
declare module '~ag-grid/dist/lib/interfaces/iRowNodeStage' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { RowNodeTransaction } from '~ag-grid/dist/lib/rowModels/inMemory/inMemoryRowModel';
import { ChangedPath } from '~ag-grid/dist/lib/rowModels/inMemory/changedPath';
export interface StageExecuteParams {
    rowNode: RowNode;
    rowNodeTransaction?: RowNodeTransaction;
    rowNodeOrder?: {
        [id: string]: number;
    };
    changedPath?: ChangedPath;
}
export interface IRowNodeStage {
    execute(params: StageExecuteParams): any;
}
}
declare module 'ag-grid/dist/lib/interfaces/iRowNodeStage' {
export * from '~ag-grid/dist/lib/interfaces/iRowNodeStage';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iFilter.d.ts
declare module '~ag-grid/dist/lib/interfaces/iFilter' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Column } from '~ag-grid/dist/lib/entities/column';
import { ColDef } from '~ag-grid/dist/lib/entities/colDef';
import { IRowModel } from '~ag-grid/dist/lib/interfaces/iRowModel';
import { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
export interface IFilter {
    /** This is used to show the filter icon in the header. If true, the filter icon will be shown. */
    isFilterActive(): boolean;
    /** The grid will ask each active filter, in turn, whether each row in the grid passes. If any
     filter fails, then the row will be excluded from the final set. The method is provided a
     params object with attributes node (the rodNode the grid creates that wraps the data) and data
     (the data object that you provided to the grid for that row). */
    doesFilterPass(params: IDoesFilterPassParams): boolean;
    /** Gets the filter state for storing */
    getModel(): any;
    /** Restores the filter state. */
    setModel(model: any): void;
    /** Gets called when new rows are inserted into the grid. If the filter needs to change it's state
     after rows are loaded, it can do it here. */
    onNewRowsLoaded?(): void;
    /** If using React or Angular 2, returns the underlying component instance, so you can call methods
     * on it if you want. */
    getFrameworkComponentInstance?(): any;
    /**
     * Optional method used by ag-Grid when rendering floating filters and there isn't a floating filter
     * associated for this filter, this will happen if you create a custom filter and NOT a custom floating
     * filter.
     */
    getModelAsString?(model: any): string;
    /**
     * Optional method used by ag-Grid when rendering floating filters.
     *
     * If this method IS NOT IMPLEMENTED, when the floating filter changes, ag-Grid will automatically call
     * IFilterParams.filterChangedCallback,  triggering the filtering of the data based on the changes from
     * the floating filter. For the simplest cases this is enough.
     *
     * IF IT IS IMPLEMENTED. ag-Grid will delegate into this method the responsibility of calling
     * IFilterParams.filterChangedCallback. This is useful if additional logic is necessary, for instance
     * ag-Grid uses this in addition with the applyNow flag to handle the apply button logic in the default
     * ag-Grid filters.
     *
     *     change: The exact same object passed on FloatingFilter.onFloatingFilterChanged
     */
    onFloatingFilterChanged?(change: any): void;
}
export interface SerializedFilter {
    filterType: string;
}
export interface IFilterComp extends IFilter, IComponent<IFilterParams> {
}
export interface IDoesFilterPassParams {
    node: RowNode;
    data: any;
}
export interface IFilterParams {
    clearButton?: boolean;
    applyButton?: boolean;
    newRowsAction?: string;
    column: Column;
    colDef: ColDef;
    rowModel: IRowModel;
    filterChangedCallback: () => void;
    filterModifiedCallback: () => void;
    valueGetter: (rowNode: RowNode) => any;
    doesRowPassOtherFilter: (rowNode: RowNode) => boolean;
    context: any;
    $scope: any;
    filterOptions?: string[];
    defaultOption?: string;
    textFormatter?: (from: string) => string;
}
}
declare module 'ag-grid/dist/lib/interfaces/iFilter' {
export * from '~ag-grid/dist/lib/interfaces/iFilter';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iSetFilterParams.d.ts
declare module '~ag-grid/dist/lib/interfaces/iSetFilterParams' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IFilterParams } from '~ag-grid/dist/lib/interfaces/iFilter';
import { ICellRendererComp, ICellRendererFunc } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
import { ColDef } from '~ag-grid/dist/lib/entities/colDef';
export interface SetFilterValuesFuncParams {
    success: (values: string[]) => void;
    colDef: ColDef;
}
export type SetFilterValuesFunc = (params: SetFilterValuesFuncParams) => void;
export type SetFilterValues = SetFilterValuesFunc | any[];
export interface ISetFilterParams extends IFilterParams {
    suppressRemoveEntries?: boolean;
    values?: SetFilterValues;
    cellHeight: number;
    apply: boolean;
    suppressSorting: boolean;
    cellRenderer: {
        new (): ICellRendererComp;
    } | ICellRendererFunc | string;
    newRowsAction: string;
    suppressMiniFilter: boolean;
    selectAllOnMiniFilter: boolean;
    comparator?: (a: any, b: any) => number;
    debounceMs?: number;
}
}
declare module 'ag-grid/dist/lib/interfaces/iSetFilterParams' {
export * from '~ag-grid/dist/lib/interfaces/iSetFilterParams';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iSerializedSetFilter.d.ts
declare module '~ag-grid/dist/lib/interfaces/iSerializedSetFilter' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { SerializedFilter } from '~ag-grid/dist/lib/interfaces/iFilter';
export interface SerializedSetFilter extends SerializedFilter {
    values: string[];
}
}
declare module 'ag-grid/dist/lib/interfaces/iSerializedSetFilter' {
export * from '~ag-grid/dist/lib/interfaces/iSerializedSetFilter';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/rendering/dateComponent.d.ts
declare module '~ag-grid/dist/lib/rendering/dateComponent' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
import { IDateFilterParams } from '~ag-grid/dist/lib/filter/dateFilter';
export interface IDate {
    /** Returns the current date represented by this editor */
    getDate(): Date;
    /** Sets the date represented by this component */
    setDate(date: Date): void;
}
export interface IDateParams {
    /** Method for component to tell ag-Grid that the date has changed. */
    onDateChanged: () => void;
    filterParams: IDateFilterParams;
}
export interface IDateComp extends IComponent<IDateParams>, IDate {
}
}
declare module 'ag-grid/dist/lib/rendering/dateComponent' {
export * from '~ag-grid/dist/lib/rendering/dateComponent';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iComponent.d.ts
declare module '~ag-grid/dist/lib/interfaces/iComponent' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Promise } from '~ag-grid/dist/lib/utils';
export interface IAfterGuiAttachedParams {
    hidePopup: () => void;
}
export interface IComponent<T> {
    /** Return the DOM element of your editor, this is what the grid puts into the DOM */
    getGui(): HTMLElement;
    /** Gets called once by grid after editing is finished - if your editor needs to do any cleanup, do it here */
    destroy?(): void;
    /** A hook to perform any necessary operation just after the gui for this component has been renderer
     in the screen.
     If the filter popup is closed and reopened, this method is called each time the filter is shown.
     This is useful for any
     logic that requires attachment before executing, such as putting focus on a particular DOM
     element. The params has one callback method 'hidePopup', which you can call at any later
     point to hide the popup - good if you have an 'Apply' button and you want to hide the popup
     after it is pressed. */
    afterGuiAttached?(params?: IAfterGuiAttachedParams): void;
    /** The init(params) method is called on the filter once. See below for details on the parameters. */
    init?(params: T): Promise<void> | void;
}
}
declare module 'ag-grid/dist/lib/interfaces/iComponent' {
export * from '~ag-grid/dist/lib/interfaces/iComponent';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/headerRendering/header/headerComp.d.ts
declare module '~ag-grid/dist/lib/headerRendering/header/headerComp' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { Column } from '~ag-grid/dist/lib/entities/column';
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
import { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
import { GridApi } from '~ag-grid/dist/lib/gridApi';
export interface IHeaderParams {
    column: Column;
    displayName: string;
    enableSorting: boolean;
    enableMenu: boolean;
    showColumnMenu: (source: HTMLElement) => void;
    progressSort: (multiSort?: boolean) => void;
    setSort: (sort: string, multiSort?: boolean) => void;
    columnApi: ColumnApi;
    api: GridApi;
    context: any;
    template: string;
}
export interface IHeader {
}
export interface IHeaderComp extends IHeader, IComponent<IHeaderParams> {
}
export class HeaderComp extends Component implements IHeaderComp {
    private static TEMPLATE;
    private gridOptionsWrapper;
    private sortController;
    private menuFactory;
    private eventService;
    private eFilter;
    private eSortAsc;
    private eSortDesc;
    private eSortNone;
    private eSortOrder;
    private eMenu;
    private eLabel;
    private eText;
    private params;
    private lastMovingChanged;
    init(params: IHeaderParams): void;
    private setupText(displayName);
    private setupIcons(column);
    private addInIcon(iconName, eParent, column);
    private setupTap();
    private setupMenu();
    showMenu(eventSource: HTMLElement): void;
    private removeSortIcons();
    setupSort(): void;
    private onSortChanged();
    private setMultiSortOrder();
    private setupFilterIcon();
    private onFilterChanged();
}
}
declare module 'ag-grid/dist/lib/headerRendering/header/headerComp' {
export * from '~ag-grid/dist/lib/headerRendering/header/headerComp';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/headerRendering/headerGroup/headerGroupComp.d.ts
declare module '~ag-grid/dist/lib/headerRendering/headerGroup/headerGroupComp' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { Component } from '~ag-grid/dist/lib/widgets/component';
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
import { ColumnGroup } from '~ag-grid/dist/lib/entities/columnGroup';
import { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
import { GridApi } from '~ag-grid/dist/lib/gridApi';
export interface IHeaderGroupParams {
    columnGroup: ColumnGroup;
    displayName: string;
    setExpanded: (expanded: boolean) => void;
    api: GridApi;
    columnApi: ColumnApi;
    context: any;
}
export interface IHeaderGroup {
}
export interface IHeaderGroupComp extends IHeaderGroup, IComponent<IHeaderGroupParams> {
}
export class HeaderGroupComp extends Component implements IHeaderGroupComp {
    private columnController;
    private gridOptionsWrapper;
    static TEMPLATE: string;
    private params;
    private eOpenIcon;
    private eCloseIcon;
    constructor();
    init(params: IHeaderGroupParams): void;
    private setupExpandIcons();
    private addTouchAndClickListeners(eElement, action);
    private updateIconVisibility();
    private addInIcon(iconName, refName);
    private addGroupExpandIcon();
    private setupLabel();
}
}
declare module 'ag-grid/dist/lib/headerRendering/headerGroup/headerGroupComp' {
export * from '~ag-grid/dist/lib/headerRendering/headerGroup/headerGroupComp';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/filter/textAndNumberFilterParameters.d.ts
declare module '~ag-grid/dist/lib/filter/textAndNumberFilterParameters' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export interface TextAndNumberFilterParameters {
    /** What to do when new rows are loaded. The default is to reset the filter, to keep it in line with 'set' filters. If you want to keep the selection, then set this value to 'keep'. */
    newRowsAction?: string;
}
}
declare module 'ag-grid/dist/lib/filter/textAndNumberFilterParameters' {
export * from '~ag-grid/dist/lib/filter/textAndNumberFilterParameters';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/columnController/columnApi.d.ts
declare module '~ag-grid/dist/lib/columnController/columnApi' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ColDef, ColGroupDef } from '~ag-grid/dist/lib/entities/colDef';
import { ColumnGroupChild } from '~ag-grid/dist/lib/entities/columnGroupChild';
import { OriginalColumnGroup } from '~ag-grid/dist/lib/entities/originalColumnGroup';
import { ColumnGroup } from '~ag-grid/dist/lib/entities/columnGroup';
import { Column } from '~ag-grid/dist/lib/entities/column';
export class ColumnApi {
    private columnController;
    sizeColumnsToFit(gridWidth: any): void;
    setColumnGroupOpened(group: OriginalColumnGroup | string, newValue: boolean): void;
    getColumnGroup(name: string, instanceId?: number): ColumnGroup;
    getOriginalColumnGroup(name: string): OriginalColumnGroup;
    getDisplayNameForColumn(column: Column, location: string): string;
    getDisplayNameForColumnGroup(columnGroup: ColumnGroup, location: string): string;
    getColumn(key: any): Column;
    setColumnState(columnState: any): boolean;
    getColumnState(): any[];
    resetColumnState(): void;
    getColumnGroupState(): {
        groupId: string;
        open: boolean;
    }[];
    setColumnGroupState(stateItems: ({
        groupId: string;
        open: boolean;
    })[]): void;
    resetColumnGroupState(): void;
    isPinning(): boolean;
    isPinningLeft(): boolean;
    isPinningRight(): boolean;
    getDisplayedColAfter(col: Column): Column;
    getDisplayedColBefore(col: Column): Column;
    setColumnVisible(key: string | Column, visible: boolean): void;
    setColumnsVisible(keys: (string | Column)[], visible: boolean): void;
    setColumnPinned(key: string | Column, pinned: string): void;
    setColumnsPinned(keys: (string | Column)[], pinned: string): void;
    getAllColumns(): Column[];
    getAllGridColumns(): Column[];
    getDisplayedLeftColumns(): Column[];
    getDisplayedCenterColumns(): Column[];
    getDisplayedRightColumns(): Column[];
    getAllDisplayedColumns(): Column[];
    getAllDisplayedVirtualColumns(): Column[];
    moveColumn(key: string | Column, toIndex: number): void;
    moveColumnByIndex(fromIndex: number, toIndex: number): void;
    moveColumns(columnsToMoveKeys: (string | Column)[], toIndex: number): void;
    moveRowGroupColumn(fromIndex: number, toIndex: number): void;
    setColumnAggFunc(column: Column, aggFunc: string): void;
    setColumnWidth(key: string | Column, newWidth: number, finished?: boolean): void;
    setPivotMode(pivotMode: boolean): void;
    isPivotMode(): boolean;
    getSecondaryPivotColumn(pivotKeys: string[], valueColKey: string | Column): Column;
    setValueColumns(colKeys: (string | Column)[]): void;
    getValueColumns(): Column[];
    removeValueColumn(colKey: (string | Column)): void;
    removeValueColumns(colKeys: (string | Column)[]): void;
    addValueColumn(colKey: (string | Column)): void;
    addValueColumns(colKeys: (string | Column)[]): void;
    setRowGroupColumns(colKeys: (string | Column)[]): void;
    removeRowGroupColumn(colKey: string | Column): void;
    removeRowGroupColumns(colKeys: (string | Column)[]): void;
    addRowGroupColumn(colKey: string | Column): void;
    addRowGroupColumns(colKeys: (string | Column)[]): void;
    getRowGroupColumns(): Column[];
    setPivotColumns(colKeys: (string | Column)[]): void;
    removePivotColumn(colKey: string | Column): void;
    removePivotColumns(colKeys: (string | Column)[]): void;
    addPivotColumn(colKey: string | Column): void;
    addPivotColumns(colKeys: (string | Column)[]): void;
    getPivotColumns(): Column[];
    getLeftDisplayedColumnGroups(): ColumnGroupChild[];
    getCenterDisplayedColumnGroups(): ColumnGroupChild[];
    getRightDisplayedColumnGroups(): ColumnGroupChild[];
    getAllDisplayedColumnGroups(): ColumnGroupChild[];
    autoSizeColumn(key: string | Column): void;
    autoSizeColumns(keys: (string | Column)[]): void;
    autoSizeAllColumns(): void;
    setSecondaryColumns(colDefs: (ColDef | ColGroupDef)[]): void;
    columnGroupOpened(group: OriginalColumnGroup | string, newValue: boolean): void;
    hideColumns(colIds: any, hide: any): void;
    hideColumn(colId: any, hide: any): void;
    setState(columnState: any): boolean;
    getState(): any[];
    resetState(): void;
    getAggregationColumns(): Column[];
    removeAggregationColumn(colKey: (string | Column)): void;
    removeAggregationColumns(colKeys: (string | Column)[]): void;
    addAggregationColumn(colKey: (string | Column)): void;
    addAggregationColumns(colKeys: (string | Column)[]): void;
    setColumnAggFunction(column: Column, aggFunc: string): void;
    getDisplayNameForCol(column: any): string;
}
}
declare module 'ag-grid/dist/lib/columnController/columnApi' {
export * from '~ag-grid/dist/lib/columnController/columnApi';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iRichCellEditorParams.d.ts
declare module '~ag-grid/dist/lib/interfaces/iRichCellEditorParams' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { ICellRendererComp, ICellRendererFunc } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
import { ICellEditorParams } from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
export interface IRichCellEditorParams extends ICellEditorParams {
    values: string[];
    cellHeight: number;
    cellRenderer: {
        new (): ICellRendererComp;
    } | ICellRendererFunc | string;
}
}
declare module 'ag-grid/dist/lib/interfaces/iRichCellEditorParams' {
export * from '~ag-grid/dist/lib/interfaces/iRichCellEditorParams';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/components/framework/frameworkComponentWrapper.d.ts
declare module '~ag-grid/dist/lib/components/framework/frameworkComponentWrapper' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
import { IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
/**
 * B the business interface (ie IHeader)
 * A the agGridComponent interface (ie IHeaderComp). The final object acceptable by ag-grid
 */
export interface FrameworkComponentWrapper {
    wrap<A extends IComponent<any>>(frameworkComponent: {
        new (): any;
    }, methodList: string[], optionalMethodList?: string[], componentName?: string): A;
}
export interface WrapableInterface {
    hasMethod(name: string): boolean;
    callMethod(name: string, args: IArguments): void;
    addMethod(name: string, callback: Function): void;
}
export abstract class BaseComponentWrapper<F extends WrapableInterface> implements FrameworkComponentWrapper {
    wrap<A extends IComponent<any>>(OriginalConstructor: {
        new (): any;
    }, mandatoryMethodList: string[], optionalMethodList?: string[], componentName?: string): A;
    abstract createWrapper(OriginalConstructor: {
        new (): any;
    }, componentName?: string): F;
    private createMethod(wrapper, methodName, mandatory);
    private createMethodProxy(wrapper, methodName, mandatory);
}
}
declare module 'ag-grid/dist/lib/components/framework/frameworkComponentWrapper' {
export * from '~ag-grid/dist/lib/components/framework/frameworkComponentWrapper';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/interfaces/iFrameworkFactory.d.ts
declare module '~ag-grid/dist/lib/interfaces/iFrameworkFactory' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export interface IFrameworkFactory {
    /** Because Angular 2 uses Zones, you should not use setTimout(). So to get around this, we allow the framework
     * to specify how to execute setTimeout. The default is to just call the browser setTimeout(). */
    setTimeout(action: any, timeout?: any): void;
}
}
declare module 'ag-grid/dist/lib/interfaces/iFrameworkFactory' {
export * from '~ag-grid/dist/lib/interfaces/iFrameworkFactory';
}

// Generated by typings
// Source: node_modules/ag-grid/dist/lib/environment.d.ts
declare module '~ag-grid/dist/lib/environment' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export class Environment {
    private eGridDiv;
    private gridSize;
    private iconSize;
    private sassVariables;
    loadSassVariables(): void;
    getSassVariable(theme: string, key: string): number;
    getTheme(): string;
}
}
declare module 'ag-grid/dist/lib/environment' {
export * from '~ag-grid/dist/lib/environment';
}

// Generated by typings
// Source: node_modules/ag-grid/main.d.ts
declare module '~ag-grid/main' {
// Type definitions for ag-grid v17.1.1
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ag-grid/>
export { BalancedColumnTreeBuilder } from '~ag-grid/dist/lib/columnController/balancedColumnTreeBuilder';
export { ColumnController } from '~ag-grid/dist/lib/columnController/columnController';
export { ColumnKeyCreator } from '~ag-grid/dist/lib/columnController/columnKeyCreator';
export { ColumnUtils } from '~ag-grid/dist/lib/columnController/columnUtils';
export { DisplayedGroupCreator } from '~ag-grid/dist/lib/columnController/displayedGroupCreator';
export { GroupInstanceIdCreator } from '~ag-grid/dist/lib/columnController/groupInstanceIdCreator';
export { ComponentUtil } from '~ag-grid/dist/lib/components/componentUtil';
export { ColDefUtil } from '~ag-grid/dist/lib/components/colDefUtil';
export { ComponentProvider } from '~ag-grid/dist/lib/components/framework/componentProvider';
export { initialiseAgGridWithAngular1 } from '~ag-grid/dist/lib/components/agGridNg1';
export { initialiseAgGridWithWebComponents } from '~ag-grid/dist/lib/components/agGridWebComponent';
export { BeanStub } from '~ag-grid/dist/lib/context/beanStub';
export { Context, Autowired, PostConstruct, PreConstruct, Optional, Bean, Qualifier, PreDestroy } from '~ag-grid/dist/lib/context/context';
export { QuerySelector, Listener, RefSelector } from '~ag-grid/dist/lib/widgets/componentAnnotations';
export { ExcelCell, ExcelExportParams, ExcelRow, ExcelStyle, ExcelWorksheet, ExcelBorder, ExcelColumn, ExcelData, ExcelDataType } from '~ag-grid/dist/lib/interfaces/iExcelCreator';
export { DragAndDropService, DragSourceType, HDirection, VDirection, DropTarget, DragSource, DraggingEvent } from '~ag-grid/dist/lib/dragAndDrop/dragAndDropService';
export { DragService } from '~ag-grid/dist/lib/dragAndDrop/dragService';
export { Column } from '~ag-grid/dist/lib/entities/column';
export { ColumnGroup } from '~ag-grid/dist/lib/entities/columnGroup';
export { GridCell } from '~ag-grid/dist/lib/entities/gridCell';
export { GridRow } from '~ag-grid/dist/lib/entities/gridRow';
export { OriginalColumnGroup } from '~ag-grid/dist/lib/entities/originalColumnGroup';
export { RowNode } from '~ag-grid/dist/lib/entities/rowNode';
export { BaseFilter } from '~ag-grid/dist/lib/filter/baseFilter';
export { DateFilter } from '~ag-grid/dist/lib/filter/dateFilter';
export { FilterManager, FilterWrapper } from '~ag-grid/dist/lib/filter/filterManager';
export { NumberFilter } from '~ag-grid/dist/lib/filter/numberFilter';
export { TextFilter, SerializedTextFilter } from '~ag-grid/dist/lib/filter/textFilter';
export { IFloatingFilter, IFloatingFilterParams } from '~ag-grid/dist/lib/filter/floatingFilter';
export { GridPanel } from '~ag-grid/dist/lib/gridPanel/gridPanel';
export { ScrollVisibleService } from '~ag-grid/dist/lib/gridPanel/scrollVisibleService';
export { MouseEventService } from '~ag-grid/dist/lib/gridPanel/mouseEventService';
export { BodyDropPivotTarget } from '~ag-grid/dist/lib/headerRendering/bodyDropPivotTarget';
export { BodyDropTarget } from '~ag-grid/dist/lib/headerRendering/bodyDropTarget';
export { CssClassApplier } from '~ag-grid/dist/lib/headerRendering/cssClassApplier';
export { HeaderContainer } from '~ag-grid/dist/lib/headerRendering/headerContainer';
export { HeaderRenderer } from '~ag-grid/dist/lib/headerRendering/headerRenderer';
export { HeaderRowComp } from '~ag-grid/dist/lib/headerRendering/headerRowComp';
export { HorizontalResizeService } from '~ag-grid/dist/lib/headerRendering/horizontalResizeService';
export { MoveColumnController } from '~ag-grid/dist/lib/headerRendering/moveColumnController';
export { StandardMenuFactory } from '~ag-grid/dist/lib/headerRendering/standardMenu';
export { BorderLayout } from '~ag-grid/dist/lib/layout/borderLayout';
export { TabbedLayout } from '~ag-grid/dist/lib/layout/tabbedLayout';
export { VerticalStack } from '~ag-grid/dist/lib/layout/verticalStack';
export { TabbedItem } from '~ag-grid/dist/lib/layout/tabbedLayout';
export { simpleHttpRequest } from '~ag-grid/dist/lib/misc/simpleHttpRequest';
export { ICellEditor, ICellEditorComp, ICellEditorParams } from '~ag-grid/dist/lib/rendering/cellEditors/iCellEditor';
export { LargeTextCellEditor } from '~ag-grid/dist/lib/rendering/cellEditors/largeTextCellEditor';
export { PopupEditorWrapper } from '~ag-grid/dist/lib/rendering/cellEditors/popupEditorWrapper';
export { PopupSelectCellEditor } from '~ag-grid/dist/lib/rendering/cellEditors/popupSelectCellEditor';
export { PopupTextCellEditor } from '~ag-grid/dist/lib/rendering/cellEditors/popupTextCellEditor';
export { SelectCellEditor } from '~ag-grid/dist/lib/rendering/cellEditors/selectCellEditor';
export { TextCellEditor } from '~ag-grid/dist/lib/rendering/cellEditors/textCellEditor';
export { ICellRenderer, ICellRendererFunc, ICellRendererComp } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
export { AnimateShowChangeCellRenderer } from '~ag-grid/dist/lib/rendering/cellRenderers/animateShowChangeCellRenderer';
export { AnimateSlideCellRenderer } from '~ag-grid/dist/lib/rendering/cellRenderers/animateSlideCellRenderer';
export { GroupCellRenderer } from '~ag-grid/dist/lib/rendering/cellRenderers/groupCellRenderer';
export { ILoadingOverlayComp, ILoadingOverlayParams } from '~ag-grid/dist/lib/rendering/overlays/loadingOverlayComponent';
export { INoRowsOverlayComp, INoRowsOverlayParams } from '~ag-grid/dist/lib/rendering/overlays/noRowsOverlayComponent';
export { SetLeftFeature } from '~ag-grid/dist/lib/rendering/features/setLeftFeature';
export { AutoWidthCalculator } from '~ag-grid/dist/lib/rendering/autoWidthCalculator';
export { CellEditorFactory } from '~ag-grid/dist/lib/rendering/cellEditorFactory';
export { CellRendererFactory } from '~ag-grid/dist/lib/rendering/cellRendererFactory';
export { CellRendererService } from '~ag-grid/dist/lib/rendering/cellRendererService';
export { CheckboxSelectionComponent } from '~ag-grid/dist/lib/rendering/checkboxSelectionComponent';
export { CellComp } from '~ag-grid/dist/lib/rendering/cellComp';
export { RowComp } from '~ag-grid/dist/lib/rendering/rowComp';
export { RowRenderer } from '~ag-grid/dist/lib/rendering/rowRenderer';
export { ValueFormatterService } from '~ag-grid/dist/lib/rendering/valueFormatterService';
export { TextFormatter } from '~ag-grid/dist/lib/filter/textFilter';
export { FilterStage } from '~ag-grid/dist/lib/rowModels/inMemory/filterStage';
export { FlattenStage } from '~ag-grid/dist/lib/rowModels/inMemory/flattenStage';
export { SortStage } from '~ag-grid/dist/lib/rowModels/inMemory/sortStage';
export { PinnedRowModel } from '~ag-grid/dist/lib/rowModels/pinnedRowModel';
export { InMemoryRowModel, RowNodeTransaction } from '~ag-grid/dist/lib/rowModels/inMemory/inMemoryRowModel';
export { ChangedPath } from '~ag-grid/dist/lib/rowModels/inMemory/changedPath';
export { InMemoryNodeManager } from '~ag-grid/dist/lib/rowModels/inMemory/inMemoryNodeManager';
export { InfiniteRowModel } from '~ag-grid/dist/lib/rowModels/infinite/infiniteRowModel';
export { IEnterpriseGetRowsParams } from '~ag-grid/dist/lib/interfaces/iEnterpriseDatasource';
export { IEnterpriseGetRowsRequest } from '~ag-grid/dist/lib/interfaces/iEnterpriseDatasource';
export { InfiniteCacheParams } from '~ag-grid/dist/lib/rowModels/infinite/infiniteCache';
export { RowNodeBlock } from '~ag-grid/dist/lib/rowModels/cache/rowNodeBlock';
export { RowNodeBlockLoader } from '~ag-grid/dist/lib/rowModels/cache/rowNodeBlockLoader';
export { IEnterpriseRowModel } from '~ag-grid/dist/lib/interfaces/iEnterpriseRowModel';
export { IEnterpriseCache } from '~ag-grid/dist/lib/interfaces/iEnterpriseCache';
export { IEnterpriseDatasource, ColumnVO } from '~ag-grid/dist/lib/interfaces/iEnterpriseDatasource';
export { IToolPanel } from '~ag-grid/dist/lib/interfaces/iToolPanel';
export { RowNodeCache, RowNodeCacheParams } from '~ag-grid/dist/lib/rowModels/cache/rowNodeCache';
export { IGetRowsParams, IDatasource } from '~ag-grid/dist/lib/rowModels/iDatasource';
export { StylingService } from '~ag-grid/dist/lib/styling/stylingService';
export { AgCheckbox } from '~ag-grid/dist/lib/widgets/agCheckbox';
export { Component } from '~ag-grid/dist/lib/widgets/component';
export { PopupService } from '~ag-grid/dist/lib/widgets/popupService';
export { TouchListener, TapEvent, LongTapEvent } from '~ag-grid/dist/lib/widgets/touchListener';
export { RangeSelection, AddRangeSelectionParams } from '~ag-grid/dist/lib/interfaces/iRangeController';
export { IRangeController } from '~ag-grid/dist/lib/interfaces/iRangeController';
export { BaseFrameworkFactory } from '~ag-grid/dist/lib/baseFrameworkFactory';
export { CellNavigationService } from '~ag-grid/dist/lib/cellNavigationService';
export { AlignedGridsService } from '~ag-grid/dist/lib/alignedGridsService';
export { Constants } from '~ag-grid/dist/lib/constants';
export { CsvCreator, BaseCreator } from '~ag-grid/dist/lib/csvCreator';
export { Downloader } from '~ag-grid/dist/lib/downloader';
export { Grid, GridParams } from '~ag-grid/dist/lib/grid';
export { GridApi, RedrawRowsParams, RefreshCellsParams, StartEditingCellParams, DetailGridInfo } from '~ag-grid/dist/lib/gridApi';
export { Events } from '~ag-grid/dist/lib/events';
export { FocusedCellController } from '~ag-grid/dist/lib/focusedCellController';
export { defaultGroupComparator } from '~ag-grid/dist/lib/functions';
export { GridOptionsWrapper } from '~ag-grid/dist/lib/gridOptionsWrapper';
export { EventService } from '~ag-grid/dist/lib/eventService';
export { SelectableService } from '~ag-grid/dist/lib/rowNodes/selectableService';
export { GridCore } from '~ag-grid/dist/lib/gridCore';
export { Logger } from '~ag-grid/dist/lib/logger';
export { SelectionController } from '~ag-grid/dist/lib/selectionController';
export { SortController } from '~ag-grid/dist/lib/sortController';
export { TemplateService } from '~ag-grid/dist/lib/templateService';
export { Utils, NumberSequence, _, Promise, ExternalPromise } from '~ag-grid/dist/lib/utils';
export { ValueService } from '~ag-grid/dist/lib/valueService/valueService';
export { ExpressionService } from '~ag-grid/dist/lib/valueService/expressionService';
export { XmlFactory } from '~ag-grid/dist/lib/xmlFactory';
export { GridSerializer, BaseGridSerializingSession, RowType } from '~ag-grid/dist/lib/gridSerializer';
export { CsvExportParams, ExportParams } from '~ag-grid/dist/lib/exportParams';
export { XmlElement } from '~ag-grid/dist/lib/xmlFactory';
export { LoggerFactory } from '~ag-grid/dist/lib/logger';
export { RowAccumulator, RowSpanningAccumulator } from '~ag-grid/dist/lib/gridSerializer';
export { IRowModel, RowBounds } from '~ag-grid/dist/lib/interfaces/iRowModel';
export { IAggFuncService } from '~ag-grid/dist/lib/interfaces/iAggFuncService';
export { IClipboardService } from '~ag-grid/dist/lib/interfaces/iClipboardService';
export { IExcelCreator } from '~ag-grid/dist/lib/interfaces/iExcelCreator';
export { IMenuFactory } from '~ag-grid/dist/lib/interfaces/iMenuFactory';
export { IAggFunc, ColGroupDef } from '~ag-grid/dist/lib/entities/colDef';
export { GridCellDef } from '~ag-grid/dist/lib/entities/gridCell';
export { ColDef } from '~ag-grid/dist/lib/entities/colDef';
export { ProcessCellForExportParams, ProcessHeaderForExportParams } from '~ag-grid/dist/lib/exportParams';
export { GridOptions, GetContextMenuItemsParams, GetContextMenuItems, GetDataPath, IsRowMaster, IsRowSelectable, MenuItemDef, GetNodeChildDetails, NodeChildDetails, GetMainMenuItemsParams, GetMainMenuItems, GetRowNodeIdFunc, ProcessRowParams, NavigateToNextCellParams, TabToNextCellParams, PostProcessPopupParams } from '~ag-grid/dist/lib/entities/gridOptions';
export { OriginalColumnGroupChild } from '~ag-grid/dist/lib/entities/originalColumnGroupChild';
export { IViewportDatasource, IViewportDatasourceParams } from '~ag-grid/dist/lib/interfaces/iViewportDatasource';
export { IContextMenuFactory } from '~ag-grid/dist/lib/interfaces/iContextMenuFactory';
export { ICompFactory } from '~ag-grid/dist/lib/interfaces/iCompFactory';
export { IRowNodeStage, StageExecuteParams } from '~ag-grid/dist/lib/interfaces/iRowNodeStage';
export { IFilterParams, IDoesFilterPassParams, SerializedFilter } from '~ag-grid/dist/lib/interfaces/iFilter';
export { ISetFilterParams, SetFilterValues, SetFilterValuesFunc, SetFilterValuesFuncParams } from '~ag-grid/dist/lib/interfaces/iSetFilterParams';
export { SerializedSetFilter } from '~ag-grid/dist/lib/interfaces/iSerializedSetFilter';
export { IDateParams, IDate, IDateComp } from '~ag-grid/dist/lib/rendering/dateComponent';
export { IAfterGuiAttachedParams, IComponent } from '~ag-grid/dist/lib/interfaces/iComponent';
export { IFilter, IFilterComp } from '~ag-grid/dist/lib/interfaces/iFilter';
export { IHeaderParams } from '~ag-grid/dist/lib/headerRendering/header/headerComp';
export { GetQuickFilterTextParams } from '~ag-grid/dist/lib/entities/colDef';
export { IHeaderGroupParams, IHeaderGroup } from '~ag-grid/dist/lib/headerRendering/headerGroup/headerGroupComp';
export { TextAndNumberFilterParameters } from '~ag-grid/dist/lib/filter/textAndNumberFilterParameters';
export { IsColumnFunc } from '~ag-grid/dist/lib/entities/colDef';
export { ColumnApi } from '~ag-grid/dist/lib/columnController/columnApi';
export { IHeader } from '~ag-grid/dist/lib/headerRendering/header/headerComp';
export { ICellRendererParams } from '~ag-grid/dist/lib/rendering/cellRenderers/iCellRenderer';
export { IRichCellEditorParams } from '~ag-grid/dist/lib/interfaces/iRichCellEditorParams';
export { WrapableInterface } from '~ag-grid/dist/lib/components/framework/frameworkComponentWrapper';
export { BaseComponentWrapper } from '~ag-grid/dist/lib/components/framework/frameworkComponentWrapper';
export { FrameworkComponentWrapper } from '~ag-grid/dist/lib/components/framework/frameworkComponentWrapper';
export { IFrameworkFactory } from '~ag-grid/dist/lib/interfaces/iFrameworkFactory';
export { SerializedNumberFilter } from '~ag-grid/dist/lib/filter/numberFilter';
export { Environment } from '~ag-grid/dist/lib/environment';
export { AgEvent, AgGridEvent, ModelUpdatedEvent, ColumnPivotModeChangedEvent, VirtualColumnsChangedEvent, ColumnEverythingChangedEvent, NewColumnsLoadedEvent, GridColumnsChangedEvent, DisplayedColumnsChangedEvent, RowDataChangedEvent, RowDataUpdatedEvent, PinnedRowDataChangedEvent, SelectionChangedEvent, FilterChangedEvent, FilterModifiedEvent, SortChangedEvent, GridReadyEvent, DragStartedEvent, DragStoppedEvent, DisplayedColumnsWidthChangedEvent, ColumnHoverChangedEvent, BodyHeightChangedEvent, ComponentStateChangedEvent, GridSizeChangedEvent, ViewportChangedEvent, RangeSelectionChangedEvent, ColumnGroupOpenedEvent, ItemsAddedEvent, BodyScrollEvent, FlashCellsEvent, PaginationChangedEvent, CellFocusedEvent, ColumnEvent, ColumnResizedEvent, ColumnPivotChangedEvent, ColumnRowGroupChangedEvent, ColumnValueChangedEvent, ColumnMovedEvent, ColumnVisibleEvent, ColumnPinnedEvent, RowEvent, RowGroupOpenedEvent, RowValueChangedEvent, RowSelectedEvent, VirtualRowRemovedEvent, RowClickedEvent, RowDoubleClickedEvent, RowEditingStartedEvent, RowEditingStoppedEvent, CellEvent, CellClickedEvent, CellMouseDownEvent, CellDoubleClickedEvent, CellMouseOverEvent, CellMouseOutEvent, CellContextMenuEvent, CellEditingStartedEvent, CellEditingStoppedEvent, CellValueChangedEvent, ColumnRequestEvent, ColumnRowGroupChangeRequestEvent, ColumnPivotChangeRequestEvent, ColumnValueChangeRequestEvent, ColumnAggFuncChangeRequestEvent, ScrollVisibilityChangedEvent, RowDragEvent, RowDragLeaveEvent, RowDragEnterEvent, RowDragEndEvent, RowDragMoveEvent, ToolPanelVisibleChanged } from '~ag-grid/dist/lib/events';
}
declare module 'ag-grid/main' {
export * from '~ag-grid/main';
}
declare module 'ag-grid' {
export * from '~ag-grid/main';
}
